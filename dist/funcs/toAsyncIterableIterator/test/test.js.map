{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { toAsyncIterableIterator } from \"../toAsyncIterableIterator.ts\"\r\n\r\nconst source = (vals: any[]) => new ReadableStream({\r\n  start(controller) {\r\n    for (const val of vals) {\r\n      controller.enqueue(val)\r\n    }\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst test = async (vals: any[]) => {\r\n  console.group(\"vals:\", vals.length > 10 ? `${vals.splice(0, 10)}...` : vals)\r\n  const readable = source(vals)\r\n  let i = 0\r\n  for await (const val of toAsyncIterableIterator(readable)) {\r\n    console.assert(val === vals[i])\r\n    ++i\r\n  }\r\n  console.groupEnd()\r\n}\r\n\r\nawait test([])\r\nawait test([1, 2, 3, 4, 5])\r\nawait test([\"a\", \"b\", \"c\", \"d\", \"e\"])\r\nawait test([1, undefined, null, \"a\", .1])\r\n\r\nconst big: any[] = []\r\nfor (let i = 0; i < 100000; ++i) big.push(i)\r\nawait test(big)\r\n\r\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,+BAA+B;AAExC,MAAM,SAAS,CAAC,SAAgB,IAAI,eAAe;AAAA,EACjD,MAAM,YAAY;AAChB,eAAW,OAAO,MAAM;AACtB,iBAAW,QAAQ,GAAG;AAAA,IACxB;AACA,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,OAAO,OAAO,SAAgB;AAClC,UAAQ,MAAM,SAAS,KAAK,SAAS,KAAK,GAAG,KAAK,OAAO,GAAG,EAAE,CAAC,QAAQ,IAAI;AAC3E,QAAM,WAAW,OAAO,IAAI;AAC5B,MAAI,IAAI;AACR,mBAAiB,OAAO,wBAAwB,QAAQ,GAAG;AACzD,YAAQ,OAAO,QAAQ,KAAK,CAAC,CAAC;AAC9B,MAAE;AAAA,EACJ;AACA,UAAQ,SAAS;AACnB;AAEA,MAAM,KAAK,CAAC,CAAC;AACb,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1B,MAAM,KAAK,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AACpC,MAAM,KAAK,CAAC,GAAG,QAAW,MAAM,KAAK,GAAE,CAAC;AAExC,MAAM,MAAa,CAAC;AACpB,SAAS,IAAI,GAAG,IAAI,KAAQ,EAAE;AAAG,MAAI,KAAK,CAAC;AAC3C,MAAM,KAAK,GAAG;AAEd,QAAQ,IAAI,iBAAiB;",
  "names": []
}
