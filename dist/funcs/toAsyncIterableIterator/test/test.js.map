{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { toAsyncIterableIterator } from \"../toAsyncIterableIterator.ts\"\n\n(async () => {\n\n  const source = (vals: any[]) => new ReadableStream({\n    start(controller) {\n      for (const val of vals) {\n        controller.enqueue(val)\n      }\n      controller.close()\n    }\n  })\n\n  const test = async (vals: any[]) => {\n    console.group(\"vals:\", vals.length > 10 ? `${vals.splice(0, 10)}...` : vals)\n    const readable = source(vals)\n    let i = 0\n    for await (const val of toAsyncIterableIterator(readable)) {\n      console.assert(val === vals[i])\n      ++i\n    }\n    console.groupEnd()\n  }\n\n  await test([])\n  await test([1, 2, 3, 4, 5])\n  await test([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  await test([1, undefined, null, \"a\", .1])\n\n  const big: any[] = []\n  for (let i = 0; i < 100000; ++i) big.push(i)\n  await test(big)\n\n  console.log(\"Test completed.\")\n\n})()"],
  "mappings": "aAAA,OAAS,2BAAAA,MAA+B,iCAEvC,SAAY,CAEX,MAAMC,EAAUC,GAAgB,IAAI,eAAe,CACjD,MAAMC,EAAY,CAChB,UAAWC,KAAOF,EAChBC,EAAW,QAAQC,CAAG,EAExBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAO,MAAOH,GAAgB,CAClC,QAAQ,MAAM,QAASA,EAAK,OAAS,GAAK,GAAGA,EAAK,OAAO,EAAG,EAAE,CAAC,MAAQA,CAAI,EAC3E,MAAMI,EAAWL,EAAOC,CAAI,EAC5B,IAAIK,EAAI,EACR,gBAAiBH,KAAOJ,EAAwBM,CAAQ,EACtD,QAAQ,OAAOF,IAAQF,EAAKK,CAAC,CAAC,EAC9B,EAAEA,EAEJ,QAAQ,SAAS,CACnB,EAEA,MAAMF,EAAK,CAAC,CAAC,EACb,MAAMA,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,CAAC,EAC1B,MAAMA,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,CAAC,EACpC,MAAMA,EAAK,CAAC,EAAG,OAAW,KAAM,IAAK,EAAE,CAAC,EAExC,MAAMG,EAAa,CAAC,EACpB,QAASD,EAAI,EAAGA,EAAI,IAAQ,EAAEA,EAAGC,EAAI,KAAKD,CAAC,EAC3C,MAAMF,EAAKG,CAAG,EAEd,QAAQ,IAAI,iBAAiB,CAE/B,GAAG",
  "names": ["toAsyncIterableIterator", "source", "vals", "controller", "val", "test", "readable", "i", "big"]
}
