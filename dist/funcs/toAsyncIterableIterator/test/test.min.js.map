{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { toAsyncIterableIterator } from \"../toAsyncIterableIterator.ts\"\r\n\r\nconst source = (vals: any[]) => new ReadableStream({\r\n  start(controller) {\r\n    for (const val of vals) {\r\n      controller.enqueue(val)\r\n    }\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst test = async (vals: any[]) => {\r\n  console.group(\"vals:\", vals.length > 10 ? `${vals.splice(0, 10)}...` : vals)\r\n  const readable = source(vals)\r\n  let i = 0\r\n  for await (const val of toAsyncIterableIterator(readable)) {\r\n    console.assert(val === vals[i])\r\n    ++i\r\n  }\r\n  console.groupEnd()\r\n}\r\n\r\nawait test([])\r\nawait test([1, 2, 3, 4, 5])\r\nawait test([\"a\", \"b\", \"c\", \"d\", \"e\"])\r\nawait test([1, undefined, null, \"a\", .1])\r\n\r\nconst big: any[] = []\r\nfor (let i = 0; i < 100000; ++i) big.push(i)\r\nawait test(big)\r\n\r\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,2BAAAA,MAA+B,gCAExC,MAAMC,EAAUC,GAAgB,IAAI,eAAe,CACjD,MAAMC,EAAY,CAChB,UAAWC,KAAOF,EAChBC,EAAW,QAAQC,CAAG,EAExBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAO,MAAOH,GAAgB,CAClC,QAAQ,MAAM,QAASA,EAAK,OAAS,GAAK,GAAGA,EAAK,OAAO,EAAG,EAAE,CAAC,MAAQA,CAAI,EAC3E,MAAMI,EAAWL,EAAOC,CAAI,EAC5B,IAAIK,EAAI,EACR,gBAAiBH,KAAOJ,EAAwBM,CAAQ,EACtD,QAAQ,OAAOF,IAAQF,EAAKK,CAAC,CAAC,EAC9B,EAAEA,EAEJ,QAAQ,SAAS,CACnB,EAEA,MAAMF,EAAK,CAAC,CAAC,EACb,MAAMA,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,CAAC,EAC1B,MAAMA,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,CAAC,EACpC,MAAMA,EAAK,CAAC,EAAG,OAAW,KAAM,IAAK,EAAE,CAAC,EAExC,MAAMG,EAAa,CAAC,EACpB,QAASD,EAAI,EAAGA,EAAI,IAAQ,EAAEA,EAAGC,EAAI,KAAKD,CAAC,EAC3C,MAAMF,EAAKG,CAAG,EAEd,QAAQ,IAAI,iBAAiB",
  "names": ["toAsyncIterableIterator", "source", "vals", "controller", "val", "test", "readable", "i", "big"]
}
