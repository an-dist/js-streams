{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { ArrayBufferAccumulator } from \"./ArrayBufferAccumulator.ts\"\nimport { PerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nfunction source(totalSize: number, chunkSize: number, isArray: boolean) {\n  return new ReadableStream<Uint8Array | Array<number>>({\n    start(controller) {\n      const bytes = new ArrayBuffer(totalSize)\n      const count = bytes.byteLength / chunkSize\n      for (let i = 0; i < count; ++i) {\n        const bytesView = new Uint8Array(bytes.slice(i * chunkSize, i * chunkSize + chunkSize))\n        if (isArray) {\n          const array = Array.from(bytesView.values())\n          controller.enqueue(array)\n        }\n        else {\n          controller.enqueue(bytesView)\n        }\n      }\n      controller.close()\n    }\n  })\n}\n\ninterface WritableResult {\n  sizeOfWritten: number\n}\n\nfunction results<T extends ArrayBufferLike | ArrayLike<any>>(result: WritableResult) {\n  return new WritableStream<T>({\n    write(chunk) {\n      if (Array.isArray(chunk)) {\n        result.sizeOfWritten += chunk.length\n      }\n      else {\n        result.sizeOfWritten += (chunk as ArrayBufferLike).byteLength\n      }\n    }\n  })\n}\n\nfunction assertChunkSize<T extends ArrayBufferLike | ArrayLike<any>>(totalSize: number, chunkSize: number) {\n  return new TransformStream<T, T>({\n    transform(chunk, controller) {\n      let length: number\n      if (Array.isArray(chunk)) {\n        length = chunk.length\n      }\n      else {\n        length = (chunk as ArrayBufferLike).byteLength\n      }\n      console.assert([\n        totalSize,\n        chunkSize,\n        totalSize - (chunkSize * Math.floor(totalSize / chunkSize)),\n      ].indexOf(length) !== -1, {\n        receivedChunkSize: length,\n      })\n      controller.enqueue(chunk)\n    }\n  })\n}\n\nconst test = async (totalSize: number, readableChunkSize: number, chunkSize: number, fixed: boolean, isArray: boolean) => {\n  readableChunkSize = readableChunkSize === 0 ? totalSize : readableChunkSize\n\n  const builder = new PerformanceStreamBuilder<Uint8Array | number[], Uint8Array | number[]>(\"ArrayBufferAccumulator\", \"start\", \"end\")\n  const result: WritableResult = { sizeOfWritten: 0 }\n\n  await source(totalSize, readableChunkSize, isArray)\n    .pipeThrough(builder\n      .pipe(new ArrayBufferAccumulator(chunkSize, { fixed }).transform())\n      .build())\n    .pipeThrough(assertChunkSize(totalSize, chunkSize))\n    .pipeTo(results(result))\n\n  const psResult = builder.result()\n  console.assert(psResult !== undefined)\n\n  console.groupCollapsed([\n    `ReadableStream(${totalSize.toLocaleString()}, { isArray: ${isArray} }) =>`,\n    `chunk(${readableChunkSize.toLocaleString()}) =>`,\n    `ArrayBufferAccumulator(${chunkSize.toLocaleString()}, { fixed: ${fixed} })`,\n    `durationOfOccupancy: ${psResult!.occupancy}`,\n  ].join(\" \"))\n\n  console.assert((fixed\n    ? chunkSize * Math.ceil(totalSize / chunkSize)\n    : totalSize) === result.sizeOfWritten, {\n    sizeOfWritten: result.sizeOfWritten,\n  })\n\n  console.table({\n    totalSize,\n    readableChunkSize,\n    chunkSize,\n    sizeOfWritten: result.sizeOfWritten,\n    transforming: psResult!.transforming,\n    durationOfOccupancy: psResult!.occupancy,\n    durationMinimum: psResult!.maximum,\n    durationMaximum: psResult!.maximum,\n    durationAverage: psResult!.average,\n    durationMedian: psResult!.median,\n  })\n\n  console.groupEnd()\n\n  await sleep()\n}\n\nconst testNewLine = async (chunkSize: number) => {\n  const text = \"aaaaaaaaaa\\nbbbbbbbbbb\\ncccccccccc\\ndddddddddd\\neeeeeeeeee\\n11111\"\n\n  const readable = new ReadableStream<string>({\n    start(controller) {\n      controller.enqueue(text)\n      controller.close()\n    }\n  })\n\n  const writable = new WritableStream({\n    write(chunk) {\n      console.log(`[${chunk}]`)\n    }\n  })\n\n  await readable\n    .pipeThrough(new Utf8EncoderStream)\n    .pipeThrough(new ArrayBufferAccumulator(chunkSize, { forceEmit: [[10, 13], [13], [10]] }).transform())\n    .pipeThrough(new Utf8DecoderStream)\n    .pipeTo(writable)\n}\n\n// warmup\nawait source(1, 1, false)\n  .pipeThrough(new ArrayBufferAccumulator(1).transform())\n  .pipeTo(new WritableStream)\n\nconst totalSizes = [\n  1,\n  1000,\n  1 * 1024 * 1024,\n]\nconst readableChunkSizes = [\n  64,\n  1000,\n  8192,\n  8192 * 10,\n  0,\n]\nconst chunkSizes = [\n  128,\n  256,\n  512,\n  1000,\n  8192,\n]\n\nconsole.groupCollapsed(\"Testing ArrayBuffer|Array\")\nfor (const totalSize of totalSizes) {\n  console.groupCollapsed(`totalSize: ${totalSize}`)\n  for (const readableChunkSize of readableChunkSizes) {\n    for (const chunkSize of chunkSizes) {\n      for (const fixed of [false, true]) {\n        for (const isArray of [false, true]) {\n          await test(totalSize, readableChunkSize, chunkSize, fixed, isArray)\n        }\n      }\n    }\n  }\n  console.groupEnd()\n}\nconsole.groupEnd()\n\nconsole.groupCollapsed(\"Testing line separate\")\nconsole.groupCollapsed(\"> size\")\nawait testNewLine(8)\nconsole.groupEnd()\nconsole.groupCollapsed(\"= size\")\nawait testNewLine(10)\nconsole.groupEnd()\nconsole.groupCollapsed(\"< size\")\nawait testNewLine(13)\nconsole.groupEnd()\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": []
}
