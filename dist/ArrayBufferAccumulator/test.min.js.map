{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { ArrayBufferAccumulator } from \"./ArrayBufferAccumulator.ts\"\nimport { PerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nfunction source(totalSize: number, chunkSize: number, isArray: boolean) {\n  return new ReadableStream<Uint8Array | Array<number>>({\n    start(controller) {\n      const bytes = new ArrayBuffer(totalSize)\n      const count = bytes.byteLength / chunkSize\n      for (let i = 0; i < count; ++i) {\n        const bytesView = new Uint8Array(bytes.slice(i * chunkSize, i * chunkSize + chunkSize))\n        if (isArray) {\n          const array = Array.from(bytesView.values())\n          controller.enqueue(array)\n        }\n        else {\n          controller.enqueue(bytesView)\n        }\n      }\n      controller.close()\n    }\n  })\n}\n\ninterface WritableResult {\n  sizeOfWritten: number\n}\n\nfunction results<T extends ArrayBufferLike | ArrayLike<any>>(result: WritableResult) {\n  return new WritableStream<T>({\n    write(chunk) {\n      if (Array.isArray(chunk)) {\n        result.sizeOfWritten += chunk.length\n      }\n      else {\n        result.sizeOfWritten += (chunk as ArrayBufferLike).byteLength\n      }\n    }\n  })\n}\n\nfunction assertChunkSize<T extends ArrayBufferLike | ArrayLike<any>>(totalSize: number, chunkSize: number) {\n  return new TransformStream<T, T>({\n    transform(chunk, controller) {\n      let length: number\n      if (Array.isArray(chunk)) {\n        length = chunk.length\n      }\n      else {\n        length = (chunk as ArrayBufferLike).byteLength\n      }\n      console.assert([\n        totalSize,\n        chunkSize,\n        totalSize - (chunkSize * Math.floor(totalSize / chunkSize)),\n      ].indexOf(length) !== -1, {\n        receivedChunkSize: length,\n      })\n      controller.enqueue(chunk)\n    }\n  })\n}\n\nconst test = async (totalSize: number, readableChunkSize: number, chunkSize: number, fixed: boolean, isArray: boolean) => {\n  readableChunkSize = readableChunkSize === 0 ? totalSize : readableChunkSize\n\n  const builder = new PerformanceStreamBuilder<Uint8Array | number[], Uint8Array | number[]>(\"ArrayBufferAccumulator\", \"start\", \"end\")\n  const result: WritableResult = { sizeOfWritten: 0 }\n\n  await source(totalSize, readableChunkSize, isArray)\n    .pipeThrough(builder\n      .pipe(new ArrayBufferAccumulator(chunkSize, { fixed }).transform())\n      .build())\n    .pipeThrough(assertChunkSize(totalSize, chunkSize))\n    .pipeTo(results(result))\n\n  const psResult = builder.result()\n  console.assert(psResult !== undefined)\n\n  console.groupCollapsed([\n    `ReadableStream(${totalSize.toLocaleString()}, { isArray: ${isArray} }) =>`,\n    `chunk(${readableChunkSize.toLocaleString()}) =>`,\n    `ArrayBufferAccumulator(${chunkSize.toLocaleString()}, { fixed: ${fixed} })`,\n    `durationOfOccupancy: ${psResult!.occupancy}`,\n  ].join(\" \"))\n\n  console.assert((fixed\n    ? chunkSize * Math.ceil(totalSize / chunkSize)\n    : totalSize) === result.sizeOfWritten, {\n    sizeOfWritten: result.sizeOfWritten,\n  })\n\n  console.table({\n    totalSize,\n    readableChunkSize,\n    chunkSize,\n    sizeOfWritten: result.sizeOfWritten,\n    transforming: psResult!.transforming,\n    durationOfOccupancy: psResult!.occupancy,\n    durationMinimum: psResult!.maximum,\n    durationMaximum: psResult!.maximum,\n    durationAverage: psResult!.average,\n    durationMedian: psResult!.median,\n  })\n\n  console.groupEnd()\n\n  await sleep()\n}\n\nconst testNewLine = async (chunkSize: number) => {\n  const text = \"aaaaaaaaaa\\nbbbbbbbbbb\\ncccccccccc\\ndddddddddd\\neeeeeeeeee\\n11111\"\n\n  const readable = new ReadableStream<string>({\n    start(controller) {\n      controller.enqueue(text)\n      controller.close()\n    }\n  })\n\n  const writable = new WritableStream({\n    write(chunk) {\n      console.log(`[${chunk}]`)\n    }\n  })\n\n  await readable\n    .pipeThrough(new Utf8EncoderStream)\n    .pipeThrough(new ArrayBufferAccumulator(chunkSize, { forceEmit: [[10, 13], [13], [10]] }).transform())\n    .pipeThrough(new Utf8DecoderStream)\n    .pipeTo(writable)\n}\n\n// warmup\nawait source(1, 1, false)\n  .pipeThrough(new ArrayBufferAccumulator(1).transform())\n  .pipeTo(new WritableStream)\n\nconst totalSizes = [\n  1,\n  1000,\n  1 * 1024 * 1024,\n]\nconst readableChunkSizes = [\n  64,\n  1000,\n  8192,\n  8192 * 10,\n  0,\n]\nconst chunkSizes = [\n  128,\n  256,\n  512,\n  1000,\n  8192,\n]\n\nconsole.groupCollapsed(\"Testing ArrayBuffer|Array\")\nfor (const totalSize of totalSizes) {\n  console.groupCollapsed(`totalSize: ${totalSize}`)\n  for (const readableChunkSize of readableChunkSizes) {\n    for (const chunkSize of chunkSizes) {\n      for (const fixed of [false, true]) {\n        for (const isArray of [false, true]) {\n          await test(totalSize, readableChunkSize, chunkSize, fixed, isArray)\n        }\n      }\n    }\n  }\n  console.groupEnd()\n}\nconsole.groupEnd()\n\nconsole.groupCollapsed(\"Testing line separate\")\nconsole.groupCollapsed(\"> size\")\nawait testNewLine(8)\nconsole.groupEnd()\nconsole.groupCollapsed(\"= size\")\nawait testNewLine(10)\nconsole.groupEnd()\nconsole.groupCollapsed(\"< size\")\nawait testNewLine(13)\nconsole.groupEnd()\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": ["ArrayBufferAccumulator", "PerformanceStreamBuilder", "Utf8DecoderStream", "Utf8EncoderStream", "sleep", "source", "totalSize", "chunkSize", "isArray", "controller", "bytes", "count", "i", "bytesView", "array", "results", "result", "chunk", "assertChunkSize", "length", "test", "readableChunkSize", "fixed", "builder", "psResult", "testNewLine", "text", "readable", "writable", "totalSizes", "readableChunkSizes", "chunkSizes"]
}
