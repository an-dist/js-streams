import{ArrayBufferAccumulator as l}from"./ArrayBufferAccumulator.min.js";import{PerformanceStreamBuilder as p}from"../PerformanceStream/PerformanceStream.min.js";import{Utf8DecoderStream as d,Utf8EncoderStream as g}from"../Utf8Streams/Utf8Streams.min.js";import{sleep as m}from"../funcs/sleep/sleep.min.js";function f(o,e,r){return new ReadableStream({start(n){const t=new ArrayBuffer(o),c=t.byteLength/e;for(let s=0;s<c;++s){const a=new Uint8Array(t.slice(s*e,s*e+e));if(r){const i=Array.from(a.values());n.enqueue(i)}else n.enqueue(a)}n.close()}})}function b(o){return new WritableStream({write(e){Array.isArray(e)?o.sizeOfWritten+=e.length:o.sizeOfWritten+=e.byteLength}})}function w(o,e){return new TransformStream({transform(r,n){let t;Array.isArray(r)?t=r.length:t=r.byteLength,console.assert([o,e,o-e*Math.floor(o/e)].indexOf(t)!==-1,{receivedChunkSize:t}),n.enqueue(r)}})}const y=async(o,e,r,n,t)=>{e=e===0?o:e;const c=new p("ArrayBufferAccumulator","start","end"),s={sizeOfWritten:0};await f(o,e,t).pipeThrough(c.pipe(new l(r,{fixed:n}).transformable()).build()).pipeThrough(w(o,r)).pipeTo(b(s));const a=c.result();console.assert(a!==void 0),console.groupCollapsed([`ReadableStream(${o.toLocaleString()}, { isArray: ${t} }) =>`,`chunk(${e.toLocaleString()}) =>`,`ArrayBufferAccumulator(${r.toLocaleString()}, { fixed: ${n} })`,`durationOfOccupancy: ${a.occupancy}`].join(" ")),console.assert((n?r*Math.ceil(o/r):o)===s.sizeOfWritten,{sizeOfWritten:s.sizeOfWritten});const i={totalSize:o,readableChunkSize:e,chunkSize:r,sizeOfWritten:s.sizeOfWritten,transforming:a.transforming,durationOfOccupancy:a.occupancy,durationMinimum:a.maximum,durationMaximum:a.maximum,durationAverage:a.average,durationMedian:a.median};return console.table(i),console.groupEnd(),await m(),i},u=async o=>{const e=`aaaaaaaaaa
bbbbbbbbbb
cccccccccc
dddddddddd
eeeeeeeeee
11111`,r=new ReadableStream({start(t){t.enqueue(e),t.close()}}),n=new WritableStream({write(t){console.log(`[${t}]`)}});await r.pipeThrough(new g).pipeThrough(new l(o,{forceEmit:[[10,13],[13],[10]]}).transformable()).pipeThrough(new d).pipeTo(n)};await f(1,1,!1).pipeThrough(new l(1).transformable()).pipeTo(new WritableStream);const O=[1,1e3,1*1024*1024],A=[64,1e3,8192,8192*10,0],T=[128,256,512,1e3,8192];console.group("Testing ArrayBuffer|Array");for(const o of O){console.group(`totalSize: ${o}`);let e,r;console.groupCollapsed("Tests");for(const n of A)for(const t of T)for(const c of[!1,!0])for(const s of[!1,!0]){const a=await y(o,n,t,c,s);(!e||e.perf.durationOfOccupancy>a.durationOfOccupancy)&&(e={totalSize:o,readableChunkSize:n===0?o:n,chunkSize:t,fixed:c,isArray:s,perf:a}),(!r||r.perf.durationOfOccupancy<a.durationOfOccupancy)&&(r={totalSize:o,readableChunkSize:n===0?o:n,chunkSize:t,fixed:c,isArray:s,perf:a})}console.groupEnd(),console.group("Fastest"),console.table(e),console.groupEnd(),console.group("Slowest"),console.table(r),console.groupEnd(),console.groupEnd()}console.groupEnd(),console.groupCollapsed("Testing line separate"),console.groupCollapsed("> size"),await u(8),console.groupEnd(),console.groupCollapsed("= size"),await u(10),console.groupEnd(),console.groupCollapsed("< size"),await u(13),console.groupEnd(),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
