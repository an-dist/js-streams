import{ArrayBufferAccumulator as c}from"./ArrayBufferAccumulator.min.js";import{PerformanceStreamBuilder as p}from"../PerformanceStream/PerformanceStream.min.js";import{Utf8DecoderStream as d,Utf8EncoderStream as m}from"../Utf8Streams/Utf8Streams.min.js";import{sleep as g}from"../funcs/sleep/sleep.min.js";function f(o,e,r){return new ReadableStream({start(n){const t=new ArrayBuffer(o),i=t.byteLength/e;for(let s=0;s<i;++s){const a=new Uint8Array(t.slice(s*e,s*e+e));if(r){const u=Array.from(a.values());n.enqueue(u)}else n.enqueue(a)}n.close()}})}function w(o){return new WritableStream({write(e){Array.isArray(e)?o.sizeOfWritten+=e.length:o.sizeOfWritten+=e.byteLength}})}function y(o,e){return new TransformStream({transform(r,n){let t;Array.isArray(r)?t=r.length:t=r.byteLength,console.assert([o,e,o-e*Math.floor(o/e)].indexOf(t)!==-1,{receivedChunkSize:t}),n.enqueue(r)}})}const b=async(o,e,r,n,t)=>{e=e===0?o:e;const i=new p("ArrayBufferAccumulator","start","end"),s={sizeOfWritten:0};await f(o,e,t).pipeThrough(i.pipe(new c(r,{fixed:n}).transform()).build()).pipeThrough(y(o,r)).pipeTo(w(s));const a=i.result();console.assert(a!==void 0),console.groupCollapsed([`ReadableStream(${o.toLocaleString()}, { isArray: ${t} }) =>`,`chunk(${e.toLocaleString()}) =>`,`ArrayBufferAccumulator(${r.toLocaleString()}, { fixed: ${n} })`,`durationOfOccupancy: ${a.occupancy}`].join(" ")),console.assert((n?r*Math.ceil(o/r):o)===s.sizeOfWritten,{sizeOfWritten:s.sizeOfWritten}),console.table({totalSize:o,readableChunkSize:e,chunkSize:r,sizeOfWritten:s.sizeOfWritten,transforming:a.transforming,durationOfOccupancy:a.occupancy,durationMinimum:a.maximum,durationMaximum:a.maximum,durationAverage:a.average,durationMedian:a.median}),console.groupEnd(),await g()},l=async o=>{const e=`aaaaaaaaaa
bbbbbbbbbb
cccccccccc
dddddddddd
eeeeeeeeee
11111`,r=new ReadableStream({start(t){t.enqueue(e),t.close()}}),n=new WritableStream({write(t){console.log(`[${t}]`)}});await r.pipeThrough(new m).pipeThrough(new c(o,{forceEmit:[[10,13],[13],[10]]}).transform()).pipeThrough(new d).pipeTo(n)};await f(1,1,!1).pipeThrough(new c(1).transform()).pipeTo(new WritableStream);const A=[1,1e3,1*1024*1024],O=[64,1e3,8192,8192*10,0],T=[128,256,512,1e3,8192];console.groupCollapsed("Testing ArrayBuffer|Array");for(const o of A){console.groupCollapsed(`totalSize: ${o}`);for(const e of O)for(const r of T)for(const n of[!1,!0])for(const t of[!1,!0])await b(o,e,r,n,t);console.groupEnd()}console.groupEnd(),console.groupCollapsed("Testing line separate"),console.groupCollapsed("> size"),await l(8),console.groupEnd(),console.groupCollapsed("= size"),await l(10),console.groupEnd(),console.groupCollapsed("< size"),await l(13),console.groupEnd(),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
