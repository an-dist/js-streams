import{ArrayAccumulator as s}from"./ArrayAccumulator.min.js";const l=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),u=()=>new TransformStream({transform(e,o){console.log(e),o.enqueue(e)}}),f=()=>new WritableStream,i=async(e,o)=>{const a=new s(e);await a.push(o);for await(const n of a.flush())console.log(n)},m=async(e,o)=>{const a=new s(e);for await(const n of a.flush(o))console.log(n)},p=async(e,o)=>{const a=new s(e);await a.push(o);for await(const n of a)console.log(n)},d=async(e,o)=>{await new s(e).readable(o).pipeThrough(u()).pipeTo(f())},g=async(e,o)=>{const a=new s(e);await l(o).pipeThrough(a.transform()).pipeThrough(u()).pipeTo(f())},w=async(e,o)=>{const a=new s(e);await l(o).pipeTo(a.writable());for await(const n of a)console.log(n)},r=async(e,o)=>{console.groupCollapsed(`size=${e}, total=${o}`),performance.clearMeasures("perf"),performance.clearMarks("start"),performance.clearMarks("end"),performance.mark("start");const a=new s(e);for(let t=0;t<o;++t)for await(const c of a.pull(t))console.assert(c.length===e,"flush= false","value=",c,"length=",c.length,"size=",e);for await(const t of a.flush())console.assert(t.length===o%e,"flush= true","value=",t,"length=",t.length,"size=",o%e);performance.mark("end"),performance.measure("perf","start","end");const n=performance.getEntriesByName("perf")[0];console.log(`duration: ${n.duration}`),console.groupEnd()},y=[{name:"Push",func:i},{name:"Flush",func:m},{name:"AsyncIterator",func:p},{name:"Readable",func:d},{name:"Transform",func:g},{name:"Writable",func:w}],h=[4,5,6],b=[void 0,null,"abc",123,1.23,[1,2,3,4,5],["aaa","bbb","ccc","ddd","eee"],[{a:1},{b:2},{c:3},{d:4},{e:5}],function*(){yield 1,yield 2,yield 3,yield 4,yield 5},async function*(){yield 1,yield 2,yield 3,yield 4,yield 5}];for(const e of y){console.groupCollapsed(e.name);for(const o of b)for(const a of h)console.groupCollapsed(`size=${a}, data=${JSON.stringify(o)}`),await e.func(a,o),console.groupEnd();console.groupEnd()}console.groupCollapsed("Performance"),await r(8,1e5),await r(32,1e5),await r(1e3,1e5),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
