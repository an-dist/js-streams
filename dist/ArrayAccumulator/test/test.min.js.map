{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { ArrayAccumulator } from \"../ArrayAccumulator.ts\"\r\n\r\nconst source = (data: any) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(data)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = () => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst terminate = () => new WritableStream()\r\n\r\nconst testPush = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.push(data)\r\n  for await (const value of accumulator.flush()) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testFlush = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  for await (const value of accumulator.flush(data)) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testAsyncIterator = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.push(data)\r\n  for await (const value of accumulator) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testReadable = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.readable(data).pipeThrough(logging()).pipeTo(terminate())\r\n}\r\n\r\nconst testTransform = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await source(data).pipeThrough(accumulator.transform()).pipeThrough(logging()).pipeTo(terminate())\r\n}\r\n\r\nconst testWritable = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await source(data).pipeTo(accumulator.writable())\r\n  for await (const value of accumulator) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testPerformance = async (size: number, total: number) => {\r\n  console.groupCollapsed(`size=${size}, total=${total}`)\r\n  performance.clearMeasures(\"perf\")\r\n  performance.clearMarks(\"start\")\r\n  performance.clearMarks(\"end\")\r\n  performance.mark(\"start\")\r\n  const accumulator = new ArrayAccumulator(size)\r\n  for (let i = 0; i < total; ++i) {\r\n    for await (const value of accumulator.pull(i)) {\r\n      console.assert(value.length === size, \"flush= false\", \"value=\", value, \"length=\", value.length, \"size=\", size)\r\n    }\r\n  }\r\n  for await (const value of accumulator.flush()) {\r\n    console.assert(value.length === total % size, \"flush= true\", \"value=\", value, \"length=\", value.length, \"size=\", total % size)\r\n  }\r\n  performance.mark(\"end\")\r\n  performance.measure(\"perf\", \"start\", \"end\")\r\n  const perf = performance.getEntriesByName(\"perf\")[0]\r\n  console.log(`duration: ${perf.duration}`)\r\n  console.groupEnd()\r\n}\r\n\r\nconst testList: { name: string, func: (size: number, data: any) => Promise<void> }[] = [\r\n  { name: \"Push\", func: testPush },\r\n  { name: \"Flush\", func: testFlush },\r\n  { name: \"AsyncIterator\", func: testAsyncIterator },\r\n  { name: \"Readable\", func: testReadable },\r\n  { name: \"Transform\", func: testTransform },\r\n  { name: \"Writable\", func: testWritable },\r\n]\r\n\r\nconst sizeList = [\r\n  4,\r\n  5,\r\n  6,\r\n]\r\n\r\nconst dataList = [\r\n  undefined,\r\n  null,\r\n  \"abc\",\r\n  123,\r\n  1.23,\r\n  [1, 2, 3, 4, 5],\r\n  [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"],\r\n  [{ a: 1 }, { b: 2 }, { c: 3 }, { d: 4 }, { e: 5 }],\r\n  function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\r\n  async function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\r\n]\r\n\r\nfor (const test of testList) {\r\n  console.groupCollapsed(test.name)\r\n  for (const data of dataList) {\r\n    for (const size of sizeList) {\r\n      console.groupCollapsed(`size=${size}, data=${JSON.stringify(data)}`)\r\n      await test.func(size, data)\r\n      console.groupEnd()\r\n    }\r\n  }\r\n  console.groupEnd()\r\n}\r\n\r\nconsole.groupCollapsed(\"Performance\")\r\nawait testPerformance(8, 100000)\r\nawait testPerformance(32, 100000)\r\nawait testPerformance(1000, 100000)\r\nconsole.groupEnd()\r\n\r\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": ["ArrayAccumulator", "source", "data", "controller", "logging", "chunk", "terminate", "testPush", "size", "accumulator", "value", "testFlush", "testAsyncIterator", "testReadable", "testTransform", "testWritable", "testPerformance", "total", "i", "perf", "testList", "sizeList", "dataList", "test"]
}
