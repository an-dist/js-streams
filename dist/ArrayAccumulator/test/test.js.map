{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { ArrayAccumulator } from \"../ArrayAccumulator.ts\"\nimport { CompatiblePerformance } from \"../../misc/CompatiblePerformance/CompatiblePerformance.ts\"\nimport { sleep } from \"../../funcs/sleep/sleep.ts\"\n\n(async () => {\n\n  CompatiblePerformance.replaceIfUnsupported()\n\n  const source = (data: any) => new ReadableStream({\n    start(controller) {\n      controller.enqueue(data)\n      controller.close()\n    }\n  })\n\n  const logging = () => new TransformStream({\n    transform(chunk, controller) {\n      console.log(chunk)\n      controller.enqueue(chunk)\n    }\n  })\n\n  const terminate = () => new WritableStream()\n\n  const testPush = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    await accumulator.push(data)\n    for await (const value of accumulator.flush()) {\n      console.log(value)\n    }\n  }\n\n  const testFlush = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    for await (const value of accumulator.flush(data)) {\n      console.log(value)\n    }\n  }\n\n  const testAsyncIterator = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    await accumulator.push(data)\n    for await (const value of accumulator) {\n      console.log(value)\n    }\n  }\n\n  const testReadable = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    await accumulator.readable(data).pipeThrough(logging()).pipeTo(terminate())\n  }\n\n  const testTransform = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    await source(data).pipeThrough(accumulator.transform()).pipeThrough(logging()).pipeTo(terminate())\n  }\n\n  const testWritable = async (size: number, data: any) => {\n    const accumulator = new ArrayAccumulator(size)\n    await source(data).pipeTo(accumulator.writable())\n    for await (const value of accumulator) {\n      console.log(value)\n    }\n  }\n\n  const testPerformance = async (size: number, total: number) => {\n    console.groupCollapsed(`size=${size}, total=${total}`)\n    performance.clearMeasures(\"perf\")\n    performance.clearMarks(\"start\")\n    performance.clearMarks(\"end\")\n    performance.mark(\"start\")\n    const accumulator = new ArrayAccumulator(size)\n    for (let i = 0; i < total; ++i) {\n      for await (const value of accumulator.pull(i)) {\n        console.assert(value.length === size, \"flush= false\", \"value=\", value, \"length=\", value.length, \"size=\", size)\n      }\n    }\n    for await (const value of accumulator.flush()) {\n      console.assert(value.length === total % size, \"flush= true\", \"value=\", value, \"length=\", value.length, \"size=\", total % size)\n    }\n    performance.mark(\"end\")\n    performance.measure(\"perf\", \"start\", \"end\")\n    const perf = performance.getEntriesByName(\"perf\")[0]\n    console.log(`duration: ${perf.duration}`)\n    console.groupEnd()\n\n    await sleep(0)\n  }\n\n  const testList: { name: string, func: (size: number, data: any) => Promise<void> }[] = [\n    { name: \"Push\", func: testPush },\n    { name: \"Flush\", func: testFlush },\n    { name: \"AsyncIterator\", func: testAsyncIterator },\n    { name: \"Readable\", func: testReadable },\n    { name: \"Transform\", func: testTransform },\n    { name: \"Writable\", func: testWritable },\n  ]\n\n  const sizeList = [\n    4,\n    5,\n    6,\n  ]\n\n  const dataList = [\n    undefined,\n    null,\n    \"abc\",\n    123,\n    1.23,\n    [1, 2, 3, 4, 5],\n    [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"],\n    [{ a: 1 }, { b: 2 }, { c: 3 }, { d: 4 }, { e: 5 }],\n    function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\n    async function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\n  ]\n\n  for (const test of testList) {\n    console.groupCollapsed(test.name)\n    for (const data of dataList) {\n      for (const size of sizeList) {\n        console.groupCollapsed(`size=${size}, data=${JSON.stringify(data)}`)\n        await test.func(size, data)\n        console.groupEnd()\n        await sleep(0)\n      }\n    }\n    console.groupEnd()\n  }\n\n  console.groupCollapsed(\"Performance\")\n  await testPerformance(8, 100000)\n  await testPerformance(32, 100000)\n  await testPerformance(1000, 100000)\n  console.groupEnd()\n\n  console.log(\"Test completed.\")\n\n})()"],
  "mappings": "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",
  "names": ["ArrayAccumulator", "CompatiblePerformance", "sleep", "source", "data", "controller", "logging", "chunk", "terminate", "testPush", "size", "accumulator", "value", "testFlush", "testAsyncIterator", "testReadable", "testTransform", "testWritable", "testPerformance", "total", "i", "perf", "testList", "sizeList", "dataList", "test"]
}
