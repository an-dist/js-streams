{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { ArrayAccumulator } from \"../ArrayAccumulator.ts\"\r\n\r\nconst source = (data: any) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(data)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = () => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst terminate = () => new WritableStream()\r\n\r\nconst testPush = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.push(data)\r\n  for await (const value of accumulator.flush()) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testFlush = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  for await (const value of accumulator.flush(data)) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testAsyncIterator = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.push(data)\r\n  for await (const value of accumulator) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testReadable = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await accumulator.readable(data).pipeThrough(logging()).pipeTo(terminate())\r\n}\r\n\r\nconst testTransform = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await source(data).pipeThrough(accumulator.transform()).pipeThrough(logging()).pipeTo(terminate())\r\n}\r\n\r\nconst testWritable = async (size: number, data: any) => {\r\n  const accumulator = new ArrayAccumulator(size)\r\n  await source(data).pipeTo(accumulator.writable())\r\n  for await (const value of accumulator) {\r\n    console.log(value)\r\n  }\r\n}\r\n\r\nconst testPerformance = async (size: number, total: number) => {\r\n  console.groupCollapsed(`size=${size}, total=${total}`)\r\n  performance.clearMeasures(\"perf\")\r\n  performance.clearMarks(\"start\")\r\n  performance.clearMarks(\"end\")\r\n  performance.mark(\"start\")\r\n  const accumulator = new ArrayAccumulator(size)\r\n  for (let i = 0; i < total; ++i) {\r\n    for await (const value of accumulator.pull(i)) {\r\n      console.assert(value.length === size, \"flush= false\", \"value=\", value, \"length=\", value.length, \"size=\", size)\r\n    }\r\n  }\r\n  for await (const value of accumulator.flush()) {\r\n    console.assert(value.length === total % size, \"flush= true\", \"value=\", value, \"length=\", value.length, \"size=\", total % size)\r\n  }\r\n  performance.mark(\"end\")\r\n  performance.measure(\"perf\", \"start\", \"end\")\r\n  const perf = performance.getEntriesByName(\"perf\")[0]\r\n  console.log(`duration: ${perf.duration}`)\r\n  console.groupEnd()\r\n}\r\n\r\nconst testList: { name: string, func: (size: number, data: any) => Promise<void> }[] = [\r\n  { name: \"Push\", func: testPush },\r\n  { name: \"Flush\", func: testFlush },\r\n  { name: \"AsyncIterator\", func: testAsyncIterator },\r\n  { name: \"Readable\", func: testReadable },\r\n  { name: \"Transform\", func: testTransform },\r\n  { name: \"Writable\", func: testWritable },\r\n]\r\n\r\nconst sizeList = [\r\n  4,\r\n  5,\r\n  6,\r\n]\r\n\r\nconst dataList = [\r\n  undefined,\r\n  null,\r\n  \"abc\",\r\n  123,\r\n  1.23,\r\n  [1, 2, 3, 4, 5],\r\n  [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"],\r\n  [{ a: 1 }, { b: 2 }, { c: 3 }, { d: 4 }, { e: 5 }],\r\n  function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\r\n  async function* () { yield 1; yield 2; yield 3; yield 4; yield 5; },\r\n]\r\n\r\nfor (const test of testList) {\r\n  console.groupCollapsed(test.name)\r\n  for (const data of dataList) {\r\n    for (const size of sizeList) {\r\n      console.groupCollapsed(`size=${size}, data=${JSON.stringify(data)}`)\r\n      await test.func(size, data)\r\n      console.groupEnd()\r\n    }\r\n  }\r\n  console.groupEnd()\r\n}\r\n\r\nconsole.groupCollapsed(\"Performance\")\r\nawait testPerformance(8, 100000)\r\nawait testPerformance(32, 100000)\r\nawait testPerformance(1000, 100000)\r\nconsole.groupEnd()\r\n\r\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": []
}
