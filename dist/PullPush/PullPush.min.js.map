{
  "version": 3,
  "sources": ["PullPush.ts"],
  "sourcesContent": ["/*!\r\nMIT No Attribution\r\n\r\nCopyright 2024 an(https://github.com/an-dist)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\r\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\r\nwithout restriction, including without limitation the rights to use, copy, modify,\r\nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nexport type PullPushTypes<T> = ArrayBufferLike | ArrayLike<T> | Iterable<T> | AsyncIterable<T> | T\r\n\r\nexport interface PullPushQueue<T, All> {\r\n  length(): number\r\n  more(): boolean\r\n  all(): All\r\n  push(data: T): void\r\n  pop(): T | undefined\r\n  empty(): void\r\n  splice(start: number, deleteCount?: number): All\r\n}\r\n\r\nexport class PullPushNonQueue<I, O> implements PullPushQueue<I, O> {\r\n  length() {\r\n    return 0\r\n  }\r\n\r\n  more() {\r\n    return true\r\n  }\r\n\r\n  all(): O {\r\n    throw new Error(\"Method not implemented.\")\r\n  }\r\n\r\n  push(_data: I) {\r\n  }\r\n\r\n  pop() {\r\n    return undefined\r\n  }\r\n\r\n  empty() {\r\n  }\r\n\r\n  splice(_start: number, _deleteCount?: number): O {\r\n    throw new Error(\"Method not implemented.\")\r\n  }\r\n}\r\n\r\nexport class PullPushArrayQueue<T = any> implements PullPushQueue<T, ArrayLike<T>> {\r\n  private queue: T[] = []\r\n\r\n  length() {\r\n    return this.queue.length\r\n  }\r\n\r\n  more() {\r\n    return this.queue.length > 0\r\n  }\r\n\r\n  all() {\r\n    return this.queue\r\n  }\r\n\r\n  push(data: T) {\r\n    this.queue.push(data)\r\n  }\r\n\r\n  pop() {\r\n    return this.queue.pop()\r\n  }\r\n\r\n  empty() {\r\n    this.queue.splice(0)\r\n  }\r\n\r\n  splice(start: number, deleteCount?: number) {\r\n    if (deleteCount) {\r\n      return this.queue.splice(start, deleteCount)\r\n    }\r\n    else {\r\n      return this.queue.splice(start)\r\n    }\r\n  }\r\n}\r\n\r\nexport class PullPushStringQueue implements PullPushQueue<string, string> {\r\n  private queue: string = \"\"\r\n\r\n  length() {\r\n    return this.queue.length\r\n  }\r\n\r\n  more() {\r\n    return this.queue.length > 0\r\n  }\r\n\r\n  all() {\r\n    return this.queue\r\n  }\r\n\r\n  push(data: string) {\r\n    this.queue += data\r\n  }\r\n\r\n  pop() {\r\n    return this.splice(-1)\r\n  }\r\n\r\n  empty() {\r\n    this.queue = \"\"\r\n  }\r\n\r\n  splice(start: number, deleteCount?: number) {\r\n    if (deleteCount) {\r\n      const value = this.queue.slice(start, start + deleteCount)\r\n      this.queue = this.queue.slice(0, start) + this.queue.slice(start + deleteCount)\r\n      return value\r\n    }\r\n    else {\r\n      const value = this.queue.slice(start)\r\n      this.queue = this.queue.slice(0, start)\r\n      return value\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class PullPush<I = any, O = any, Q extends PullPushQueue<I, any> = PullPushArrayQueue<I>> implements AsyncIterable<O> {\r\n  protected queue: Q\r\n\r\n  constructor(queue: Q) {\r\n    this.queue = queue\r\n  }\r\n\r\n  abstract pullpush(data?: PullPushTypes<I>, flush?: boolean): AsyncGenerator<O>\r\n\r\n  async push(data?: PullPushTypes<I>) {\r\n    if (data !== undefined) {\r\n      if (typeof data === \"function\") {\r\n        data = (await data())\r\n      }\r\n      if (data === null) {\r\n        this.queue.push(data)\r\n      }\r\n      else if (typeof data === \"string\") {\r\n        this.queue.push(data)\r\n      }\r\n      else if (Array.isArray(data)) {\r\n        for (const value of data) this.queue.push(value)\r\n      }\r\n      else if (typeof (data as Iterable<I>)[Symbol.iterator] === \"function\") {\r\n        for (const value of data as Iterable<I>) this.queue.push(value)\r\n      }\r\n      else if (typeof (data as AsyncIterable<I>)[Symbol.asyncIterator] === \"function\") {\r\n        for await (const value of data as AsyncIterable<I>) this.queue.push(value)\r\n      }\r\n      else {\r\n        this.queue.push(data as I)\r\n      }\r\n    }\r\n  }\r\n\r\n  pull(data?: PullPushTypes<I>) {\r\n    return this.pullpush(data)\r\n  }\r\n\r\n  flush(data?: PullPushTypes<I>) {\r\n    return this.pullpush(data, true)\r\n  }\r\n\r\n  [Symbol.asyncIterator]() {\r\n    return this.flush()\r\n  }\r\n\r\n  readable(data?: PullPushTypes<I>) {\r\n    const This = this\r\n    return new ReadableStream<O>({\r\n      async start(controller) {\r\n        for await (const chunk of This.flush(data)) {\r\n          controller.enqueue(chunk)\r\n        }\r\n        controller.close()\r\n      }\r\n    })\r\n  }\r\n\r\n  transform() {\r\n    const This = this\r\n    return new TransformStream<I, O>({\r\n      async transform(data, controller) {\r\n        for await (const chunk of This.pull(data)) {\r\n          controller.enqueue(chunk)\r\n        }\r\n      },\r\n      async flush(controller) {\r\n        for await (const chunk of This.flush()) {\r\n          controller.enqueue(chunk)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  writable() {\r\n    const This = this\r\n    return new WritableStream<I>({\r\n      async write(data) {\r\n        await This.push(data)\r\n      }\r\n    })\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["PullPushNonQueue", "_data", "_start", "_deleteCount", "PullPushArrayQueue", "data", "start", "deleteCount", "PullPushStringQueue", "value", "PullPush", "queue", "This", "controller", "chunk"]
}
