import*as s from"./PullPush.min.js";console.group("PullPushStringQueue"),console.log("Asserting...");{const t=new s.PullPushStringQueue;console.assert(t.length()===0,"q.length() === 0:",t.length()),console.assert(!t.more(),"!q.more():",t.more()),t.push("123"),console.assert(t.length()===3,"q.length() === 3:",t.length()),console.assert(t.more(),"q.more():",t.more());let o=t.pop();console.assert(t.length()===2,"q.length() === 2:",t.length()),console.assert(t.more(),"q.more():",t.more()),console.assert(t.all()==="12",'q.all() === "12":',t.all()),console.assert(o==="3",'s === "3":',o),t.empty(),console.assert(t.length()===0,"q.length() === 0:",t.length()),console.assert(!t.more(),"!q.more():",t.more()),t.push("123456"),console.assert(t.all()==="123456",'q.all() === "123456":',t.all()),o=t.splice(2,1),console.assert(t.all()==="12456",'q.all() === "12456":',t.all()),console.assert(o==="3",'s === "3":',o),o=t.splice(-1),console.assert(t.all()==="1245",'q.all() === "1245":',t.all()),console.assert(o==="6",'s === "6":',o),o=t.splice(1),console.assert(t.all()==="1",'q.all() === "1":',t.all()),console.assert(o==="245",'s === "245":',o),t.unshift("0"),console.assert(t.all()==="01",'q.all() === "01":',t.all()),o=t.shift(),console.assert(t.all()==="1",'q.all() === "1":',t.all()),console.assert(o==="0",'s === "0":',o),o=t.shift(),console.assert(t.all()==="",'q.all() === "":',t.all()),console.assert(o==="1",'s === "1":',o),o=t.shift(),console.assert(t.all()==="",'q.all() === "":',t.all()),console.assert(o==="",'s === "":',o)}console.groupEnd(),console.group("PullPushArrayQueue"),console.log("Asserting...");{const t=new s.PullPushArrayQueue;console.assert(t.length()===0,"q.length() === 0:",t.length()),console.assert(!t.more(),"!q.more():",t.more()),[1,2,3].forEach(l=>t.push(l)),console.assert(t.length()===3,"q.length() === 3:",t.length()),console.assert(t.more(),"q.more():",t.more());let o=[t.pop()];console.assert(t.length()===2,"q.length() === 2:",t.length()),console.assert(t.more(),"q.more():",t.more()),console.assert(t.all().toString()===[1,2].toString(),"q.all().toString() === [1, 2].toString():",t.all()),console.assert(o.toString()===[3].toString(),"s.toString() === [3].toString():",o),t.empty(),console.assert(t.length()===0,"q.length() === 0:",t.length()),console.assert(!t.more(),"!q.more():",t.more()),[1,2,3,4,5,6].forEach(l=>t.push(l)),console.assert(t.all().toString()===[1,2,3,4,5,6].toString(),"q.all().toString() === [1, 2, 3, 4, 5, 6].toString():",t.all()),o=t.splice(2,1),console.assert(t.all().toString()===[1,2,4,5,6].toString(),"q.all().toString() === [1, 2, 4, 5, 6].toString():",t.all()),console.assert(o.toString()===[3].toString(),"s.toString() === [3].toString():",o),o=t.splice(-1),console.assert(t.all().toString()===[1,2,4,5].toString(),"q.all().toString() === [1, 2, 4, 5].toString():",t.all()),console.assert(o.toString()===[6].toString(),"s.toString() === [6].toString():",o),o=t.splice(1),console.assert(t.all().toString()===[1].toString(),"q.all().toString() === [1].toString():",t.all()),console.assert(o.toString()===[2,4,5].toString(),"s.toString() === [2, 4, 5].toString():",o),t.unshift(0),console.assert(t.all().toString()===[0,1].toString(),"q.all().toString() === [0, 1].toString():",t.all()),o=[t.shift()],console.assert(t.all().toString()===[1].toString(),"q.all().toString() === [1].toString():",t.all()),console.assert(o.toString()===[0].toString(),"s.toString() === [0].toString():",o),o=[t.shift()],console.assert(t.all().toString()===[].toString(),"q.all().toString() === [].toString():",t.all()),console.assert(o.toString()===[1].toString(),"s.toString() === [1].toString():",o),o=[t.shift()],console.assert(t.all().toString()===[].toString(),"q.all().toString() === [].toString():",t.all()),console.assert(o.toString()===[].toString(),"s.toString() === [].toString():",o)}console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
