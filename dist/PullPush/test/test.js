"use strict";
import * as pp from "../PullPush.js";
{
  console.group("PullPushStringQueue");
  const q2 = new pp.PullPushStringQueue();
  console.assert(q2.length() === 0, "q.length() === 0:", q2.length());
  console.assert(!q2.more(), "!q.more():", q2.more());
  q2.push("123");
  console.assert(q2.length() === 3, "q.length() === 3:", q2.length());
  console.assert(q2.more(), "q.more():", q2.more());
  let s2 = q2.pop();
  console.assert(q2.length() === 2, "q.length() === 2:", q2.length());
  console.assert(q2.more(), "q.more():", q2.more());
  console.assert(q2.all() === "12", 'q.all() === "12":', q2.all());
  console.assert(s2 === "3", 's === "3":', s2);
  q2.empty();
  console.assert(q2.length() === 0, "q.length() === 0:", q2.length());
  console.assert(!q2.more(), "!q.more():", q2.more());
  q2.push("123456");
  console.assert(q2.all() === "123456", 'q.all() === "123456":', q2.all());
  s2 = q2.splice(2, 1);
  console.assert(q2.all() === "12456", 'q.all() === "12456":', q2.all());
  console.assert(s2 === "3", 's === "3":', s2);
  s2 = q2.splice(-1);
  console.assert(q2.all() === "1245", 'q.all() === "1245":', q2.all());
  console.assert(s2 === "6", 's === "6":', s2);
  s2 = q2.splice(1);
  console.assert(q2.all() === "1", 'q.all() === "1":', q2.all());
  console.assert(s2 === "245", 's === "245":', s2);
  console.groupEnd();
}
console.group("PullPushArrayQueue");
const q = new pp.PullPushArrayQueue();
console.assert(q.length() === 0, "q.length() === 0:", q.length());
console.assert(!q.more(), "!q.more():", q.more());
[1, 2, 3].forEach((n) => q.push(n));
console.assert(q.length() === 3, "q.length() === 3:", q.length());
console.assert(q.more(), "q.more():", q.more());
let s = [q.pop()];
console.assert(q.length() === 2, "q.length() === 2:", q.length());
console.assert(q.more(), "q.more():", q.more());
console.assert(q.all().toString() === [1, 2].toString(), "q.all().toString() === [1, 2].toString():", q.all());
console.assert(s.toString() === [3].toString(), "s.toString() === [3].toString():", s);
q.empty();
console.assert(q.length() === 0, "q.length() === 0:", q.length());
console.assert(!q.more(), "!q.more():", q.more());
[1, 2, 3, 4, 5, 6].forEach((n) => q.push(n));
console.assert(q.all().toString() === [1, 2, 3, 4, 5, 6].toString(), "q.all().toString() === [1, 2, 3, 4, 5, 6].toString():", q.all());
s = q.splice(2, 1);
console.assert(q.all().toString() === [1, 2, 4, 5, 6].toString(), "q.all().toString() === [1, 2, 4, 5, 6].toString():", q.all());
console.assert(s.toString() === [3].toString(), "s.toString() === [3].toString():", s);
s = q.splice(-1);
console.assert(q.all().toString() === [1, 2, 4, 5].toString(), "q.all().toString() === [1, 2, 4, 5].toString():", q.all());
console.assert(s.toString() === [6].toString(), "s.toString() === [6].toString():", s);
s = q.splice(1);
console.assert(q.all().toString() === [1].toString(), "q.all().toString() === [1].toString():", q.all());
console.assert(s.toString() === [2, 4, 5].toString(), "s.toString() === [2, 4, 5].toString():", s);
console.groupEnd();
//# sourceMappingURL=test.js.map
