"use strict";import*as s from"../PullPush.js";{console.group("PullPushStringQueue");const o=new s.PullPushStringQueue;console.assert(o.length()===0,"q.length() === 0:",o.length()),console.assert(!o.more(),"!q.more():",o.more()),o.push("123"),console.assert(o.length()===3,"q.length() === 3:",o.length()),console.assert(o.more(),"q.more():",o.more());let t=o.pop();console.assert(o.length()===2,"q.length() === 2:",o.length()),console.assert(o.more(),"q.more():",o.more()),console.assert(o.all()==="12",'q.all() === "12":',o.all()),console.assert(t==="3",'s === "3":',t),o.empty(),console.assert(o.length()===0,"q.length() === 0:",o.length()),console.assert(!o.more(),"!q.more():",o.more()),o.push("123456"),console.assert(o.all()==="123456",'q.all() === "123456":',o.all()),t=o.splice(2,1),console.assert(o.all()==="12456",'q.all() === "12456":',o.all()),console.assert(t==="3",'s === "3":',t),t=o.splice(-1),console.assert(o.all()==="1245",'q.all() === "1245":',o.all()),console.assert(t==="6",'s === "6":',t),t=o.splice(1),console.assert(o.all()==="1",'q.all() === "1":',o.all()),console.assert(t==="245",'s === "245":',t),console.groupEnd()}console.group("PullPushArrayQueue");const e=new s.PullPushArrayQueue;console.assert(e.length()===0,"q.length() === 0:",e.length()),console.assert(!e.more(),"!q.more():",e.more()),[1,2,3].forEach(o=>e.push(o)),console.assert(e.length()===3,"q.length() === 3:",e.length()),console.assert(e.more(),"q.more():",e.more());let l=[e.pop()];console.assert(e.length()===2,"q.length() === 2:",e.length()),console.assert(e.more(),"q.more():",e.more()),console.assert(e.all().toString()===[1,2].toString(),"q.all().toString() === [1, 2].toString():",e.all()),console.assert(l.toString()===[3].toString(),"s.toString() === [3].toString():",l),e.empty(),console.assert(e.length()===0,"q.length() === 0:",e.length()),console.assert(!e.more(),"!q.more():",e.more()),[1,2,3,4,5,6].forEach(o=>e.push(o)),console.assert(e.all().toString()===[1,2,3,4,5,6].toString(),"q.all().toString() === [1, 2, 3, 4, 5, 6].toString():",e.all()),l=e.splice(2,1),console.assert(e.all().toString()===[1,2,4,5,6].toString(),"q.all().toString() === [1, 2, 4, 5, 6].toString():",e.all()),console.assert(l.toString()===[3].toString(),"s.toString() === [3].toString():",l),l=e.splice(-1),console.assert(e.all().toString()===[1,2,4,5].toString(),"q.all().toString() === [1, 2, 4, 5].toString():",e.all()),console.assert(l.toString()===[6].toString(),"s.toString() === [6].toString():",l),l=e.splice(1),console.assert(e.all().toString()===[1].toString(),"q.all().toString() === [1].toString():",e.all()),console.assert(l.toString()===[2,4,5].toString(),"s.toString() === [2, 4, 5].toString():",l),console.groupEnd();
//# sourceMappingURL=test.js.map
