{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { JsonDeserializer } from \"./JsonDeserializer.ts\"\n\nconst source = (s: string) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(s)\n    controller.close()\n  }\n})\n\nconst logging = () => new WritableStream({\n  write(chunk) {\n    console.log(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst time = async (fn: () => Promise<void>) => {\n  performance.clearMarks(\"start\")\n  performance.clearMarks(\"end\")\n  performance.clearMeasures(\"perf\")\n\n  performance.mark(\"start\")\n  await fn()\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(perf.duration)\n}\n\nconsole.group(\"JSON\")\nlet json = '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4},{\"a\":5,\"b\":6}]'\nawait source(json)\n  .pipeThrough(new JsonDeserializer().transform())\n  .pipeTo(logging())\nconsole.groupEnd()\n\nconsole.group(\"JSON Lines\")\nlet jsonl = '{\"a\":1,\"b\":2}\\n{\"a\":3,\"b\":4}\\n{\"a\":5,\"b\":6}'\nawait source(jsonl)\n  .pipeThrough(new JsonDeserializer({ lineSeparated: true }).transform())\n  .pipeTo(logging())\nconsole.groupEnd()\n\nconsole.group(\"Performance tests\")\n{\n  const count = 100000\n  console.log(\"count\", count)\n\n  json = \"[\" + '{\"a\":1,\"b\":2},'.repeat(count)\n  json = json.slice(0, -1) + \"]\"\n\n  jsonl = '{\"a\":1,\"b\":2}\\n'.repeat(count)\n\n  console.group(\"JSON(js)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough(new JsonDeserializer().transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON Lines(js)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough(new JsonDeserializer({ lineSeparated: true }).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON(wasm)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough((await new JsonDeserializer().nativization()).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON Lines(wasm)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough((await new JsonDeserializer({ lineSeparated: true }).nativization()).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n}\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,wBAAwB;AAEjC,MAAM,SAAS,CAAC,MAAc,IAAI,eAAe;AAAA,EAC/C,MAAM,YAAY;AAChB,eAAW,QAAQ,CAAC;AACpB,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,MAAM,IAAI,eAAe;AAAA,EACvC,MAAM,OAAO;AACX,YAAQ,IAAI,KAAK;AAAA,EACnB;AACF,CAAC;AAED,MAAM,YAAY,MAAM,IAAI,eAAe;AAE3C,MAAM,OAAO,OAAO,OAA4B;AAC9C,cAAY,WAAW,OAAO;AAC9B,cAAY,WAAW,KAAK;AAC5B,cAAY,cAAc,MAAM;AAEhC,cAAY,KAAK,OAAO;AACxB,QAAM,GAAG;AACT,cAAY,KAAK,KAAK;AACtB,cAAY,QAAQ,QAAQ,SAAS,KAAK;AAC1C,QAAM,OAAO,YAAY,iBAAiB,MAAM,EAAE,CAAC;AACnD,UAAQ,IAAI,KAAK,QAAQ;AAC3B;AAEA,QAAQ,MAAM,MAAM;AACpB,IAAI,OAAO;AACX,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,iBAAiB,EAAE,UAAU,CAAC,EAC9C,OAAO,QAAQ,CAAC;AACnB,QAAQ,SAAS;AAEjB,QAAQ,MAAM,YAAY;AAC1B,IAAI,QAAQ;AACZ,MAAM,OAAO,KAAK,EACf,YAAY,IAAI,iBAAiB,EAAE,eAAe,KAAK,CAAC,EAAE,UAAU,CAAC,EACrE,OAAO,QAAQ,CAAC;AACnB,QAAQ,SAAS;AAEjB,QAAQ,MAAM,mBAAmB;AACjC;AACE,QAAM,QAAQ;AACd,UAAQ,IAAI,SAAS,KAAK;AAE1B,SAAO,MAAM,iBAAiB,OAAO,KAAK;AAC1C,SAAO,KAAK,MAAM,GAAG,EAAE,IAAI;AAE3B,UAAQ,kBAAkB,OAAO,KAAK;AAEtC,UAAQ,MAAM,UAAU;AACxB,QAAM,KAAK,YAAY;AACrB,UAAM,OAAO,IAAI,EACd,YAAY,IAAI,iBAAiB,EAAE,UAAU,CAAC,EAC9C,OAAO,UAAU,CAAC;AAAA,EACvB,CAAC;AACD,UAAQ,SAAS;AAEjB,UAAQ,MAAM,gBAAgB;AAC9B,QAAM,KAAK,YAAY;AACrB,UAAM,OAAO,IAAI,EACd,YAAY,IAAI,iBAAiB,EAAE,eAAe,KAAK,CAAC,EAAE,UAAU,CAAC,EACrE,OAAO,UAAU,CAAC;AAAA,EACvB,CAAC;AACD,UAAQ,SAAS;AAEjB,UAAQ,MAAM,YAAY;AAC1B,QAAM,KAAK,YAAY;AACrB,UAAM,OAAO,IAAI,EACd,aAAa,MAAM,IAAI,iBAAiB,EAAE,aAAa,GAAG,UAAU,CAAC,EACrE,OAAO,UAAU,CAAC;AAAA,EACvB,CAAC;AACD,UAAQ,SAAS;AAEjB,UAAQ,MAAM,kBAAkB;AAChC,QAAM,KAAK,YAAY;AACrB,UAAM,OAAO,IAAI,EACd,aAAa,MAAM,IAAI,iBAAiB,EAAE,eAAe,KAAK,CAAC,EAAE,aAAa,GAAG,UAAU,CAAC,EAC5F,OAAO,UAAU,CAAC;AAAA,EACvB,CAAC;AACD,UAAQ,SAAS;AACnB;AACA,QAAQ,SAAS;AAEjB,QAAQ,IAAI,iBAAiB;",
  "names": []
}
