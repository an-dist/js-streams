async function m(i,y={}){const w={env:Object.assign(Object.create(globalThis),y.env||{},{abort(t,r,e,n){t=c(t>>>0),r=c(r>>>0),e=e>>>0,n=n>>>0,(()=>{throw Error(`${t} in ${r}:${e}:${n}`)})()}})},{exports:a}=await WebAssembly.instantiate(i,w),s=a.memory||y.env.memory,l=Object.setPrototypeOf({sanitize(t,r){return t=f(t)||b(),r=r?1:0,c(a.sanitize(t,r)>>>0)},indexOfLastSeparator(t,r){return t=f(t)||b(),r=r?1:0,a.indexOfLastSeparator(t,r)}},a);function c(t){if(!t)return null;const r=t+new Uint32Array(s.buffer)[t-4>>>2]>>>1,e=new Uint16Array(s.buffer);let n=t>>>1,o="";for(;r-n>1024;)o+=String.fromCharCode(...e.subarray(n,n+=1024));return o+String.fromCharCode(...e.subarray(n,r))}function f(t){if(t==null)return 0;const r=t.length,e=a.__new(r<<1,2)>>>0,n=new Uint16Array(s.buffer);for(let o=0;o<r;++o)n[(e>>>1)+o]=t.charCodeAt(o);return e}function b(){throw TypeError("value must not be null")}return l}const{memory:h,sanitize:u,indexOfLastSeparator:g}=await(async i=>m(await(async()=>{try{return await globalThis.WebAssembly.compileStreaming(globalThis.fetch(i))}catch{return globalThis.WebAssembly.compile(await(await import("node:fs/promises")).readFile(i))}})(),{}))(new URL("JsonDeserializerNative.wasm",import.meta.url));export{g as indexOfLastSeparator,h as memory,u as sanitize};
//# sourceMappingURL=JsonDeserializerNative.min.js.map
