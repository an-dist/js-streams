import{JsonDeserializer as s}from"./JsonDeserializer.min.js";import{sleep as t}from"../funcs/sleep/sleep.min.js";const a=o=>new ReadableStream({start(e){e.enqueue(o),e.close()}}),c=()=>new WritableStream({write(o){console.log(o)}}),i=()=>new WritableStream,p=async o=>{performance.clearMarks("start"),performance.clearMarks("end"),performance.clearMeasures("perf"),performance.mark("start"),await o(),performance.mark("end"),performance.measure("perf","start","end");const e=performance.getEntriesByName("perf")[0];console.log(e.duration)},r=async(o,e)=>e?(await new s(o).nativization()).transform():new s(o).transform(),g=`[	\r
{"a":1,"b":2}	,\r
{"a":3,"b":4},{"a":5,"b":6}	,\r
]`,m=`{"a":1,"b":2}
{"a":3	,"b":4}\r
{"a":5,"b":6}`,w=o=>{const e=[];for(let n=0;n<o;++n)e.push('{"a":1,"b":2}');return"["+e.join(",")+"]"},f=o=>{const e=[];for(let n=0;n<o;++n)e.push('{"a":1,"b":2}');return e.join(`
`)},l=async o=>{console.group("JSON"),await a(g).pipeThrough(await r(void 0,o)).pipeTo(c()),console.groupEnd(),console.group("JSON Lines"),await a(m).pipeThrough(await r({lineSeparated:!0},o)).pipeTo(c()),console.groupEnd(),await t(0),console.group("Performance test");{console.log("count",1e5);const n=w(1e5),u=f(1e5);console.group("JSON"),await p(async()=>{await a(n).pipeThrough(await r(void 0,o)).pipeTo(i())}),console.groupEnd(),await t(0),console.group("JSON Lines"),await p(async()=>{await a(u).pipeThrough(await r({lineSeparated:!0},o)).pipeTo(i())}),console.groupEnd()}console.groupEnd(),await t(0)};console.group("Pure JavaScript"),await l(!1),console.groupEnd(),console.group("WebAssembly"),await l(!0),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
