import{JsonDeserializer as s}from"./JsonDeserializer.min.js";const a=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),t=()=>new WritableStream({write(e){console.log(e)}}),c=()=>new WritableStream,p=async e=>{performance.clearMarks("start"),performance.clearMarks("end"),performance.clearMeasures("perf"),performance.mark("start"),await e(),performance.mark("end"),performance.measure("perf","start","end");const o=performance.getEntriesByName("perf")[0];console.log(o.duration)},n=async(e,o)=>o?(await new s(e).nativization()).transform():new s(e).transform(),i=async e=>{console.group("JSON"),await a('[{"a":1,"b":2},{"a":3,"b":4},{"a":5,"b":6}]').pipeThrough(await n(void 0,e)).pipeTo(t()),console.groupEnd(),console.group("JSON Lines"),await a(`{"a":1,"b":2}
{"a":3,"b":4}
{"a":5,"b":6}`).pipeThrough(await n({lineSeparated:!0},e)).pipeTo(t()),console.groupEnd(),console.group("Performance test");{console.log("count",1e5);let r="["+'{"a":1,"b":2},'.repeat(1e5);r=r.slice(0,-1)+"]";const l=`{"a":1,"b":2}
`.repeat(1e5);console.group("JSON"),await p(async()=>{await a(r).pipeThrough(await n(void 0,e)).pipeTo(c())}),console.groupEnd(),console.group("JSON Lines"),await p(async()=>{await a(l).pipeThrough(await n({lineSeparated:!0},e)).pipeTo(c())}),console.groupEnd()}console.groupEnd()};console.group("Pure JavaScript"),await i(!1),console.groupEnd(),console.group("WebAssembly"),await i(!0),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
