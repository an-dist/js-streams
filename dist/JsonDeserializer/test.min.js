import{JsonDeserializer as p}from"./JsonDeserializer.min.js";import{PerformanceStreamBuilder as l}from"../PerformanceStream/PerformanceStream.min.js";import{sleep as t}from"../funcs/sleep/sleep.min.js";import{CompatiblePerformance as u}from"../misc/CompatiblePerformance/CompatiblePerformance.min.js";globalThis.performance=new u;const r=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),a=()=>new WritableStream({write(e){console.log(e)}}),m=()=>new WritableStream,c=async(e,o)=>{const n=new l("perf","start","end");await r(e).pipeThrough(n.pipe(s(o)).build()).pipeTo(m()),console.table(n.result())},s=e=>new p(e).transformable(),g=`[	\r
{"a":1,"b":2}	,\r
{"a":3,"b":4\r},{"a":5,"b":6}	,\r
]`,b=`{"a":1,"b"  :2 }
{"a":3	,"b"	:4}\r
{"a":5,"b":6}\r`,w=`[	\r
{"a":1,"b":2/* test
abc*/\r}	,\r
{"a":3,"b":4}, // test
{"a":5,"b":6}	,\r
]`,d=e=>{const o=[];for(let n=0;n<e;++n)o.push('{"a":1,"b":2}');return"["+o.join(",")+"]"},h=e=>{const o=[];for(let n=0;n<e;++n)o.push('{"a":1,"b":2}');return o.join(`
`)},f=e=>{const o=[];for(let n=0;n<e;++n)o.push(`{"a":1/* test
    abc */,"b":2} // test
    `);return"["+o.join(",")+"]"},S=async()=>{console.group("JSON"),await r(g).pipeThrough(s(void 0)).pipeTo(a()),console.groupEnd(),console.group("JSON Lines"),await r(b).pipeThrough(s({lineSeparated:!0})).pipeTo(a()),console.groupEnd(),console.group("JSON with comments"),await r(w).pipeThrough(s({withComments:!0})).pipeTo(a()),console.groupEnd(),await t(),console.group("Performance test");{console.log("count",1e5);const o=d(1e5),n=h(1e5),i=f(1e5);console.group("JSON"),await c(o),console.groupEnd(),await t(),console.group("JSON Lines"),await c(n,{lineSeparated:!0}),console.groupEnd(),await t(),console.group("JSON with comments"),await c(i,{withComments:!0}),console.groupEnd()}console.groupEnd(),await t()};console.group("JsonDeserializer"),await S(),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
