import{JsonDeserializer as a}from"./JsonDeserializer.min.js";const n=o=>new ReadableStream({start(r){r.enqueue(o),r.close()}}),p=()=>new WritableStream({write(o){console.log(o)}}),t=()=>new WritableStream,s=async o=>{performance.clearMarks("start"),performance.clearMarks("end"),performance.clearMeasures("perf"),performance.mark("start"),await o(),performance.mark("end"),performance.measure("perf","start","end");const r=performance.getEntriesByName("perf")[0];console.log(r.duration)};console.group("JSON");let e='[{"a":1,"b":2},{"a":3,"b":4},{"a":5,"b":6}]';await n(e).pipeThrough(new a().transform()).pipeTo(p()),console.groupEnd(),console.group("JSON Lines");let i=`{"a":1,"b":2}
{"a":3,"b":4}
{"a":5,"b":6}`;await n(i).pipeThrough(new a({lineSeparated:!0}).transform()).pipeTo(p()),console.groupEnd(),console.group("Performance tests"),console.log("count",1e5),e="["+'{"a":1,"b":2},'.repeat(1e5),e=e.slice(0,-1)+"]",i=`{"a":1,"b":2}
`.repeat(1e5),console.group("JSON(js)"),await s(async()=>{await n(e).pipeThrough(new a().transform()).pipeTo(t())}),console.groupEnd(),console.group("JSON Lines(js)"),await s(async()=>{await n(e).pipeThrough(new a({lineSeparated:!0}).transform()).pipeTo(t())}),console.groupEnd(),console.group("JSON(wasm)"),await s(async()=>{await n(e).pipeThrough((await new a().nativization()).transform()).pipeTo(t())}),console.groupEnd(),console.group("JSON Lines(wasm)"),await s(async()=>{await n(e).pipeThrough((await new a({lineSeparated:!0}).nativization()).transform()).pipeTo(t())}),console.groupEnd(),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
