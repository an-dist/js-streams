import{JsonDeserializer as a}from"./JsonDeserializer.min.js";const n=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),t=()=>new WritableStream({write(e){console.log(e)}}),s=()=>new WritableStream,p=async e=>{performance.clearMarks("start"),performance.clearMarks("end"),performance.clearMeasures("perf"),performance.mark("start"),await e(),performance.mark("end"),performance.measure("perf","start","end");const o=performance.getEntriesByName("perf")[0];console.table(o)};console.group("JSON");let r='[{"a":1,"b":2},{"a":3,"b":4},{"a":5,"b":6}]';await n(r).pipeThrough(new a().transform()).pipeTo(t()),console.groupEnd(),console.group("JSON Lines");let c=`{"a":1,"b":2}
{"a":3,"b":4}
{"a":5,"b":6}`;await n(c).pipeThrough(new a({lineSeparated:!0}).transform()).pipeTo(t()),console.groupEnd(),console.group("Performance tests"),console.group("JSON"),r=`[${'{"a":1,"b":2}'.repeat(100)}]`,await p(async()=>{await n(r).pipeThrough(new a({native:!0}).transform()).pipeTo(s())}),console.groupEnd(),console.group("JSON Lines"),r=`{"a":1,"b":2}
`.repeat(100),await p(async()=>{await n(r).pipeThrough(new a({native:!0,lineSeparated:!0}).transform()).pipeTo(s())}),console.groupEnd(),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
