{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { JsonDeserializer } from \"./JsonDeserializer.ts\"\n\nconst source = (s: string) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(s)\n    controller.close()\n  }\n})\n\nconst logging = () => new WritableStream({\n  write(chunk) {\n    console.log(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst time = async (fn: () => Promise<void>) => {\n  performance.clearMarks(\"start\")\n  performance.clearMarks(\"end\")\n  performance.clearMeasures(\"perf\")\n\n  performance.mark(\"start\")\n  await fn()\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(perf.duration)\n}\n\nconsole.group(\"JSON\")\nlet json = '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4},{\"a\":5,\"b\":6}]'\nawait source(json)\n  .pipeThrough(new JsonDeserializer().transform())\n  .pipeTo(logging())\nconsole.groupEnd()\n\nconsole.group(\"JSON Lines\")\nlet jsonl = '{\"a\":1,\"b\":2}\\n{\"a\":3,\"b\":4}\\n{\"a\":5,\"b\":6}'\nawait source(jsonl)\n  .pipeThrough(new JsonDeserializer({ lineSeparated: true }).transform())\n  .pipeTo(logging())\nconsole.groupEnd()\n\nconsole.group(\"Performance tests\")\n{\n  const count = 100000\n  console.log(\"count\", count)\n\n  json = \"[\" + '{\"a\":1,\"b\":2},'.repeat(count)\n  json = json.slice(0, -1) + \"]\"\n\n  jsonl = '{\"a\":1,\"b\":2}\\n'.repeat(count)\n\n  console.group(\"JSON(js)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough(new JsonDeserializer().transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON Lines(js)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough(new JsonDeserializer({ lineSeparated: true }).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON(wasm)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough((await new JsonDeserializer().nativization()).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n\n  console.group(\"JSON Lines(wasm)\")\n  await time(async () => {\n    await source(json)\n      .pipeThrough((await new JsonDeserializer({ lineSeparated: true }).nativization()).transform())\n      .pipeTo(terminate())\n  })\n  console.groupEnd()\n}\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,oBAAAA,MAAwB,wBAEjC,MAAMC,EAAUC,GAAc,IAAI,eAAe,CAC/C,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAC,EACpBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAU,IAAM,IAAI,eAAe,CACvC,MAAMC,EAAO,CACX,QAAQ,IAAIA,CAAK,CACnB,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBC,EAAO,MAAOC,GAA4B,CAC9C,YAAY,WAAW,OAAO,EAC9B,YAAY,WAAW,KAAK,EAC5B,YAAY,cAAc,MAAM,EAEhC,YAAY,KAAK,OAAO,EACxB,MAAMA,EAAG,EACT,YAAY,KAAK,KAAK,EACtB,YAAY,QAAQ,OAAQ,QAAS,KAAK,EAC1C,MAAMC,EAAO,YAAY,iBAAiB,MAAM,EAAE,CAAC,EACnD,QAAQ,IAAIA,EAAK,QAAQ,CAC3B,EAEA,QAAQ,MAAM,MAAM,EACpB,IAAIC,EAAO,8CACX,MAAMT,EAAOS,CAAI,EACd,YAAY,IAAIV,EAAiB,EAAE,UAAU,CAAC,EAC9C,OAAOI,EAAQ,CAAC,EACnB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,YAAY,EAC1B,IAAIO,EAAQ;;eACZ,MAAMV,EAAOU,CAAK,EACf,YAAY,IAAIX,EAAiB,CAAE,cAAe,EAAK,CAAC,EAAE,UAAU,CAAC,EACrE,OAAOI,EAAQ,CAAC,EACnB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,mBAAmB,EAG/B,QAAQ,IAAI,QAAS,GAAK,EAE1BM,EAAO,IAAM,iBAAiB,OAAO,GAAK,EAC1CA,EAAOA,EAAK,MAAM,EAAG,EAAE,EAAI,IAE3BC,EAAQ;EAAkB,OAAO,GAAK,EAEtC,QAAQ,MAAM,UAAU,EACxB,MAAMJ,EAAK,SAAY,CACrB,MAAMN,EAAOS,CAAI,EACd,YAAY,IAAIV,EAAiB,EAAE,UAAU,CAAC,EAC9C,OAAOM,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,EAEjB,QAAQ,MAAM,gBAAgB,EAC9B,MAAMC,EAAK,SAAY,CACrB,MAAMN,EAAOS,CAAI,EACd,YAAY,IAAIV,EAAiB,CAAE,cAAe,EAAK,CAAC,EAAE,UAAU,CAAC,EACrE,OAAOM,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,EAEjB,QAAQ,MAAM,YAAY,EAC1B,MAAMC,EAAK,SAAY,CACrB,MAAMN,EAAOS,CAAI,EACd,aAAa,MAAM,IAAIV,EAAiB,EAAE,aAAa,GAAG,UAAU,CAAC,EACrE,OAAOM,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,EAEjB,QAAQ,MAAM,kBAAkB,EAChC,MAAMC,EAAK,SAAY,CACrB,MAAMN,EAAOS,CAAI,EACd,aAAa,MAAM,IAAIV,EAAiB,CAAE,cAAe,EAAK,CAAC,EAAE,aAAa,GAAG,UAAU,CAAC,EAC5F,OAAOM,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,EAEnB,QAAQ,SAAS,EAEjB,QAAQ,IAAI,iBAAiB",
  "names": ["JsonDeserializer", "source", "s", "controller", "logging", "chunk", "terminate", "time", "fn", "perf", "json", "jsonl"]
}
