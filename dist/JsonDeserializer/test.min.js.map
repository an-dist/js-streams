{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { JsonDeserializer, JsonDeserializerOptions } from \"./JsonDeserializer.ts\"\nimport { PerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst source = (s: string) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(s)\n    controller.close()\n  }\n})\n\nconst logging = () => new WritableStream({\n  write(chunk) {\n    console.log(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst testPerformance = async (data: string, options?: JsonDeserializerOptions) => {\n  const builder = new PerformanceStreamBuilder(\"perf\", \"start\", \"end\")\n\n  await source(data)\n    .pipeThrough(builder\n      .pipe(deserializer(options))\n      .build())\n    .pipeTo(terminate())\n\n  console.table(builder.result())\n}\n\nconst deserializer = (options?: JsonDeserializerOptions) => new JsonDeserializer(options).transformable()\n\nconst json = '[\\t\\r\\n{\"a\":1,\"b\":2}\\t,\\r\\n{\"a\":3,\"b\":4\\r},{\"a\":5,\"b\":6}\\t,\\r\\n]'\nconst jsonl = '{\"a\":1,\"b\"  :2 }\\n{\"a\":3\\t,\"b\"\\t:4}\\r\\n{\"a\":5,\"b\":6}\\r'\nconst jsonc = `[\\t\\r\\n{\"a\":1,\"b\":2/* test\nabc*/\\r}\\t,\\r\\n{\"a\":3,\"b\":4}, // test\n{\"a\":5,\"b\":6}\\t,\\r\\n]`\n\nconst bigJson = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push('{\"a\":1,\"b\":2}')\n  }\n  return \"[\" + a.join(\",\") + \"]\"\n}\n\nconst bigJsonLines = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push('{\"a\":1,\"b\":2}')\n  }\n  return a.join(\"\\n\")\n}\n\nconst bigJsonWithComments = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push(`{\"a\":1/* test\n    abc */,\"b\":2} // test\n    `)\n  }\n  return \"[\" + a.join(\",\") + \"]\"\n}\n\nconst test = async () => {\n  console.group(\"JSON\")\n  {\n    await source(json)\n      .pipeThrough(deserializer(undefined))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  console.group(\"JSON Lines\")\n  {\n    await source(jsonl)\n      .pipeThrough(deserializer({ lineSeparated: true }))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  console.group(\"JSON with comments\")\n  {\n    await source(jsonc)\n      .pipeThrough(deserializer({ withComments: true }))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  await sleep()\n\n  console.group(\"Performance test\")\n  {\n    const count = 100000\n    console.log(\"count\", count)\n\n    const json = bigJson(count)\n    const jsonl = bigJsonLines(count)\n    const jsonc = bigJsonWithComments(count)\n\n    console.group(\"JSON\")\n    await testPerformance(json)\n    console.groupEnd()\n\n    await sleep()\n\n    console.group(\"JSON Lines\")\n    await testPerformance(jsonl, { lineSeparated: true })\n    console.groupEnd()\n\n    await sleep()\n\n    console.group(\"JSON with comments\")\n    await testPerformance(jsonc, { withComments: true })\n    console.groupEnd()\n  }\n  console.groupEnd()\n\n  await sleep()\n}\n\nconsole.group(\"JsonDeserializer\")\nawait test()\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,oBAAAA,MAAiD,wBAC1D,OAAS,4BAAAC,MAAgC,4CACzC,OAAS,SAAAC,MAAa,0BAEtB,MAAMC,EAAUC,GAAc,IAAI,eAAe,CAC/C,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAC,EACpBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAU,IAAM,IAAI,eAAe,CACvC,MAAMC,EAAO,CACX,QAAQ,IAAIA,CAAK,CACnB,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBC,EAAkB,MAAOC,EAAcC,IAAsC,CACjF,MAAMC,EAAU,IAAIX,EAAyB,OAAQ,QAAS,KAAK,EAEnE,MAAME,EAAOO,CAAI,EACd,YAAYE,EACV,KAAKC,EAAaF,CAAO,CAAC,EAC1B,MAAM,CAAC,EACT,OAAOH,EAAU,CAAC,EAErB,QAAQ,MAAMI,EAAQ,OAAO,CAAC,CAChC,EAEMC,EAAgBF,GAAsC,IAAIX,EAAiBW,CAAO,EAAE,cAAc,EAElGG,EAAO;;;GACPC,EAAQ;;iBACRC,EAAQ;;;;;GAIRC,EAAWC,GAAkB,CACjC,MAAMC,EAAc,CAAC,EACrB,QAASC,EAAI,EAAGA,EAAIF,EAAO,EAAEE,EAC3BD,EAAE,KAAK,eAAe,EAExB,MAAO,IAAMA,EAAE,KAAK,GAAG,EAAI,GAC7B,EAEME,EAAgBH,GAAkB,CACtC,MAAMC,EAAc,CAAC,EACrB,QAASC,EAAI,EAAGA,EAAIF,EAAO,EAAEE,EAC3BD,EAAE,KAAK,eAAe,EAExB,OAAOA,EAAE,KAAK;CAAI,CACpB,EAEMG,EAAuBJ,GAAkB,CAC7C,MAAMC,EAAc,CAAC,EACrB,QAASC,EAAI,EAAGA,EAAIF,EAAO,EAAEE,EAC3BD,EAAE,KAAK;;KAEN,EAEH,MAAO,IAAMA,EAAE,KAAK,GAAG,EAAI,GAC7B,EAEMI,EAAO,SAAY,CACvB,QAAQ,MAAM,MAAM,EAElB,MAAMpB,EAAOW,CAAI,EACd,YAAYD,EAAa,MAAS,CAAC,EACnC,OAAOP,EAAQ,CAAC,EAErB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,YAAY,EAExB,MAAMH,EAAOY,CAAK,EACf,YAAYF,EAAa,CAAE,cAAe,EAAK,CAAC,CAAC,EACjD,OAAOP,EAAQ,CAAC,EAErB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,oBAAoB,EAEhC,MAAMH,EAAOa,CAAK,EACf,YAAYH,EAAa,CAAE,aAAc,EAAK,CAAC,CAAC,EAChD,OAAOP,EAAQ,CAAC,EAErB,QAAQ,SAAS,EAEjB,MAAMJ,EAAM,EAEZ,QAAQ,MAAM,kBAAkB,EAChC,CAEE,QAAQ,IAAI,QAAS,GAAK,EAE1B,MAAMY,EAAOG,EAAQ,GAAK,EACpBF,EAAQM,EAAa,GAAK,EAC1BL,EAAQM,EAAoB,GAAK,EAEvC,QAAQ,MAAM,MAAM,EACpB,MAAMb,EAAgBK,CAAI,EAC1B,QAAQ,SAAS,EAEjB,MAAMZ,EAAM,EAEZ,QAAQ,MAAM,YAAY,EAC1B,MAAMO,EAAgBM,EAAO,CAAE,cAAe,EAAK,CAAC,EACpD,QAAQ,SAAS,EAEjB,MAAMb,EAAM,EAEZ,QAAQ,MAAM,oBAAoB,EAClC,MAAMO,EAAgBO,EAAO,CAAE,aAAc,EAAK,CAAC,EACnD,QAAQ,SAAS,CACnB,CACA,QAAQ,SAAS,EAEjB,MAAMd,EAAM,CACd,EAEA,QAAQ,MAAM,kBAAkB,EAChC,MAAMqB,EAAK,EACX,QAAQ,SAAS,EAEjB,QAAQ,IAAI,iBAAiB",
  "names": ["JsonDeserializer", "PerformanceStreamBuilder", "sleep", "source", "s", "controller", "logging", "chunk", "terminate", "testPerformance", "data", "options", "builder", "deserializer", "json", "jsonl", "jsonc", "bigJson", "count", "a", "i", "bigJsonLines", "bigJsonWithComments", "test"]
}
