{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { JsonDeserializer, JsonDeserializerOptions } from \"./JsonDeserializer.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst source = (s: string) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(s)\n    controller.close()\n  }\n})\n\nconst logging = () => new WritableStream({\n  write(chunk) {\n    console.log(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst time = async (fn: () => Promise<void>) => {\n  performance.clearMarks(\"start\")\n  performance.clearMarks(\"end\")\n  performance.clearMeasures(\"perf\")\n\n  performance.mark(\"start\")\n  await fn()\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(perf.duration)\n}\n\nconst deserializer = async (options?: JsonDeserializerOptions, native?: boolean) => native\n  ? (await new JsonDeserializer(options).nativization()).transform()\n  : new JsonDeserializer(options).transform()\n\nconst test = async (native: boolean) => {\n  console.group(\"JSON\")\n  {\n    const json = '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4},{\"a\":5,\"b\":6}]'\n    await source(json)\n      .pipeThrough(await deserializer(undefined, native))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  console.group(\"JSON Lines\")\n  {\n    const jsonl = '{\"a\":1,\"b\":2}\\n{\"a\":3,\"b\":4}\\n{\"a\":5,\"b\":6}'\n    await source(jsonl)\n      .pipeThrough(await deserializer({ lineSeparated: true }, native))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  await sleep(0)\n\n  console.group(\"Performance test\")\n  {\n    const count = 100000\n    console.log(\"count\", count)\n\n    let json = \"[\" + '{\"a\":1,\"b\":2},'.repeat(count)\n    json = json.slice(0, -1) + \"]\"\n\n    const jsonl = '{\"a\":1,\"b\":2}\\n'.repeat(count)\n\n    console.group(\"JSON\")\n    await time(async () => {\n      await source(json)\n        .pipeThrough(await deserializer(undefined, native))\n        .pipeTo(terminate())\n    })\n    console.groupEnd()\n\n    await sleep(0)\n\n    console.group(\"JSON Lines\")\n    await time(async () => {\n      await source(jsonl)\n        .pipeThrough(await deserializer({ lineSeparated: true }, native))\n        .pipeTo(terminate())\n    })\n    console.groupEnd()\n  }\n  console.groupEnd()\n\n  await sleep(0)\n}\n\nconsole.group(\"Pure JavaScript\")\nawait test(false)\nconsole.groupEnd()\n\nconsole.group(\"WebAssembly\")\nawait test(true)\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,oBAAAA,MAAiD,wBAC1D,OAAS,SAAAC,MAAa,0BAEtB,MAAMC,EAAUC,GAAc,IAAI,eAAe,CAC/C,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAC,EACpBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAU,IAAM,IAAI,eAAe,CACvC,MAAMC,EAAO,CACX,QAAQ,IAAIA,CAAK,CACnB,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBC,EAAO,MAAOC,GAA4B,CAC9C,YAAY,WAAW,OAAO,EAC9B,YAAY,WAAW,KAAK,EAC5B,YAAY,cAAc,MAAM,EAEhC,YAAY,KAAK,OAAO,EACxB,MAAMA,EAAG,EACT,YAAY,KAAK,KAAK,EACtB,YAAY,QAAQ,OAAQ,QAAS,KAAK,EAC1C,MAAMC,EAAO,YAAY,iBAAiB,MAAM,EAAE,CAAC,EACnD,QAAQ,IAAIA,EAAK,QAAQ,CAC3B,EAEMC,EAAe,MAAOC,EAAmCC,IAAqBA,GAC/E,MAAM,IAAIb,EAAiBY,CAAO,EAAE,aAAa,GAAG,UAAU,EAC/D,IAAIZ,EAAiBY,CAAO,EAAE,UAAU,EAEtCE,EAAO,MAAOD,GAAoB,CACtC,QAAQ,MAAM,MAAM,EAGlB,MAAMX,EADO,6CACI,EACd,YAAY,MAAMS,EAAa,OAAWE,CAAM,CAAC,EACjD,OAAOR,EAAQ,CAAC,EAErB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,YAAY,EAGxB,MAAMH,EADQ;;cACI,EACf,YAAY,MAAMS,EAAa,CAAE,cAAe,EAAK,EAAGE,CAAM,CAAC,EAC/D,OAAOR,EAAQ,CAAC,EAErB,QAAQ,SAAS,EAEjB,MAAMJ,EAAM,CAAC,EAEb,QAAQ,MAAM,kBAAkB,EAChC,CAEE,QAAQ,IAAI,QAAS,GAAK,EAE1B,IAAIc,EAAO,IAAM,iBAAiB,OAAO,GAAK,EAC9CA,EAAOA,EAAK,MAAM,EAAG,EAAE,EAAI,IAE3B,MAAMC,EAAQ;EAAkB,OAAO,GAAK,EAE5C,QAAQ,MAAM,MAAM,EACpB,MAAMR,EAAK,SAAY,CACrB,MAAMN,EAAOa,CAAI,EACd,YAAY,MAAMJ,EAAa,OAAWE,CAAM,CAAC,EACjD,OAAON,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,EAEjB,MAAMN,EAAM,CAAC,EAEb,QAAQ,MAAM,YAAY,EAC1B,MAAMO,EAAK,SAAY,CACrB,MAAMN,EAAOc,CAAK,EACf,YAAY,MAAML,EAAa,CAAE,cAAe,EAAK,EAAGE,CAAM,CAAC,EAC/D,OAAON,EAAU,CAAC,CACvB,CAAC,EACD,QAAQ,SAAS,CACnB,CACA,QAAQ,SAAS,EAEjB,MAAMN,EAAM,CAAC,CACf,EAEA,QAAQ,MAAM,iBAAiB,EAC/B,MAAMa,EAAK,EAAK,EAChB,QAAQ,SAAS,EAEjB,QAAQ,MAAM,aAAa,EAC3B,MAAMA,EAAK,EAAI,EACf,QAAQ,SAAS,EAEjB,QAAQ,IAAI,iBAAiB",
  "names": ["JsonDeserializer", "sleep", "source", "s", "controller", "logging", "chunk", "terminate", "time", "fn", "perf", "deserializer", "options", "native", "test", "json", "jsonl"]
}
