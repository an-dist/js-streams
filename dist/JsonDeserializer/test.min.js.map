{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { JsonDeserializer, JsonDeserializerOptions } from \"./JsonDeserializer.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst source = (s: string) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(s)\n    controller.close()\n  }\n})\n\nconst logging = () => new WritableStream({\n  write(chunk) {\n    console.log(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst time = async (fn: () => Promise<void>) => {\n  performance.clearMarks(\"start\")\n  performance.clearMarks(\"end\")\n  performance.clearMeasures(\"perf\")\n\n  performance.mark(\"start\")\n  await fn()\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(perf.duration)\n}\n\nconst deserializer = async (options?: JsonDeserializerOptions) => new JsonDeserializer(options).transform()\n\nconst json = '[\\t\\r\\n{\"a\":1,\"b\":2}\\t,\\r\\n{\"a\":3,\"b\":4},{\"a\":5,\"b\":6}\\t,\\r\\n]'\nconst jsonl = '{\"a\":1,\"b\":2}\\n{\"a\":3\\t,\"b\":4}\\r\\n{\"a\":5,\"b\":6}'\nconst jsonc = `[\\t\\r\\n{\"a\":1,\"b\":2/* test */}\\t,\\r\\n{\"a\":3,\"b\":4}, // test\n{\"a\":5,\"b\":6}\\t,\\r\\n]`\n\nconst bigJson = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push('{\"a\":1,\"b\":2}')\n  }\n  return \"[\" + a.join(\",\") + \"]\"\n}\n\nconst bigJsonLines = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push('{\"a\":1,\"b\":2}')\n  }\n  return a.join(\"\\n\")\n}\n\nconst bigJsonWithComments = (count: number) => {\n  const a: string[] = []\n  for (let i = 0; i < count; ++i) {\n    a.push(`{\"a\":1/* test */,\"b\":2} // test\n    `)\n  }\n  return \"[\" + a.join(\",\") + \"]\"\n}\n\nconst test = async () => {\n  console.group(\"JSON\")\n  {\n    await source(json)\n      .pipeThrough(await deserializer(undefined))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  console.group(\"JSON Lines\")\n  {\n    await source(jsonl)\n      .pipeThrough(await deserializer({ lineSeparated: true }))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  console.group(\"JSON with comments\")\n  {\n    await source(jsonc)\n      .pipeThrough(await deserializer({ withComments: true }))\n      .pipeTo(logging())\n  }\n  console.groupEnd()\n\n  await sleep(0)\n\n  console.group(\"Performance test\")\n  {\n    const count = 100000\n    console.log(\"count\", count)\n\n    const json = bigJson(count)\n    const jsonl = bigJsonLines(count)\n    const jsonc = bigJsonWithComments(count)\n\n    console.group(\"JSON\")\n    await time(async () => {\n      await source(json)\n        .pipeThrough(await deserializer(undefined))\n        .pipeTo(terminate())\n    })\n    console.groupEnd()\n\n    await sleep(0)\n\n    console.group(\"JSON Lines\")\n    await time(async () => {\n      await source(jsonl)\n        .pipeThrough(await deserializer({ lineSeparated: true }))\n        .pipeTo(terminate())\n    })\n    console.groupEnd()\n\n    await sleep(0)\n\n    console.group(\"JSON with comments\")\n    await time(async () => {\n      await source(jsonc)\n        .pipeThrough(await deserializer({ withComments: true }))\n        .pipeTo(terminate())\n    })\n    console.groupEnd()\n  }\n  console.groupEnd()\n\n  await sleep(0)\n}\n\nconsole.group(\"JsonDeserializer\")\nawait test()\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": ["JsonDeserializer", "sleep", "source", "s", "controller", "logging", "chunk", "terminate", "time", "fn", "perf", "deserializer", "options", "json", "jsonl", "jsonc", "bigJson", "count", "a", "i", "bigJsonLines", "bigJsonWithComments", "test"]
}
