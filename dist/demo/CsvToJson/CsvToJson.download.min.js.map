{
  "version": 3,
  "sources": ["CsvToJson.download.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst rdoOutputFormatJSON = document.getElementById(\"rdoOutputFormatJSON\") as HTMLInputElement\nconst rdoOutputFormatJSONL = document.getElementById(\"rdoOutputFormatJSONL\") as HTMLInputElement\nconst txtUrl = document.getElementById(\"txtUrl\") as HTMLInputElement\nconst btnConvertUrl = document.getElementById(\"btnConvertUrl\") as HTMLButtonElement\nconst linkHolder = btnConvertUrl.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtUrl.value = new URL(\"sample.csv\", location.href).href\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtUrl.value = new URL(\"sample.tsv\", location.href).href\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\nbtnConvertUrl.onclick = () => {\n  fetch(txtUrl.value, { credentials: \"include\" }).then(async response => {\n    if (!response.ok) {\n      console.warn(`${txtUrl.value} responded status code ${response.status}.`, await response.text())\n      return\n    }\n\n    let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n    if (!chkDirect.checked) {\n      downloadStreamOptions = {\n        linkHolder,\n      }\n    }\n\n    const csvDeserializerOptions = {\n    hasHeader: true,\n    delimiter: rdoInputFormatCSV.checked ? \",\" : \"\\t\",\n    }\n\n    const jsonSerializeOptions = {\n      lineSeparated: rdoOutputFormatJSONL.checked,\n    }\n\n    const downloadName = rdoOutputFormatJSON.checked\n      ? \"download.json\"\n      : \"download.jsonl\"\n\n    response.body!\n      .pipeThrough(new streams.Utf8DecoderStream())\n      .pipeThrough(new streams.CsvDeserializer(csvDeserializerOptions).transformable())\n      .pipeThrough(new streams.JsonSerializer(jsonSerializeOptions).transformable())\n      .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n  })\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,MAAMC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAuB,SAAS,eAAe,sBAAsB,EACrEC,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAgB,SAAS,eAAe,eAAe,EACvDC,EAAaD,EAAc,cAAe,iBAE1CE,EAAsB,IAAM,CAC5BP,EAAkB,QACpBI,EAAO,MAAQ,IAAI,IAAI,aAAc,SAAS,IAAI,EAAE,KAE7CH,EAAkB,UACzBG,EAAO,MAAQ,IAAI,IAAI,aAAc,SAAS,IAAI,EAAE,KAExD,EACAJ,EAAkB,iBAAiB,SAAUO,CAAmB,EAChEN,EAAkB,iBAAiB,SAAUM,CAAmB,EAEhEF,EAAc,QAAU,IAAM,CAC5B,MAAMD,EAAO,MAAO,CAAE,YAAa,SAAU,CAAC,EAAE,KAAK,MAAMI,GAAY,CACrE,GAAI,CAACA,EAAS,GAAI,CAChB,QAAQ,KAAK,GAAGJ,EAAO,KAAK,0BAA0BI,EAAS,MAAM,IAAK,MAAMA,EAAS,KAAK,CAAC,EAC/F,MACF,CAEA,IAAIC,EACCV,EAAU,UACbU,EAAwB,CACtB,WAAAH,CACF,GAGF,MAAMI,EAAyB,CAC/B,UAAW,GACX,UAAWV,EAAkB,QAAU,IAAM,GAC7C,EAEMW,EAAuB,CAC3B,cAAeR,EAAqB,OACtC,EAEMS,EAAeV,EAAoB,QACrC,gBACA,iBAEJM,EAAS,KACN,YAAY,IAAIV,EAAQ,iBAAmB,EAC3C,YAAY,IAAIA,EAAQ,gBAAgBY,CAAsB,EAAE,cAAc,CAAC,EAC/E,YAAY,IAAIZ,EAAQ,eAAea,CAAoB,EAAE,cAAc,CAAC,EAC5E,OAAO,IAAIb,EAAQ,eAAec,EAAcH,CAAqB,CAAC,CAC3E,CAAC,CACH",
  "names": ["streams", "chkDirect", "rdoInputFormatCSV", "rdoInputFormatTSV", "rdoOutputFormatJSON", "rdoOutputFormatJSONL", "txtUrl", "btnConvertUrl", "linkHolder", "onChangeInputFormat", "response", "downloadStreamOptions", "csvDeserializerOptions", "jsonSerializeOptions", "downloadName"]
}
