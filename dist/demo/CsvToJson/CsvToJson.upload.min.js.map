{
  "version": 3,
  "sources": ["CsvToJson.upload.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst rdoHeaderDetectionFromFile = document.getElementById(\"rdoHeaderDetectionFromFile\") as HTMLInputElement\nconst rdoOutputFormatJSON = document.getElementById(\"rdoOutputFormatJSON\") as HTMLInputElement\nconst rdoOutputFormatJSONL = document.getElementById(\"rdoOutputFormatJSONL\") as HTMLInputElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst linkHolder = txtFile.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtFile.accept = \".csv\"\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtFile.accept = \".tsv\"\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\ntxtFile.onchange = () => {\n  if (!txtFile.files) {\n    return\n  }\n\n  let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n  if (!chkDirect.checked) {\n    downloadStreamOptions = {\n      linkHolder,\n    }\n  }\n\n  const csvDeserializerOptions = {\n    hasHeader: rdoHeaderDetectionFromFile.checked,\n    delimiter: rdoInputFormatCSV.checked ? \",\" : \"\\t\",\n  }\n\n  const jsonSerializeOptions = {\n    lineSeparated: rdoOutputFormatJSONL.checked,\n  }\n\n  const downloadName = rdoOutputFormatJSON.checked\n    ? \"download.json\"\n    : \"download.jsonl\"\n\n  txtFile.files![0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream())\n    .pipeThrough(new streams.CsvDeserializer(csvDeserializerOptions).transformable())\n    .pipeThrough(new streams.JsonSerializer(jsonSerializeOptions).transformable())\n    .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,MAAMC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAA6B,SAAS,eAAe,4BAA4B,EACjFC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAuB,SAAS,eAAe,sBAAsB,EACrEC,EAAU,SAAS,eAAe,SAAS,EAC3CC,EAAaD,EAAQ,cAAe,iBAEpCE,EAAsB,IAAM,CAC5BP,EAAkB,QACpBK,EAAQ,OAAS,OAEVJ,EAAkB,UACzBI,EAAQ,OAAS,OAErB,EACAL,EAAkB,iBAAiB,SAAUO,CAAmB,EAChEN,EAAkB,iBAAiB,SAAUM,CAAmB,EAEhEF,EAAQ,SAAW,IAAM,CACvB,GAAI,CAACA,EAAQ,MACX,OAGF,IAAIG,EACCT,EAAU,UACbS,EAAwB,CACtB,WAAAF,CACF,GAGF,MAAMG,EAAyB,CAC7B,UAAWP,EAA2B,QACtC,UAAWF,EAAkB,QAAU,IAAM,GAC/C,EAEMU,EAAuB,CAC3B,cAAeN,EAAqB,OACtC,EAEMO,EAAeR,EAAoB,QACrC,gBACA,iBAEJE,EAAQ,MAAO,CAAC,EAAE,OAAO,EACtB,YAAY,IAAIP,EAAQ,iBAAmB,EAC3C,YAAY,IAAIA,EAAQ,gBAAgBW,CAAsB,EAAE,cAAc,CAAC,EAC/E,YAAY,IAAIX,EAAQ,eAAeY,CAAoB,EAAE,cAAc,CAAC,EAC5E,OAAO,IAAIZ,EAAQ,eAAea,EAAcH,CAAqB,CAAC,CAC3E",
  "names": ["streams", "chkDirect", "rdoInputFormatCSV", "rdoInputFormatTSV", "rdoHeaderDetectionFromFile", "rdoOutputFormatJSON", "rdoOutputFormatJSONL", "txtFile", "linkHolder", "onChangeInputFormat", "downloadStreamOptions", "csvDeserializerOptions", "jsonSerializeOptions", "downloadName"]
}
