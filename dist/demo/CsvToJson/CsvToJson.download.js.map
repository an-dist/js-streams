{
  "version": 3,
  "sources": ["CsvToJson.download.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst rdoOutputFormatJSON = document.getElementById(\"rdoOutputFormatJSON\") as HTMLInputElement\nconst rdoOutputFormatJSONL = document.getElementById(\"rdoOutputFormatJSONL\") as HTMLInputElement\nconst txtUrl = document.getElementById(\"txtUrl\") as HTMLInputElement\nconst btnConvertUrl = document.getElementById(\"btnConvertUrl\") as HTMLButtonElement\nconst linkHolder = btnConvertUrl.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtUrl.value = new URL(\"sample.csv\", location.href).href\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtUrl.value = new URL(\"sample.tsv\", location.href).href\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\nbtnConvertUrl.onclick = () => {\n  fetch(txtUrl.value, { credentials: \"include\" }).then(async response => {\n    if (!response.ok) {\n      console.warn(`${txtUrl.value} responded status code ${response.status}.`, await response.text())\n      return\n    }\n\n    let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n    if (!chkDirect.checked) {\n      downloadStreamOptions = {\n        linkHolder,\n      }\n    }\n\n    const csvDeserializerOptions = {\n    hasHeader: true,\n    delimiter: rdoInputFormatCSV.checked ? \",\" : \"\\t\",\n    }\n\n    const jsonSerializeOptions = {\n      lineSeparated: rdoOutputFormatJSONL.checked,\n    }\n\n    const downloadName = rdoOutputFormatJSON.checked\n      ? \"download.json\"\n      : \"download.jsonl\"\n\n    response.body!\n      .pipeThrough(new streams.Utf8DecoderStream())\n      .pipeThrough(new streams.CsvDeserializer(csvDeserializerOptions).transformable())\n      .pipeThrough(new streams.JsonSerializer(jsonSerializeOptions).transformable())\n      .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n  })\n}"],
  "mappings": "AACA,YAAY,aAAa;AAEzB,MAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,uBAAuB,SAAS,eAAe,sBAAsB;AAC3E,MAAM,SAAS,SAAS,eAAe,QAAQ;AAC/C,MAAM,gBAAgB,SAAS,eAAe,eAAe;AAC7D,MAAM,aAAa,cAAc,cAAe;AAEhD,MAAM,sBAAsB,MAAM;AAChC,MAAI,kBAAkB,SAAS;AAC7B,WAAO,QAAQ,IAAI,IAAI,cAAc,SAAS,IAAI,EAAE;AAAA,EACtD,WACS,kBAAkB,SAAS;AAClC,WAAO,QAAQ,IAAI,IAAI,cAAc,SAAS,IAAI,EAAE;AAAA,EACtD;AACF;AACA,kBAAkB,iBAAiB,UAAU,mBAAmB;AAChE,kBAAkB,iBAAiB,UAAU,mBAAmB;AAEhE,cAAc,UAAU,MAAM;AAC5B,QAAM,OAAO,OAAO,EAAE,aAAa,UAAU,CAAC,EAAE,KAAK,OAAM,aAAY;AACrE,QAAI,CAAC,SAAS,IAAI;AAChB,cAAQ,KAAK,GAAG,OAAO,KAAK,0BAA0B,SAAS,MAAM,KAAK,MAAM,SAAS,KAAK,CAAC;AAC/F;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,CAAC,UAAU,SAAS;AACtB,8BAAwB;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,yBAAyB;AAAA,MAC/B,WAAW;AAAA,MACX,WAAW,kBAAkB,UAAU,MAAM;AAAA,IAC7C;AAEA,UAAM,uBAAuB;AAAA,MAC3B,eAAe,qBAAqB;AAAA,IACtC;AAEA,UAAM,eAAe,oBAAoB,UACrC,kBACA;AAEJ,aAAS,KACN,YAAY,IAAI,QAAQ,kBAAkB,CAAC,EAC3C,YAAY,IAAI,QAAQ,gBAAgB,sBAAsB,EAAE,cAAc,CAAC,EAC/E,YAAY,IAAI,QAAQ,eAAe,oBAAoB,EAAE,cAAc,CAAC,EAC5E,OAAO,IAAI,QAAQ,eAAe,cAAc,qBAAqB,CAAC;AAAA,EAC3E,CAAC;AACH;",
  "names": []
}
