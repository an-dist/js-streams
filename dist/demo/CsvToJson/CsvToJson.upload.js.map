{
  "version": 3,
  "sources": ["CsvToJson.upload.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst rdoHeaderDetectionFromFile = document.getElementById(\"rdoHeaderDetectionFromFile\") as HTMLInputElement\nconst rdoOutputFormatJSON = document.getElementById(\"rdoOutputFormatJSON\") as HTMLInputElement\nconst rdoOutputFormatJSONL = document.getElementById(\"rdoOutputFormatJSONL\") as HTMLInputElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst linkHolder = txtFile.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtFile.accept = \".csv\"\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtFile.accept = \".tsv\"\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\ntxtFile.onchange = () => {\n  if (!txtFile.files) {\n    return\n  }\n\n  let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n  if (!chkDirect.checked) {\n    downloadStreamOptions = {\n      linkHolder,\n    }\n  }\n\n  const csvDeserializerOptions = {\n    hasHeader: rdoHeaderDetectionFromFile.checked,\n    delimiter: rdoInputFormatCSV.checked ? \",\" : \"\\t\",\n  }\n\n  const jsonSerializeOptions = {\n    lineSeparated: rdoOutputFormatJSONL.checked,\n  }\n\n  const downloadName = rdoOutputFormatJSON.checked\n    ? \"download.json\"\n    : \"download.jsonl\"\n\n  txtFile.files![0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream())\n    .pipeThrough(new streams.CsvDeserializer(csvDeserializerOptions).transformable())\n    .pipeThrough(new streams.JsonSerializer(jsonSerializeOptions).transformable())\n    .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n}"],
  "mappings": "AACA,YAAY,aAAa;AAEzB,MAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,6BAA6B,SAAS,eAAe,4BAA4B;AACvF,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,uBAAuB,SAAS,eAAe,sBAAsB;AAC3E,MAAM,UAAU,SAAS,eAAe,SAAS;AACjD,MAAM,aAAa,QAAQ,cAAe;AAE1C,MAAM,sBAAsB,MAAM;AAChC,MAAI,kBAAkB,SAAS;AAC7B,YAAQ,SAAS;AAAA,EACnB,WACS,kBAAkB,SAAS;AAClC,YAAQ,SAAS;AAAA,EACnB;AACF;AACA,kBAAkB,iBAAiB,UAAU,mBAAmB;AAChE,kBAAkB,iBAAiB,UAAU,mBAAmB;AAEhE,QAAQ,WAAW,MAAM;AACvB,MAAI,CAAC,QAAQ,OAAO;AAClB;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,CAAC,UAAU,SAAS;AACtB,4BAAwB;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,yBAAyB;AAAA,IAC7B,WAAW,2BAA2B;AAAA,IACtC,WAAW,kBAAkB,UAAU,MAAM;AAAA,EAC/C;AAEA,QAAM,uBAAuB;AAAA,IAC3B,eAAe,qBAAqB;AAAA,EACtC;AAEA,QAAM,eAAe,oBAAoB,UACrC,kBACA;AAEJ,UAAQ,MAAO,CAAC,EAAE,OAAO,EACtB,YAAY,IAAI,QAAQ,kBAAkB,CAAC,EAC3C,YAAY,IAAI,QAAQ,gBAAgB,sBAAsB,EAAE,cAAc,CAAC,EAC/E,YAAY,IAAI,QAAQ,eAAe,oBAAoB,EAAE,cAAc,CAAC,EAC5E,OAAO,IAAI,QAAQ,eAAe,cAAc,qBAAqB,CAAC;AAC3E;",
  "names": []
}
