import*as o from"/web.min.js";globalThis.console=new o.DomConsole("console",globalThis.console);const m=document.getElementById("rdoInputFormatCSV"),s=document.getElementById("rdoInputFormatTSV"),f=document.getElementById("lblRecords"),t=document.getElementById("txtFile"),r=document.getElementById("tblResult"),g=()=>{m.checked?t.accept=".csv":s.checked&&(t.accept=".tsv")};m.addEventListener("change",g),s.addEventListener("change",g);let e;t.onchange=async()=>{if((!e||!e.signal.aborted)&&(e?.abort(),e=new AbortController),r.innerHTML="",r.createTBody(),!t.files||t.files.length===0)return;const u=t.files[0].stream().pipeThrough(new o.Utf8DecoderStream,{signal:e.signal}).pipeThrough(new o.CsvDeserializer({hasHeader:!0,delimitor:s.checked?"	":","}).transformable(),{signal:e.signal});let l=1;for await(const a of o.toAsyncIterableIterator(u,{signal:e.signal})){if(!r.tHead){const d=r.createTHead().insertRow();let n=document.createElement("th");n.textContent="#",d.append(n);for(const h in a)n=document.createElement("th"),n.textContent=h,d.append(n)}const c=r.tBodies[0].insertRow();c.insertCell().textContent=(l++).toLocaleString();for(const i of Object.values(a))c.insertCell().textContent=i?.toString()??"";f.textContent=l.toLocaleString(),l%1e3===0&&await o.sleep(0)}};
//# sourceMappingURL=CsvViewer.min.js.map
