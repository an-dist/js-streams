{
  "version": 3,
  "sources": ["CsvViewer.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nglobalThis.console = new streams.DomConsole(\"console\", globalThis.console)\n\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst lblRecords = document.getElementById(\"lblRecords\") as HTMLSpanElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst tblResult = document.getElementById(\"tblResult\") as HTMLTableElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtFile.accept = \".csv\"\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtFile.accept = \".tsv\"\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\nlet controller: AbortController | undefined\n\ntxtFile.onchange = async () => {\n  if (!controller || !controller.signal.aborted) {\n    controller?.abort()\n    controller = new AbortController()\n  }\n\n  tblResult.innerHTML = \"\"\n  tblResult.createTBody()\n\n  if (!txtFile.files || txtFile.files.length === 0) {\n    return\n  }\n\n  const source = txtFile.files[0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream(), { signal: controller.signal })\n    .pipeThrough(new streams.CsvDeserializer({\n      hasHeader: true,\n      delimitor: rdoInputFormatTSV.checked ? \"\\t\" : \",\",\n    }).transformable(), { signal: controller.signal })\n\n  let no = 1\n  for await (const obj of streams.toAsyncIterableIterator(source, { signal: controller.signal })) {\n    if (!tblResult.tHead) {\n      const head = tblResult.createTHead()\n      const row = head.insertRow()\n      let th = document.createElement(\"th\")\n      th.textContent = \"#\"\n      row.append(th)\n      for (const key in obj) {\n        th = document.createElement(\"th\")\n        th.textContent = key\n        row.append(th)\n      }\n    }\n    const row = tblResult.tBodies[0].insertRow()\n    row.insertCell().textContent = (no++).toLocaleString()\n    for (const value of Object.values(obj)) {\n      row.insertCell().textContent = value?.toString() ?? \"\"\n    }\n    lblRecords.textContent = no.toLocaleString()\n    if (no % 1000 === 0) {\n      await streams.sleep(0)\n    }\n  }\n}"],
  "mappings": "AACA,YAAY,aAAa;AAEzB,WAAW,UAAU,IAAI,QAAQ,WAAW,WAAW,WAAW,OAAO;AAEzE,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,MAAM,aAAa,SAAS,eAAe,YAAY;AACvD,MAAM,UAAU,SAAS,eAAe,SAAS;AACjD,MAAM,YAAY,SAAS,eAAe,WAAW;AAErD,MAAM,sBAAsB,MAAM;AAChC,MAAI,kBAAkB,SAAS;AAC7B,YAAQ,SAAS;AAAA,EACnB,WACS,kBAAkB,SAAS;AAClC,YAAQ,SAAS;AAAA,EACnB;AACF;AACA,kBAAkB,iBAAiB,UAAU,mBAAmB;AAChE,kBAAkB,iBAAiB,UAAU,mBAAmB;AAEhE,IAAI;AAEJ,QAAQ,WAAW,YAAY;AAC7B,MAAI,CAAC,cAAc,CAAC,WAAW,OAAO,SAAS;AAC7C,gBAAY,MAAM;AAClB,iBAAa,IAAI,gBAAgB;AAAA,EACnC;AAEA,YAAU,YAAY;AACtB,YAAU,YAAY;AAEtB,MAAI,CAAC,QAAQ,SAAS,QAAQ,MAAM,WAAW,GAAG;AAChD;AAAA,EACF;AAEA,QAAM,SAAS,QAAQ,MAAM,CAAC,EAAE,OAAO,EACpC,YAAY,IAAI,QAAQ,kBAAkB,GAAG,EAAE,QAAQ,WAAW,OAAO,CAAC,EAC1E,YAAY,IAAI,QAAQ,gBAAgB;AAAA,IACvC,WAAW;AAAA,IACX,WAAW,kBAAkB,UAAU,MAAO;AAAA,EAChD,CAAC,EAAE,cAAc,GAAG,EAAE,QAAQ,WAAW,OAAO,CAAC;AAEnD,MAAI,KAAK;AACT,mBAAiB,OAAO,QAAQ,wBAAwB,QAAQ,EAAE,QAAQ,WAAW,OAAO,CAAC,GAAG;AAC9F,QAAI,CAAC,UAAU,OAAO;AACpB,YAAM,OAAO,UAAU,YAAY;AACnC,YAAMA,OAAM,KAAK,UAAU;AAC3B,UAAI,KAAK,SAAS,cAAc,IAAI;AACpC,SAAG,cAAc;AACjB,MAAAA,KAAI,OAAO,EAAE;AACb,iBAAW,OAAO,KAAK;AACrB,aAAK,SAAS,cAAc,IAAI;AAChC,WAAG,cAAc;AACjB,QAAAA,KAAI,OAAO,EAAE;AAAA,MACf;AAAA,IACF;AACA,UAAM,MAAM,UAAU,QAAQ,CAAC,EAAE,UAAU;AAC3C,QAAI,WAAW,EAAE,eAAe,MAAM,eAAe;AACrD,eAAW,SAAS,OAAO,OAAO,GAAG,GAAG;AACtC,UAAI,WAAW,EAAE,cAAc,OAAO,SAAS,KAAK;AAAA,IACtD;AACA,eAAW,cAAc,GAAG,eAAe;AAC3C,QAAI,KAAK,QAAS,GAAG;AACnB,YAAM,QAAQ,MAAM,CAAC;AAAA,IACvB;AAAA,EACF;AACF;",
  "names": ["row"]
}
