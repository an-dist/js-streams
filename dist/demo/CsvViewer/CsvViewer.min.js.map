{
  "version": 3,
  "sources": ["CsvViewer.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nglobalThis.console = new streams.DomConsole(\"console\", globalThis.console)\n\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst lblRecords = document.getElementById(\"lblRecords\") as HTMLSpanElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst tblResult = document.getElementById(\"tblResult\") as HTMLTableElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtFile.accept = \".csv\"\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtFile.accept = \".tsv\"\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\nlet controller: AbortController | undefined\n\ntxtFile.onchange = async () => {\n  if (!controller || !controller.signal.aborted) {\n    controller?.abort()\n    controller = new AbortController()\n  }\n\n  tblResult.innerHTML = \"\"\n  tblResult.createTBody()\n\n  if (!txtFile.files || txtFile.files.length === 0) {\n    return\n  }\n\n  const source = txtFile.files[0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream(), { signal: controller.signal })\n    .pipeThrough(new streams.CsvDeserializer({\n      hasHeader: true,\n      delimitor: rdoInputFormatTSV.checked ? \"\\t\" : \",\",\n    }).transformable(), { signal: controller.signal })\n\n  let no = 1\n  for await (const obj of streams.toAsyncIterableIterator(source, { signal: controller.signal })) {\n    if (!tblResult.tHead) {\n      const head = tblResult.createTHead()\n      const row = head.insertRow()\n      let th = document.createElement(\"th\")\n      th.textContent = \"#\"\n      row.append(th)\n      for (const key in obj) {\n        th = document.createElement(\"th\")\n        th.textContent = key\n        row.append(th)\n      }\n    }\n    const row = tblResult.tBodies[0].insertRow()\n    row.insertCell().textContent = (no++).toLocaleString()\n    for (const value of Object.values(obj)) {\n      row.insertCell().textContent = value?.toString() ?? \"\"\n    }\n    lblRecords.textContent = no.toLocaleString()\n    if (no % 1000 === 0) {\n      await streams.sleep(0)\n    }\n  }\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,WAAW,QAAU,IAAIA,EAAQ,WAAW,UAAW,WAAW,OAAO,EAEzE,MAAMC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAa,SAAS,eAAe,YAAY,EACjDC,EAAU,SAAS,eAAe,SAAS,EAC3CC,EAAY,SAAS,eAAe,WAAW,EAE/CC,EAAsB,IAAM,CAC5BL,EAAkB,QACpBG,EAAQ,OAAS,OAEVF,EAAkB,UACzBE,EAAQ,OAAS,OAErB,EACAH,EAAkB,iBAAiB,SAAUK,CAAmB,EAChEJ,EAAkB,iBAAiB,SAAUI,CAAmB,EAEhE,IAAIC,EAEJH,EAAQ,SAAW,SAAY,CAS7B,IARI,CAACG,GAAc,CAACA,EAAW,OAAO,WACpCA,GAAY,MAAM,EAClBA,EAAa,IAAI,iBAGnBF,EAAU,UAAY,GACtBA,EAAU,YAAY,EAElB,CAACD,EAAQ,OAASA,EAAQ,MAAM,SAAW,EAC7C,OAGF,MAAMI,EAASJ,EAAQ,MAAM,CAAC,EAAE,OAAO,EACpC,YAAY,IAAIJ,EAAQ,kBAAqB,CAAE,OAAQO,EAAW,MAAO,CAAC,EAC1E,YAAY,IAAIP,EAAQ,gBAAgB,CACvC,UAAW,GACX,UAAWE,EAAkB,QAAU,IAAO,GAChD,CAAC,EAAE,cAAc,EAAG,CAAE,OAAQK,EAAW,MAAO,CAAC,EAEnD,IAAIE,EAAK,EACT,gBAAiBC,KAAOV,EAAQ,wBAAwBQ,EAAQ,CAAE,OAAQD,EAAW,MAAO,CAAC,EAAG,CAC9F,GAAI,CAACF,EAAU,MAAO,CAEpB,MAAMM,EADON,EAAU,YAAY,EAClB,UAAU,EAC3B,IAAIO,EAAK,SAAS,cAAc,IAAI,EACpCA,EAAG,YAAc,IACjBD,EAAI,OAAOC,CAAE,EACb,UAAWC,KAAOH,EAChBE,EAAK,SAAS,cAAc,IAAI,EAChCA,EAAG,YAAcC,EACjBF,EAAI,OAAOC,CAAE,CAEjB,CACA,MAAMD,EAAMN,EAAU,QAAQ,CAAC,EAAE,UAAU,EAC3CM,EAAI,WAAW,EAAE,aAAeF,KAAM,eAAe,EACrD,UAAWK,KAAS,OAAO,OAAOJ,CAAG,EACnCC,EAAI,WAAW,EAAE,YAAcG,GAAO,SAAS,GAAK,GAEtDX,EAAW,YAAcM,EAAG,eAAe,EACvCA,EAAK,MAAS,GAChB,MAAMT,EAAQ,MAAM,CAAC,CAEzB,CACF",
  "names": ["streams", "rdoInputFormatCSV", "rdoInputFormatTSV", "lblRecords", "txtFile", "tblResult", "onChangeInputFormat", "controller", "source", "no", "obj", "row", "th", "key", "value"]
}
