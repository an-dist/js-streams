{
  "version": 3,
  "sources": ["CsvViewer.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nglobalThis.console = new streams.DomConsole(\"console\", globalThis.console)\n\nconst rdoInputFormatCSV = document.getElementById(\"rdoInputFormatCSV\") as HTMLInputElement\nconst rdoInputFormatTSV = document.getElementById(\"rdoInputFormatTSV\") as HTMLInputElement\nconst rdoHeaderDetectionFromFile = document.getElementById(\"rdoHeaderDetectionFromFile\") as HTMLInputElement\nconst txtReadingLimit = document.getElementById(\"txtReadingLimit\") as HTMLInputElement\nconst lblRecords = document.getElementById(\"lblRecords\") as HTMLSpanElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst tblResult = document.getElementById(\"tblResult\") as HTMLTableElement\n\nconst onChangeInputFormat = () => {\n  if (rdoInputFormatCSV.checked) {\n    txtFile.accept = \".csv\"\n  }\n  else if (rdoInputFormatTSV.checked) {\n    txtFile.accept = \".tsv\"\n  }\n}\nrdoInputFormatCSV.addEventListener(\"change\", onChangeInputFormat)\nrdoInputFormatTSV.addEventListener(\"change\", onChangeInputFormat)\n\nlet controller: AbortController | undefined\n\ntxtFile.onchange = async () => {\n  if (!controller || !controller.signal.aborted) {\n    controller?.abort()\n  }\n  controller = new AbortController()\n  lblRecords.textContent = \"0\"\n\n  tblResult.innerHTML = \"\"\n  tblResult.createTBody()\n\n  if (!txtFile.files || txtFile.files.length === 0) {\n    return\n  }\n\n  const source = txtFile.files[0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream(), { signal: controller.signal })\n    .pipeThrough(new streams.CsvDeserializer({\n      hasHeader: rdoHeaderDetectionFromFile.checked,\n      delimitor: rdoInputFormatTSV.checked ? \"\\t\" : \",\",\n    }).transformable(), { signal: controller.signal })\n\n  let no = 1\n  const limit = Number(txtReadingLimit.value)\n  for await (const obj of source) {\n    if (!tblResult.tHead) {\n      const head = tblResult.createTHead()\n      const row = head.insertRow()\n      let th = document.createElement(\"th\")\n      th.textContent = \"#\"\n      row.append(th)\n      for (const key in obj as any) {\n        th = document.createElement(\"th\")\n        th.textContent = key\n        row.append(th)\n      }\n    }\n    const row = tblResult.tBodies[0].insertRow()\n    row.insertCell().textContent = no.toLocaleString()\n    for (const value of Object.values(obj as any)) {\n      row.insertCell().textContent = value?.toString() ?? \"\"\n    }\n    lblRecords.textContent = no.toLocaleString()\n    if (no % (limit / 10) === 0) {\n      await streams.sleep(0)\n    }\n    if (no >= limit) {\n      controller.abort()\n      break\n    }\n    ++no\n  }\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,WAAW,QAAU,IAAIA,EAAQ,WAAW,UAAW,WAAW,OAAO,EAEzE,MAAMC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAAoB,SAAS,eAAe,mBAAmB,EAC/DC,EAA6B,SAAS,eAAe,4BAA4B,EACjFC,EAAkB,SAAS,eAAe,iBAAiB,EAC3DC,EAAa,SAAS,eAAe,YAAY,EACjDC,EAAU,SAAS,eAAe,SAAS,EAC3CC,EAAY,SAAS,eAAe,WAAW,EAE/CC,EAAsB,IAAM,CAC5BP,EAAkB,QACpBK,EAAQ,OAAS,OAEVJ,EAAkB,UACzBI,EAAQ,OAAS,OAErB,EACAL,EAAkB,iBAAiB,SAAUO,CAAmB,EAChEN,EAAkB,iBAAiB,SAAUM,CAAmB,EAEhE,IAAIC,EAEJH,EAAQ,SAAW,SAAY,CAU7B,IATI,CAACG,GAAc,CAACA,EAAW,OAAO,UACpCA,GAAY,MAAM,EAEpBA,EAAa,IAAI,gBACjBJ,EAAW,YAAc,IAEzBE,EAAU,UAAY,GACtBA,EAAU,YAAY,EAElB,CAACD,EAAQ,OAASA,EAAQ,MAAM,SAAW,EAC7C,OAGF,MAAMI,EAASJ,EAAQ,MAAM,CAAC,EAAE,OAAO,EACpC,YAAY,IAAIN,EAAQ,kBAAqB,CAAE,OAAQS,EAAW,MAAO,CAAC,EAC1E,YAAY,IAAIT,EAAQ,gBAAgB,CACvC,UAAWG,EAA2B,QACtC,UAAWD,EAAkB,QAAU,IAAO,GAChD,CAAC,EAAE,cAAc,EAAG,CAAE,OAAQO,EAAW,MAAO,CAAC,EAEnD,IAAIE,EAAK,EACT,MAAMC,EAAQ,OAAOR,EAAgB,KAAK,EAC1C,gBAAiBS,KAAOH,EAAQ,CAC9B,GAAI,CAACH,EAAU,MAAO,CAEpB,MAAMO,EADOP,EAAU,YAAY,EAClB,UAAU,EAC3B,IAAIQ,EAAK,SAAS,cAAc,IAAI,EACpCA,EAAG,YAAc,IACjBD,EAAI,OAAOC,CAAE,EACb,UAAWC,KAAOH,EAChBE,EAAK,SAAS,cAAc,IAAI,EAChCA,EAAG,YAAcC,EACjBF,EAAI,OAAOC,CAAE,CAEjB,CACA,MAAMD,EAAMP,EAAU,QAAQ,CAAC,EAAE,UAAU,EAC3CO,EAAI,WAAW,EAAE,YAAcH,EAAG,eAAe,EACjD,UAAWM,KAAS,OAAO,OAAOJ,CAAU,EAC1CC,EAAI,WAAW,EAAE,YAAcG,GAAO,SAAS,GAAK,GAMtD,GAJAZ,EAAW,YAAcM,EAAG,eAAe,EACvCA,GAAMC,EAAQ,MAAQ,GACxB,MAAMZ,EAAQ,MAAM,CAAC,EAEnBW,GAAMC,EAAO,CACfH,EAAW,MAAM,EACjB,KACF,CACA,EAAEE,CACJ,CACF",
  "names": ["streams", "rdoInputFormatCSV", "rdoInputFormatTSV", "rdoHeaderDetectionFromFile", "txtReadingLimit", "lblRecords", "txtFile", "tblResult", "onChangeInputFormat", "controller", "source", "no", "limit", "obj", "row", "th", "key", "value"]
}
