{
  "version": 3,
  "sources": ["JsonToCsv.download.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatJSON = document.getElementById(\"rdoInputFormatJSON\") as HTMLInputElement\nconst rdoInputFormatJSONL = document.getElementById(\"rdoInputFormatJSONL\") as HTMLInputElement\nconst rdoInputFormatJSONC = document.getElementById(\"rdoInputFormatJSONC\") as HTMLInputElement\nconst rdoOutputFormatCSV = document.getElementById(\"rdoOutputFormatCSV\") as HTMLInputElement\nconst txtUrl = document.getElementById(\"txtUrl\") as HTMLInputElement\nconst btnConvertUrl = document.getElementById(\"btnConvertUrl\") as HTMLButtonElement\nconst linkHolder = btnConvertUrl.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFromat = () => {\n  if (rdoInputFormatJSON.checked) {\n    txtUrl.value = new URL(\"sample.json\", location.href).href\n  }\n  else if (rdoInputFormatJSONL.checked) {\n    txtUrl.value = new URL(\"sample.jsonl\", location.href).href\n  }\n  else if (rdoInputFormatJSONC.checked) {\n    txtUrl.value = new URL(\"sample.jsonc\", location.href).href\n  }\n}\nrdoInputFormatJSON.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONL.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONC.addEventListener(\"change\", onChangeInputFromat)\n\nbtnConvertUrl.onclick = () => {\n  fetch(txtUrl.value, { credentials: \"include\" }).then(async response => {\n    if (!response.ok) {\n      console.warn(`${txtUrl.value} responded status code ${response.status}.`, await response.text())\n      return\n    }\n\n    let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n    if (!chkDirect.checked) {\n      downloadStreamOptions = {\n        linkHolder,\n      }\n    }\n\n    const jsonDeserializeOptions = {\n      lineSeparated: rdoInputFormatJSONL.checked,\n      withComments: rdoInputFormatJSONC.checked,\n    }\n\n    const csvSerializerOptions = {\n      delimiter: rdoOutputFormatCSV.checked\n        ? \",\"\n        : \"\\t\",\n      withNewLine: true,\n    }\n\n    const downloadName = rdoOutputFormatCSV.checked\n      ? \"download.csv\"\n      : \"download.tsv\"\n\n    response.body!\n      .pipeThrough(new streams.Utf8DecoderStream())\n      .pipeThrough(new streams.JsonDeserializer(jsonDeserializeOptions).transformable())\n      .pipeThrough(new streams.CsvSerializer(csvSerializerOptions).transformable())\n      .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n  })\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,MAAMC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAqB,SAAS,eAAe,oBAAoB,EACjEC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAqB,SAAS,eAAe,oBAAoB,EACjEC,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAgB,SAAS,eAAe,eAAe,EACvDC,EAAaD,EAAc,cAAe,iBAE1CE,EAAsB,IAAM,CAC5BP,EAAmB,QACrBI,EAAO,MAAQ,IAAI,IAAI,cAAe,SAAS,IAAI,EAAE,KAE9CH,EAAoB,QAC3BG,EAAO,MAAQ,IAAI,IAAI,eAAgB,SAAS,IAAI,EAAE,KAE/CF,EAAoB,UAC3BE,EAAO,MAAQ,IAAI,IAAI,eAAgB,SAAS,IAAI,EAAE,KAE1D,EACAJ,EAAmB,iBAAiB,SAAUO,CAAmB,EACjEN,EAAoB,iBAAiB,SAAUM,CAAmB,EAClEL,EAAoB,iBAAiB,SAAUK,CAAmB,EAElEF,EAAc,QAAU,IAAM,CAC5B,MAAMD,EAAO,MAAO,CAAE,YAAa,SAAU,CAAC,EAAE,KAAK,MAAMI,GAAY,CACrE,GAAI,CAACA,EAAS,GAAI,CAChB,QAAQ,KAAK,GAAGJ,EAAO,KAAK,0BAA0BI,EAAS,MAAM,IAAK,MAAMA,EAAS,KAAK,CAAC,EAC/F,MACF,CAEA,IAAIC,EACCV,EAAU,UACbU,EAAwB,CACtB,WAAAH,CACF,GAGF,MAAMI,EAAyB,CAC7B,cAAeT,EAAoB,QACnC,aAAcC,EAAoB,OACpC,EAEMS,EAAuB,CAC3B,UAAWR,EAAmB,QAC1B,IACA,IACJ,YAAa,EACf,EAEMS,EAAeT,EAAmB,QACpC,eACA,eAEJK,EAAS,KACN,YAAY,IAAIV,EAAQ,iBAAmB,EAC3C,YAAY,IAAIA,EAAQ,iBAAiBY,CAAsB,EAAE,cAAc,CAAC,EAChF,YAAY,IAAIZ,EAAQ,cAAca,CAAoB,EAAE,cAAc,CAAC,EAC3E,OAAO,IAAIb,EAAQ,eAAec,EAAcH,CAAqB,CAAC,CAC3E,CAAC,CACH",
  "names": ["streams", "chkDirect", "rdoInputFormatJSON", "rdoInputFormatJSONL", "rdoInputFormatJSONC", "rdoOutputFormatCSV", "txtUrl", "btnConvertUrl", "linkHolder", "onChangeInputFromat", "response", "downloadStreamOptions", "jsonDeserializeOptions", "csvSerializerOptions", "downloadName"]
}
