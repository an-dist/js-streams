{
  "version": 3,
  "sources": ["JsonToCsv.upload.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatJSON = document.getElementById(\"rdoInputFormatJSON\") as HTMLInputElement\nconst rdoInputFormatJSONL = document.getElementById(\"rdoInputFormatJSONL\") as HTMLInputElement\nconst rdoInputFormatJSONC = document.getElementById(\"rdoInputFormatJSONC\") as HTMLInputElement\nconst rdoOutputFormatCSV = document.getElementById(\"rdoOutputFormatCSV\") as HTMLInputElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst linkHolder = txtFile.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFromat = () => {\n  if (rdoInputFormatJSON.checked) {\n    txtFile.accept = \".json\"\n  }\n  else if (rdoInputFormatJSONL.checked) {\n    txtFile.accept = \".jsonl\"\n  }\n  else if (rdoInputFormatJSONC.checked) {\n    txtFile.accept = \".jsonc\"\n  }\n}\nrdoInputFormatJSON.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONL.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONC.addEventListener(\"change\", onChangeInputFromat)\n\ntxtFile.onchange = () => {\n  if (!txtFile.files) {\n    return\n  }\n\n  let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n  if (!chkDirect.checked) {\n    downloadStreamOptions = {\n      linkHolder,\n    }\n  }\n\n  const jsonDeserializeOptions = {\n    lineSeparated: rdoInputFormatJSONL.checked,\n    withComments: rdoInputFormatJSONC.checked,\n  }\n\n  const csvSerializerOptions = {\n    delimiter: rdoOutputFormatCSV.checked\n      ? \",\"\n      : \"\\t\",\n    withNewLine: true,\n  }\n\n  const downloadName = rdoOutputFormatCSV.checked\n    ? \"download.csv\"\n    : \"download.tsv\"\n\n  txtFile.files![0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream())\n    .pipeThrough(new streams.JsonDeserializer(jsonDeserializeOptions).transformable())\n    .pipeThrough(new streams.CsvSerializer(csvSerializerOptions).transformable())\n    .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n}"],
  "mappings": "AACA,UAAYA,MAAa,UAEzB,MAAMC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAqB,SAAS,eAAe,oBAAoB,EACjEC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAsB,SAAS,eAAe,qBAAqB,EACnEC,EAAqB,SAAS,eAAe,oBAAoB,EACjEC,EAAU,SAAS,eAAe,SAAS,EAC3CC,EAAaD,EAAQ,cAAe,iBAEpCE,EAAsB,IAAM,CAC5BN,EAAmB,QACrBI,EAAQ,OAAS,QAEVH,EAAoB,QAC3BG,EAAQ,OAAS,SAEVF,EAAoB,UAC3BE,EAAQ,OAAS,SAErB,EACAJ,EAAmB,iBAAiB,SAAUM,CAAmB,EACjEL,EAAoB,iBAAiB,SAAUK,CAAmB,EAClEJ,EAAoB,iBAAiB,SAAUI,CAAmB,EAElEF,EAAQ,SAAW,IAAM,CACvB,GAAI,CAACA,EAAQ,MACX,OAGF,IAAIG,EACCR,EAAU,UACbQ,EAAwB,CACtB,WAAAF,CACF,GAGF,MAAMG,EAAyB,CAC7B,cAAeP,EAAoB,QACnC,aAAcC,EAAoB,OACpC,EAEMO,EAAuB,CAC3B,UAAWN,EAAmB,QAC1B,IACA,IACJ,YAAa,EACf,EAEMO,EAAeP,EAAmB,QACpC,eACA,eAEJC,EAAQ,MAAO,CAAC,EAAE,OAAO,EACtB,YAAY,IAAIN,EAAQ,iBAAmB,EAC3C,YAAY,IAAIA,EAAQ,iBAAiBU,CAAsB,EAAE,cAAc,CAAC,EAChF,YAAY,IAAIV,EAAQ,cAAcW,CAAoB,EAAE,cAAc,CAAC,EAC3E,OAAO,IAAIX,EAAQ,eAAeY,EAAcH,CAAqB,CAAC,CAC3E",
  "names": ["streams", "chkDirect", "rdoInputFormatJSON", "rdoInputFormatJSONL", "rdoInputFormatJSONC", "rdoOutputFormatCSV", "txtFile", "linkHolder", "onChangeInputFromat", "downloadStreamOptions", "jsonDeserializeOptions", "csvSerializerOptions", "downloadName"]
}
