{
  "version": 3,
  "sources": ["JsonToCsv.upload.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatJSON = document.getElementById(\"rdoInputFormatJSON\") as HTMLInputElement\nconst rdoInputFormatJSONL = document.getElementById(\"rdoInputFormatJSONL\") as HTMLInputElement\nconst rdoInputFormatJSONC = document.getElementById(\"rdoInputFormatJSONC\") as HTMLInputElement\nconst rdoOutputFormatCSV = document.getElementById(\"rdoOutputFormatCSV\") as HTMLInputElement\nconst txtFile = document.getElementById(\"txtFile\") as HTMLInputElement\nconst linkHolder = txtFile.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFromat = () => {\n  if (rdoInputFormatJSON.checked) {\n    txtFile.accept = \".json\"\n  }\n  else if (rdoInputFormatJSONL.checked) {\n    txtFile.accept = \".jsonl\"\n  }\n  else if (rdoInputFormatJSONC.checked) {\n    txtFile.accept = \".jsonc\"\n  }\n}\nrdoInputFormatJSON.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONL.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONC.addEventListener(\"change\", onChangeInputFromat)\n\ntxtFile.onchange = () => {\n  if (!txtFile.files) {\n    return\n  }\n\n  let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n  if (!chkDirect.checked) {\n    downloadStreamOptions = {\n      linkHolder,\n    }\n  }\n\n  const jsonDeserializeOptions = {\n    lineSeparated: rdoInputFormatJSONL.checked,\n    withComments: rdoInputFormatJSONC.checked,\n  }\n\n  const csvSerializerOptions = {\n    delimiter: rdoOutputFormatCSV.checked\n      ? \",\"\n      : \"\\t\",\n    withNewLine: true,\n  }\n\n  const downloadName = rdoOutputFormatCSV.checked\n    ? \"download.csv\"\n    : \"download.tsv\"\n\n  txtFile.files![0].stream()\n    .pipeThrough(new streams.Utf8DecoderStream())\n    .pipeThrough(new streams.JsonDeserializer(jsonDeserializeOptions).transformable())\n    .pipeThrough(new streams.CsvSerializer(csvSerializerOptions).transformable())\n    .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n}"],
  "mappings": "AACA,YAAY,aAAa;AAEzB,MAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAM,qBAAqB,SAAS,eAAe,oBAAoB;AACvE,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,qBAAqB,SAAS,eAAe,oBAAoB;AACvE,MAAM,UAAU,SAAS,eAAe,SAAS;AACjD,MAAM,aAAa,QAAQ,cAAe;AAE1C,MAAM,sBAAsB,MAAM;AAChC,MAAI,mBAAmB,SAAS;AAC9B,YAAQ,SAAS;AAAA,EACnB,WACS,oBAAoB,SAAS;AACpC,YAAQ,SAAS;AAAA,EACnB,WACS,oBAAoB,SAAS;AACpC,YAAQ,SAAS;AAAA,EACnB;AACF;AACA,mBAAmB,iBAAiB,UAAU,mBAAmB;AACjE,oBAAoB,iBAAiB,UAAU,mBAAmB;AAClE,oBAAoB,iBAAiB,UAAU,mBAAmB;AAElE,QAAQ,WAAW,MAAM;AACvB,MAAI,CAAC,QAAQ,OAAO;AAClB;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,CAAC,UAAU,SAAS;AACtB,4BAAwB;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,yBAAyB;AAAA,IAC7B,eAAe,oBAAoB;AAAA,IACnC,cAAc,oBAAoB;AAAA,EACpC;AAEA,QAAM,uBAAuB;AAAA,IAC3B,WAAW,mBAAmB,UAC1B,MACA;AAAA,IACJ,aAAa;AAAA,EACf;AAEA,QAAM,eAAe,mBAAmB,UACpC,iBACA;AAEJ,UAAQ,MAAO,CAAC,EAAE,OAAO,EACtB,YAAY,IAAI,QAAQ,kBAAkB,CAAC,EAC3C,YAAY,IAAI,QAAQ,iBAAiB,sBAAsB,EAAE,cAAc,CAAC,EAChF,YAAY,IAAI,QAAQ,cAAc,oBAAoB,EAAE,cAAc,CAAC,EAC3E,OAAO,IAAI,QAAQ,eAAe,cAAc,qBAAqB,CAAC;AAC3E;",
  "names": []
}
