{
  "version": 3,
  "sources": ["JsonToCsv.download.ts"],
  "sourcesContent": ["import * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst txtUrl = document.getElementById(\"txtUrl\") as HTMLInputElement\nconst btnConvertUrl = document.getElementById(\"btnConvertUrl\") as HTMLButtonElement\nconst linkHolder = btnConvertUrl.parentElement!.lastElementChild as HTMLDivElement\n\nbtnConvertUrl.onclick = () => {\n  fetch(txtUrl.value, { credentials: \"include\" }).then(async response => {\n    if (!response.ok) {\n      console.warn(`${txtUrl.value} responded status code ${response.status}.`, await response.text())\n      return\n    }\n\n    let options: streams.DownloadStreamOptions | undefined\n    if (!chkDirect.checked) {\n      options = {\n        linkHolder\n      }\n    }\n\n    response.body!\n      .pipeThrough(new streams.Utf8DecoderStream())\n      .pipeThrough(new streams.JsonDeserializer({ lineSeparated: response.headers.get(\"content-type\")?.includes(\"jsonl\") }).transform())\n      .pipeThrough(new streams.CsvLineEncoder({ withNewLine: true }).transform())\n      .pipeTo(new streams.DownloadStream(\"download.csv\", options))\n  })\n}"],
  "mappings": "AAAA,YAAY,aAAa;AAEzB,MAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAM,SAAS,SAAS,eAAe,QAAQ;AAC/C,MAAM,gBAAgB,SAAS,eAAe,eAAe;AAC7D,MAAM,aAAa,cAAc,cAAe;AAEhD,cAAc,UAAU,MAAM;AAC5B,QAAM,OAAO,OAAO,EAAE,aAAa,UAAU,CAAC,EAAE,KAAK,OAAM,aAAY;AACrE,QAAI,CAAC,SAAS,IAAI;AAChB,cAAQ,KAAK,GAAG,OAAO,KAAK,0BAA0B,SAAS,MAAM,KAAK,MAAM,SAAS,KAAK,CAAC;AAC/F;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,CAAC,UAAU,SAAS;AACtB,gBAAU;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,aAAS,KACN,YAAY,IAAI,QAAQ,kBAAkB,CAAC,EAC3C,YAAY,IAAI,QAAQ,iBAAiB,EAAE,eAAe,SAAS,QAAQ,IAAI,cAAc,GAAG,SAAS,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC,EAChI,YAAY,IAAI,QAAQ,eAAe,EAAE,aAAa,KAAK,CAAC,EAAE,UAAU,CAAC,EACzE,OAAO,IAAI,QAAQ,eAAe,gBAAgB,OAAO,CAAC;AAAA,EAC/D,CAAC;AACH;",
  "names": []
}
