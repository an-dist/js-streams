{
  "version": 3,
  "sources": ["JsonToCsv.download.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as streams from \"/web.ts\"\n\nconst chkDirect = document.getElementById(\"chkDirect\") as HTMLInputElement\nconst rdoInputFormatJSON = document.getElementById(\"rdoInputFormatJSON\") as HTMLInputElement\nconst rdoInputFormatJSONL = document.getElementById(\"rdoInputFormatJSONL\") as HTMLInputElement\nconst rdoInputFormatJSONC = document.getElementById(\"rdoInputFormatJSONC\") as HTMLInputElement\nconst rdoOutputFormatCSV = document.getElementById(\"rdoOutputFormatCSV\") as HTMLInputElement\nconst txtUrl = document.getElementById(\"txtUrl\") as HTMLInputElement\nconst btnConvertUrl = document.getElementById(\"btnConvertUrl\") as HTMLButtonElement\nconst linkHolder = btnConvertUrl.parentElement!.lastElementChild as HTMLDivElement\n\nconst onChangeInputFromat = () => {\n  if (rdoInputFormatJSON.checked) {\n    txtUrl.value = new URL(\"sample.json\", location.href).href\n  }\n  else if (rdoInputFormatJSONL.checked) {\n    txtUrl.value = new URL(\"sample.jsonl\", location.href).href\n  }\n  else if (rdoInputFormatJSONC.checked) {\n    txtUrl.value = new URL(\"sample.jsonc\", location.href).href\n  }\n}\nrdoInputFormatJSON.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONL.addEventListener(\"change\", onChangeInputFromat)\nrdoInputFormatJSONC.addEventListener(\"change\", onChangeInputFromat)\n\nbtnConvertUrl.onclick = () => {\n  fetch(txtUrl.value, { credentials: \"include\" }).then(async response => {\n    if (!response.ok) {\n      console.warn(`${txtUrl.value} responded status code ${response.status}.`, await response.text())\n      return\n    }\n\n    let downloadStreamOptions: streams.DownloadStreamOptions | undefined\n    if (!chkDirect.checked) {\n      downloadStreamOptions = {\n        linkHolder,\n      }\n    }\n\n    const jsonDeserializeOptions = {\n      lineSeparated: rdoInputFormatJSONL.checked,\n      withComments: rdoInputFormatJSONC.checked,\n    }\n\n    const csvSerializerOptions = {\n      delimiter: rdoOutputFormatCSV.checked\n        ? \",\"\n        : \"\\t\",\n      withNewLine: true,\n    }\n\n    const downloadName = rdoOutputFormatCSV.checked\n      ? \"download.csv\"\n      : \"download.tsv\"\n\n    response.body!\n      .pipeThrough(new streams.Utf8DecoderStream())\n      .pipeThrough(new streams.JsonDeserializer(jsonDeserializeOptions).transformable())\n      .pipeThrough(new streams.CsvSerializer(csvSerializerOptions).transformable())\n      .pipeTo(new streams.DownloadStream(downloadName, downloadStreamOptions))\n  })\n}"],
  "mappings": "AACA,YAAY,aAAa;AAEzB,MAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAM,qBAAqB,SAAS,eAAe,oBAAoB;AACvE,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,MAAM,qBAAqB,SAAS,eAAe,oBAAoB;AACvE,MAAM,SAAS,SAAS,eAAe,QAAQ;AAC/C,MAAM,gBAAgB,SAAS,eAAe,eAAe;AAC7D,MAAM,aAAa,cAAc,cAAe;AAEhD,MAAM,sBAAsB,MAAM;AAChC,MAAI,mBAAmB,SAAS;AAC9B,WAAO,QAAQ,IAAI,IAAI,eAAe,SAAS,IAAI,EAAE;AAAA,EACvD,WACS,oBAAoB,SAAS;AACpC,WAAO,QAAQ,IAAI,IAAI,gBAAgB,SAAS,IAAI,EAAE;AAAA,EACxD,WACS,oBAAoB,SAAS;AACpC,WAAO,QAAQ,IAAI,IAAI,gBAAgB,SAAS,IAAI,EAAE;AAAA,EACxD;AACF;AACA,mBAAmB,iBAAiB,UAAU,mBAAmB;AACjE,oBAAoB,iBAAiB,UAAU,mBAAmB;AAClE,oBAAoB,iBAAiB,UAAU,mBAAmB;AAElE,cAAc,UAAU,MAAM;AAC5B,QAAM,OAAO,OAAO,EAAE,aAAa,UAAU,CAAC,EAAE,KAAK,OAAM,aAAY;AACrE,QAAI,CAAC,SAAS,IAAI;AAChB,cAAQ,KAAK,GAAG,OAAO,KAAK,0BAA0B,SAAS,MAAM,KAAK,MAAM,SAAS,KAAK,CAAC;AAC/F;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,CAAC,UAAU,SAAS;AACtB,8BAAwB;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,yBAAyB;AAAA,MAC7B,eAAe,oBAAoB;AAAA,MACnC,cAAc,oBAAoB;AAAA,IACpC;AAEA,UAAM,uBAAuB;AAAA,MAC3B,WAAW,mBAAmB,UAC1B,MACA;AAAA,MACJ,aAAa;AAAA,IACf;AAEA,UAAM,eAAe,mBAAmB,UACpC,iBACA;AAEJ,aAAS,KACN,YAAY,IAAI,QAAQ,kBAAkB,CAAC,EAC3C,YAAY,IAAI,QAAQ,iBAAiB,sBAAsB,EAAE,cAAc,CAAC,EAChF,YAAY,IAAI,QAAQ,cAAc,oBAAoB,EAAE,cAAc,CAAC,EAC3E,OAAO,IAAI,QAAQ,eAAe,cAAc,qBAAqB,CAAC;AAAA,EAC3E,CAAC;AACH;",
  "names": []
}
