import{CsvDeserializer as f}from"./CsvDeserializer.min.js";import{SimplePerformanceStreamBuilder as w}from"../PerformanceStream/PerformanceStream.min.js";import{sleep as h}from"../funcs/sleep/sleep.min.js";const i=e=>new ReadableStream({start(o){for(const s of e)o.enqueue(s),o.enqueue(`
`);o.close()}}),T=()=>new TransformStream({transform(e,o){console.log(e),o.enqueue(e)}}),u=()=>new WritableStream,p=e=>new f(e),t=['a,1,"b,2\\""',"c,3,d,4",`e,5,f
g,6,h`],d=["column1,column2,column3"].concat(t),m=t.map(e=>e.replace(/,/g,"	")),H=d.map(e=>e.replace(/,/g,"	")),r=async(e,o,s,a,l)=>{console.group(e),console.log("hasHeader=",s),console.log("headers=",a),console.log("data=",o),console.log("result="),await i(o).pipeThrough(p({hasHeader:s,autoColumnPrefix:"auto_column_",headers:a,delimiter:l}).transformable()).pipeThrough(T()).pipeTo(u()),console.groupEnd()},S=async(e,o)=>{console.group("columns=",e,"rows=",o);const s=[],a=[];for(let n=0;n<e;++n)a.push(`column${n+1}`);s.push(a.join(","));for(let n=0;n<o;++n){a.length=0;for(let c=0;c<e;++c)a.push(`value${n+1}_${c+1}`);s.push(a.join(","))}const l=new w;await i(s).pipeThrough(l.pipe(p({hasHeader:!0}).transformable()).build()).pipeTo(u());const g=l.result();console.table(g),console.groupEnd()};console.group("Testing"),await r("CSV Header less",t,!1,["c1","c2"]),await r("CSV Header less (Auto column)",t,!1),await r("CSV Header included",d,!0),await r("TSV Header less",m,!1,["c1","c2"],"	"),await r("TSV Header less (Auto column)",m,!1,void 0,"	"),await r("TSV Header included",H,!0,void 0,"	"),console.groupEnd(),await h(),console.group("Testing performance"),await S(100,1e5),console.groupEnd(),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
