{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvDeserializer, CsvDeserializerOptions } from \"./CsvDeserializer.ts\"\nimport { PerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\nimport { CompatiblePerformance } from \"../misc/CompatiblePerformance/CompatiblePerformance.ts\"\n\nglobalThis.performance = new CompatiblePerformance\n\nconst source = (source: string[]) => new ReadableStream({\n  start(controller) {\n    for (const line of source) {\n      controller.enqueue(line)\n    }\n    controller.close()\n  }\n})\n\nconst logging = () => new TransformStream({\n  transform(chunk, controller) {\n    console.log(chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst deserializer = (options?: CsvDeserializerOptions) => new CsvDeserializer(options)\n\nconst csvHeaderLess = [\n  \"a,1,\\\"b,2\\\\\\\"\\\"\",\n  \"c,3,d,4\",\n  \"e,5,f\\ng,6,h\",\n]\nconst csvHeaderIncluded = [\"column1,column2,column3\"].concat(csvHeaderLess)\nconst tsvHeaderLess = csvHeaderLess.map(x => x.replace(/,/g, \"\\t\"))\nconst tsvHeaderIncluded = csvHeaderIncluded.map(x => x.replace(/,/g, \"\\t\"))\n\nconst test = async (title: string, data: string[], headers?: string[], delimiter?: string) => {\n  console.group(title)\n  console.log(\"headers=\", headers)\n  console.log(\"data=\", data)\n  console.log(\"result=\")\n  await source(data)\n    .pipeThrough(deserializer({\n      hasHeader: !headers || headers.length === 0,\n      headers,\n      delimiter,\n    }).transformable())\n    .pipeThrough(logging())\n    .pipeTo(terminate())\n  console.groupEnd()\n}\n\nconst testPerformance = async (columnCount: number, rowCount: number) => {\n  console.group(\"columns=\", columnCount, \"rows=\", rowCount)\n\n  const rows: string[] = []\n  const fields: string[] = []\n  for (let i = 0; i < columnCount; ++i) {\n    fields.push(`column${i + 1}`)\n  }\n  rows.push(fields.join(\",\"))\n  for (let i = 0; i < rowCount; ++i) {\n    fields.length = 0\n    for (let j = 0; j < columnCount; ++j) {\n      fields.push(`value${i + 1}_${j + 1}`)\n    }\n    rows.push(fields.join(\",\"))\n  }\n\n  const builder = new PerformanceStreamBuilder(\"perf\", \"start\", \"end\")\n\n  await source(rows)\n    .pipeThrough(builder\n      .pipe(deserializer({ hasHeader: true }).transformable())\n      .build())\n    .pipeTo(terminate())\n\n  const perf = builder.result()\n  console.table(perf)\n\n  console.groupEnd()\n}\n\nconsole.group(\"Testing\")\nawait test(\"CSV Header less\", csvHeaderLess, [\"c1\", \"c2\"])\nawait test(\"CSV Header included\", csvHeaderIncluded)\nawait test(\"TSV Header less\", tsvHeaderLess, [\"c1\", \"c2\"], \"\\t\")\nawait test(\"TSV Header included\", tsvHeaderIncluded, undefined, \"\\t\")\nconsole.groupEnd()\n\nawait sleep()\n\nconsole.group(\"Testing performance\")\nawait testPerformance(100, 100000)\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,uBAA+C;AACxD,SAAS,gCAAgC;AACzC,SAAS,aAAa;AACtB,SAAS,6BAA6B;AAEtC,WAAW,cAAc,IAAI;AAE7B,MAAM,SAAS,CAACA,YAAqB,IAAI,eAAe;AAAA,EACtD,MAAM,YAAY;AAChB,eAAW,QAAQA,SAAQ;AACzB,iBAAW,QAAQ,IAAI;AAAA,IACzB;AACA,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,MAAM,IAAI,gBAAgB;AAAA,EACxC,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,KAAK;AACjB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,YAAY,MAAM,IAAI,eAAe;AAE3C,MAAM,eAAe,CAAC,YAAqC,IAAI,gBAAgB,OAAO;AAEtF,MAAM,gBAAgB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACF;AACA,MAAM,oBAAoB,CAAC,yBAAyB,EAAE,OAAO,aAAa;AAC1E,MAAM,gBAAgB,cAAc,IAAI,OAAK,EAAE,QAAQ,MAAM,GAAI,CAAC;AAClE,MAAM,oBAAoB,kBAAkB,IAAI,OAAK,EAAE,QAAQ,MAAM,GAAI,CAAC;AAE1E,MAAM,OAAO,OAAO,OAAe,MAAgB,SAAoB,cAAuB;AAC5F,UAAQ,MAAM,KAAK;AACnB,UAAQ,IAAI,YAAY,OAAO;AAC/B,UAAQ,IAAI,SAAS,IAAI;AACzB,UAAQ,IAAI,SAAS;AACrB,QAAM,OAAO,IAAI,EACd,YAAY,aAAa;AAAA,IACxB,WAAW,CAAC,WAAW,QAAQ,WAAW;AAAA,IAC1C;AAAA,IACA;AAAA,EACF,CAAC,EAAE,cAAc,CAAC,EACjB,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,UAAQ,SAAS;AACnB;AAEA,MAAM,kBAAkB,OAAO,aAAqB,aAAqB;AACvE,UAAQ,MAAM,YAAY,aAAa,SAAS,QAAQ;AAExD,QAAM,OAAiB,CAAC;AACxB,QAAM,SAAmB,CAAC;AAC1B,WAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AACpC,WAAO,KAAK,SAAS,IAAI,CAAC,EAAE;AAAA,EAC9B;AACA,OAAK,KAAK,OAAO,KAAK,GAAG,CAAC;AAC1B,WAAS,IAAI,GAAG,IAAI,UAAU,EAAE,GAAG;AACjC,WAAO,SAAS;AAChB,aAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AACpC,aAAO,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE;AAAA,IACtC;AACA,SAAK,KAAK,OAAO,KAAK,GAAG,CAAC;AAAA,EAC5B;AAEA,QAAM,UAAU,IAAI,yBAAyB,QAAQ,SAAS,KAAK;AAEnE,QAAM,OAAO,IAAI,EACd,YAAY,QACV,KAAK,aAAa,EAAE,WAAW,KAAK,CAAC,EAAE,cAAc,CAAC,EACtD,MAAM,CAAC,EACT,OAAO,UAAU,CAAC;AAErB,QAAM,OAAO,QAAQ,OAAO;AAC5B,UAAQ,MAAM,IAAI;AAElB,UAAQ,SAAS;AACnB;AAEA,QAAQ,MAAM,SAAS;AACvB,MAAM,KAAK,mBAAmB,eAAe,CAAC,MAAM,IAAI,CAAC;AACzD,MAAM,KAAK,uBAAuB,iBAAiB;AACnD,MAAM,KAAK,mBAAmB,eAAe,CAAC,MAAM,IAAI,GAAG,GAAI;AAC/D,MAAM,KAAK,uBAAuB,mBAAmB,QAAW,GAAI;AACpE,QAAQ,SAAS;AAEjB,MAAM,MAAM;AAEZ,QAAQ,MAAM,qBAAqB;AACnC,MAAM,gBAAgB,KAAK,GAAM;AACjC,QAAQ,SAAS;AAEjB,QAAQ,IAAI,iBAAiB;",
  "names": ["source"]
}
