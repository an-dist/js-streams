{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvDeserializer, CsvDeserializerOptions } from \"./CsvDeserializer.ts\"\nimport { SimplePerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst source = (source: string[]) => new ReadableStream({\n  start(controller) {\n    for (const line of source) {\n      controller.enqueue(line)\n    }\n    controller.close()\n  }\n})\n\nconst logging = () => new TransformStream({\n  transform(chunk, controller) {\n    console.log(chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst deserializer = (options?: CsvDeserializerOptions) => new CsvDeserializer(options)\n\nconst csvHeaderLess = [\n  \"a,1,\\\"b,2\\\\\\\"\\\"\",\n  \"c,3,d,4\",\n  \"e,5,f\\ng,6,h\",\n]\nconst csvHeaderIncluded = [\"column1,column2,column3\"].concat(csvHeaderLess)\nconst tsvHeaderLess = csvHeaderLess.map(x => x.replace(/,/g, \"\\t\"))\nconst tsvHeaderIncluded = csvHeaderIncluded.map(x => x.replace(/,/g, \"\\t\"))\n\nconst test = async (title: string, data: string[], headers?: string[], delimiter?: string) => {\n  console.group(title)\n  console.log(\"headers=\", headers)\n  console.log(\"data=\", data)\n  console.log(\"result=\")\n  await source(data)\n    .pipeThrough(deserializer({\n      hasHeader: !headers || headers.length === 0,\n      headers,\n      delimiter,\n    }).transformable())\n    .pipeThrough(logging())\n    .pipeTo(terminate())\n  console.groupEnd()\n}\n\nconst testPerformance = async (columnCount: number, rowCount: number) => {\n  console.group(\"columns=\", columnCount, \"rows=\", rowCount)\n\n  const rows: string[] = []\n  const fields: string[] = []\n  for (let i = 0; i < columnCount; ++i) {\n    fields.push(`column${i + 1}`)\n  }\n  rows.push(fields.join(\",\"))\n  for (let i = 0; i < rowCount; ++i) {\n    fields.length = 0\n    for (let j = 0; j < columnCount; ++j) {\n      fields.push(`value${i + 1}_${j + 1}`)\n    }\n    rows.push(fields.join(\",\"))\n  }\n\n  const builder = new SimplePerformanceStreamBuilder()\n\n  await source(rows)\n    .pipeThrough(builder\n      .pipe(deserializer({ hasHeader: true }).transformable())\n      .build())\n    .pipeTo(terminate())\n\n  const perf = builder.result()\n  console.table(perf)\n\n  console.groupEnd()\n}\n\nconsole.group(\"Testing\")\nawait test(\"CSV Header less\", csvHeaderLess, [\"c1\", \"c2\"])\nawait test(\"CSV Header included\", csvHeaderIncluded)\nawait test(\"TSV Header less\", tsvHeaderLess, [\"c1\", \"c2\"], \"\\t\")\nawait test(\"TSV Header included\", tsvHeaderIncluded, undefined, \"\\t\")\nconsole.groupEnd()\n\nawait sleep()\n\nconsole.group(\"Testing performance\")\nawait testPerformance(100, 100000)\nconsole.groupEnd()\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,mBAAAA,MAA+C,uBACxD,OAAS,kCAAAC,MAAsC,4CAC/C,OAAS,SAAAC,MAAa,0BAEtB,MAAMC,EAAUA,GAAqB,IAAI,eAAe,CACtD,MAAMC,EAAY,CAChB,UAAWC,KAAQF,EACjBC,EAAW,QAAQC,CAAI,EAEzBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAU,IAAM,IAAI,gBAAgB,CACxC,UAAUC,EAAOH,EAAY,CAC3B,QAAQ,IAAIG,CAAK,EACjBH,EAAW,QAAQG,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBC,EAAgBC,GAAqC,IAAIV,EAAgBU,CAAO,EAEhFC,EAAgB,CACpB,eACA,UACA;MACF,EACMC,EAAoB,CAAC,yBAAyB,EAAE,OAAOD,CAAa,EACpEE,EAAgBF,EAAc,IAAIG,GAAKA,EAAE,QAAQ,KAAM,GAAI,CAAC,EAC5DC,EAAoBH,EAAkB,IAAIE,GAAKA,EAAE,QAAQ,KAAM,GAAI,CAAC,EAEpEE,EAAO,MAAOC,EAAeC,EAAgBC,EAAoBC,IAAuB,CAC5F,QAAQ,MAAMH,CAAK,EACnB,QAAQ,IAAI,WAAYE,CAAO,EAC/B,QAAQ,IAAI,QAASD,CAAI,EACzB,QAAQ,IAAI,SAAS,EACrB,MAAMf,EAAOe,CAAI,EACd,YAAYT,EAAa,CACxB,UAAW,CAACU,GAAWA,EAAQ,SAAW,EAC1C,QAAAA,EACA,UAAAC,CACF,CAAC,EAAE,cAAc,CAAC,EACjB,YAAYd,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,CACnB,EAEMa,EAAkB,MAAOC,EAAqBC,IAAqB,CACvE,QAAQ,MAAM,WAAYD,EAAa,QAASC,CAAQ,EAExD,MAAMC,EAAiB,CAAC,EAClBC,EAAmB,CAAC,EAC1B,QAASC,EAAI,EAAGA,EAAIJ,EAAa,EAAEI,EACjCD,EAAO,KAAK,SAASC,EAAI,CAAC,EAAE,EAE9BF,EAAK,KAAKC,EAAO,KAAK,GAAG,CAAC,EAC1B,QAASC,EAAI,EAAGA,EAAIH,EAAU,EAAEG,EAAG,CACjCD,EAAO,OAAS,EAChB,QAASE,EAAI,EAAGA,EAAIL,EAAa,EAAEK,EACjCF,EAAO,KAAK,QAAQC,EAAI,CAAC,IAAIC,EAAI,CAAC,EAAE,EAEtCH,EAAK,KAAKC,EAAO,KAAK,GAAG,CAAC,CAC5B,CAEA,MAAMG,EAAU,IAAI3B,EAEpB,MAAME,EAAOqB,CAAI,EACd,YAAYI,EACV,KAAKnB,EAAa,CAAE,UAAW,EAAK,CAAC,EAAE,cAAc,CAAC,EACtD,MAAM,CAAC,EACT,OAAOD,EAAU,CAAC,EAErB,MAAMqB,EAAOD,EAAQ,OAAO,EAC5B,QAAQ,MAAMC,CAAI,EAElB,QAAQ,SAAS,CACnB,EAEA,QAAQ,MAAM,SAAS,EACvB,MAAMb,EAAK,kBAAmBL,EAAe,CAAC,KAAM,IAAI,CAAC,EACzD,MAAMK,EAAK,sBAAuBJ,CAAiB,EACnD,MAAMI,EAAK,kBAAmBH,EAAe,CAAC,KAAM,IAAI,EAAG,GAAI,EAC/D,MAAMG,EAAK,sBAAuBD,EAAmB,OAAW,GAAI,EACpE,QAAQ,SAAS,EAEjB,MAAMb,EAAM,EAEZ,QAAQ,MAAM,qBAAqB,EACnC,MAAMmB,EAAgB,IAAK,GAAM,EACjC,QAAQ,SAAS,EAEjB,QAAQ,IAAI,iBAAiB",
  "names": ["CsvDeserializer", "SimplePerformanceStreamBuilder", "sleep", "source", "controller", "line", "logging", "chunk", "terminate", "deserializer", "options", "csvHeaderLess", "csvHeaderIncluded", "tsvHeaderLess", "x", "tsvHeaderIncluded", "test", "title", "data", "headers", "delimiter", "testPerformance", "columnCount", "rowCount", "rows", "fields", "i", "j", "builder", "perf"]
}
