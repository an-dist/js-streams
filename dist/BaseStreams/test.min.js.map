{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { BaseDecoder, BaseEncoder, BaseType } from \"./BaseStreams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, JSON.stringify(chunk))\n    controller.enqueue(chunk)\n  }\n})\n\nconst peek = (result: { encoded: string }) => new TransformStream({\n  transform(chunk, controller) {\n    result.encoded += chunk\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = (result: { decoded: string }) => new WritableStream({\n  write(chunk) {\n    result.decoded += chunk\n  }\n})\n\nconst test = async (mode: BaseType) => {\n  console.group(\"Testing:\", mode)\n  console.groupCollapsed(\"Debug info\")\n\n  const result = {\n    encoded: \"\",\n    decoded: \"\",\n  }\n\n  await source(data)\n    .pipeThrough(logging(\"Source :\"))\n    .pipeThrough(new Utf8EncoderStream())\n    .pipeThrough(new BaseEncoder(mode).transformable())\n    .pipeThrough(logging(\"Encoded:\"))\n    .pipeThrough(peek(result))\n    .pipeThrough(new BaseDecoder(mode).transformable())\n    .pipeThrough(new Utf8DecoderStream())\n    .pipeThrough(logging(\"Decoded:\"))\n    .pipeTo(terminate(result))\n\n  console.groupEnd()\n  console.log(\"source:\", data.join(\"\"), \"(\", data.join(\"\").length, \")\")\n  console.log(`${mode}:`, result.encoded, \"(\", result.encoded.length, \")\")\n  console.log(\"decoded:\", result.decoded, \"(\", result.decoded.length, \")\")\n  console.assert(\n    result.decoded === data.join(\"\"),\n    \"data=[\", JSON.stringify(data.join(\"\")), \"](\", data.join(\"\").length, \")\",\n    \"result=[\", JSON.stringify(result.decoded), \"](\", result.decoded.length, \"),\",\n  )\n  console.groupEnd()\n}\n\nconst modes: BaseType[] = [\n  \"base16\",\n  \"base32\",\n  \"base32hex\",\n  \"base64\",\n  \"base64url\",\n]\n\nconst data = [\n  \"Hello, World.\",\n]\n\nfor (const mode of modes) {\n  await test(mode)\n}\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,eAAAA,EAAa,eAAAC,MAA6B,mBACnD,OAAS,qBAAAC,EAAmB,qBAAAC,MAAyB,gCAErD,MAAMC,EAAUC,GAAmB,IAAI,eAAe,CACpD,MAAMC,EAAY,CAChB,UAAWC,KAAKF,EACdC,EAAW,QAAQC,CAAC,EAEtBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAWC,GAAmB,IAAI,gBAAgB,CACtD,UAAUC,EAAOJ,EAAY,CAC3B,QAAQ,IAAIG,EAAQ,KAAK,UAAUC,CAAK,CAAC,EACzCJ,EAAW,QAAQI,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAQC,GAAgC,IAAI,gBAAgB,CAChE,UAAUF,EAAOJ,EAAY,CAC3BM,EAAO,SAAWF,EAClBJ,EAAW,QAAQI,CAAK,CAC1B,CACF,CAAC,EAEKG,EAAaD,GAAgC,IAAI,eAAe,CACpE,MAAMF,EAAO,CACXE,EAAO,SAAWF,CACpB,CACF,CAAC,EAEKI,EAAO,MAAOC,GAAmB,CACrC,QAAQ,MAAM,WAAYA,CAAI,EAC9B,QAAQ,eAAe,YAAY,EAEnC,MAAMH,EAAS,CACb,QAAS,GACT,QAAS,EACX,EAEA,MAAMR,EAAOC,CAAI,EACd,YAAYG,EAAQ,UAAU,CAAC,EAC/B,YAAY,IAAIL,CAAmB,EACnC,YAAY,IAAIF,EAAYc,CAAI,EAAE,cAAc,CAAC,EACjD,YAAYP,EAAQ,UAAU,CAAC,EAC/B,YAAYG,EAAKC,CAAM,CAAC,EACxB,YAAY,IAAIZ,EAAYe,CAAI,EAAE,cAAc,CAAC,EACjD,YAAY,IAAIb,CAAmB,EACnC,YAAYM,EAAQ,UAAU,CAAC,EAC/B,OAAOK,EAAUD,CAAM,CAAC,EAE3B,QAAQ,SAAS,EACjB,QAAQ,IAAI,UAAWP,EAAK,KAAK,EAAE,EAAG,IAAKA,EAAK,KAAK,EAAE,EAAE,OAAQ,GAAG,EACpE,QAAQ,IAAI,GAAGU,CAAI,IAAKH,EAAO,QAAS,IAAKA,EAAO,QAAQ,OAAQ,GAAG,EACvE,QAAQ,IAAI,WAAYA,EAAO,QAAS,IAAKA,EAAO,QAAQ,OAAQ,GAAG,EACvE,QAAQ,OACNA,EAAO,UAAYP,EAAK,KAAK,EAAE,EAC/B,SAAU,KAAK,UAAUA,EAAK,KAAK,EAAE,CAAC,EAAG,KAAMA,EAAK,KAAK,EAAE,EAAE,OAAQ,IACrE,WAAY,KAAK,UAAUO,EAAO,OAAO,EAAG,KAAMA,EAAO,QAAQ,OAAQ,IAC3E,EACA,QAAQ,SAAS,CACnB,EAEMI,EAAoB,CACxB,SACA,SACA,YACA,SACA,WACF,EAEMX,EAAO,CACX,eACF,EAEA,UAAWU,KAAQC,EACjB,MAAMF,EAAKC,CAAI,EAGjB,QAAQ,IAAI,iBAAiB",
  "names": ["BaseDecoder", "BaseEncoder", "Utf8DecoderStream", "Utf8EncoderStream", "source", "data", "controller", "d", "logging", "prefix", "chunk", "peek", "result", "terminate", "test", "mode", "modes"]
}
