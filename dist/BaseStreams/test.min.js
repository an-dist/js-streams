import{BaseDecoder as t,BaseEncoder as d}from"./BaseStreams.min.js";import{Utf8DecoderStream as c,Utf8EncoderStream as a}from"../Utf8Streams/Utf8Streams.min.js";const l=o=>new ReadableStream({start(e){for(const r of o)e.enqueue(r);e.close()}}),s=o=>new TransformStream({transform(e,r){console.log(o,JSON.stringify(e)),r.enqueue(e)}}),g=o=>new TransformStream({transform(e,r){o.encoded+=e,r.enqueue(e)}}),i=o=>new WritableStream({write(e){o.decoded+=e}}),p=async o=>{console.group("Testing:",o),console.groupCollapsed("Debug info");const e={encoded:"",decoded:""};await l(n).pipeThrough(s("Source :")).pipeThrough(new a).pipeThrough(new d(o).transformable()).pipeThrough(s("Encoded:")).pipeThrough(g(e)).pipeThrough(new t(o).transformable()).pipeThrough(new c).pipeThrough(s("Decoded:")).pipeTo(i(e)),console.groupEnd(),console.log("source:",n.join(""),"(",n.join("").length,")"),console.log(`${o}:`,e.encoded,"(",e.encoded.length,")"),console.log("decoded:",e.decoded,"(",e.decoded.length,")"),console.assert(e.decoded===n.join(""),"data=[",JSON.stringify(n.join("")),"](",n.join("").length,")","result=[",JSON.stringify(e.decoded),"](",e.decoded.length,"),"),console.groupEnd()},u=["base16","base32","base32hex","base64","base64url"],n=["Hello, World."];for(const o of u)await p(o);console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
