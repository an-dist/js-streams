import{BaseDecoder as c,BaseEncoder as s}from"./BaseStreams.min.js";import{Utf8DecoderStream as f,Utf8EncoderStream as h}from"../Utf8Streams/Utf8Streams.min.js";import{PerformanceStreamBuilder as l}from"../PerformanceStream/PerformanceStream.min.js";import{sleep as a}from"../funcs/sleep/sleep.min.js";const m=e=>new ReadableStream({start(o){for(const n of e)o.enqueue(n);o.close()}}),b=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),i=e=>new TransformStream({transform(o,n){e.encoded+=o,n.enqueue(o)}}),p=e=>new WritableStream({write(o){typeof e.decoded=="string"?e.decoded+=o:e.decoded=e.decoded.concat([...o])}}),w=async(e,o)=>{console.group("Testing(text):",e);const n={encoded:"",decoded:""};await m(o).pipeThrough(new h).pipeThrough(new s(e).transformable()).pipeThrough(i(n)).pipeThrough(new c(e).transformable()).pipeThrough(new f).pipeTo(p(n)),console.log("source:",o.join(""),"(",o.join("").length,")"),console.log(`${e}:`,n.encoded,"(",n.encoded.length,")"),console.log("decoded:",n.decoded,"(",n.decoded.length,")"),console.assert(n.decoded===o.join(""),"data=[",JSON.stringify(o.join("")),"](",o.join("").length,")","result=[",JSON.stringify(n.decoded),"](",n.decoded.length,"),"),console.groupEnd()},T=async(e,o)=>{console.group("Testing(binary):",e);const n={encoded:"",decoded:[]},t=new l("encode_perf","encode_start","encode_end"),d=new l("decode_perf","decode_start","decode_end");await b(o).pipeThrough(t.pipe(new s(e).transformable()).build()).pipeThrough(i(n)).pipeThrough(d.pipe(new c(e).transformable()).build()).pipeTo(p(n)),console.log("source:","(",o.byteLength,")"),console.log(`${e}:`,"(",n.encoded.length,")"),console.log("decoded:","(",n.decoded.length,")"),console.assert(n.decoded.every((g,u)=>g===o[u]),"data=[",o,"](",o.byteLength,")","result=[",n.decoded,"](",n.decoded.length,"),"),console.group("Encode performance"),console.table(t.result()),console.groupEnd(),console.group("Decode performance"),console.table(d.result()),console.groupEnd(),console.groupEnd()},y=["base16","base32","base32hex","base64","base64url"],S=["Hello, World."],r=new Uint8Array(8192);for(let e=0;e<r.byteLength;++e)r[e]=Math.random()*256;for(const e of y)await w(e,S),await a(),await T(e,r),await a();console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
