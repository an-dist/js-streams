import{BaseDecoder as f,BaseEncoder as h}from"./BaseStreams.min.js";import{Utf8DecoderStream as w,Utf8EncoderStream as T}from"../Utf8Streams/Utf8Streams.min.js";import{PerformanceStreamBuilder as a}from"../PerformanceStream/PerformanceStream.min.js";import{sleep as m}from"../funcs/sleep/sleep.min.js";const y=e=>new ReadableStream({start(o){for(const n of e)o.enqueue(n);o.close()}}),b=(e,o)=>new ReadableStream({start(n){for(let c=0;c<o;++c)n.enqueue(e);n.close()}}),g=e=>new TransformStream({transform(o,n){e.encoded+=o,n.enqueue(o)}}),u=e=>new WritableStream({write(o){typeof e.decoded=="string"?e.decoded+=o:e.decoded=e.decoded.concat([...o])}}),S=async(e,o)=>{console.group("Testing(text):",e);const n={encoded:"",decoded:""};await y(o).pipeThrough(new T).pipeThrough(new h(e).transformable()).pipeThrough(g(n)).pipeThrough(new f(e).transformable()).pipeThrough(new w).pipeTo(u(n)),console.log("source:",o.join(""),"(",o.join("").length,")"),console.log(`${e}:`,n.encoded,"(",n.encoded.length,")"),console.log("decoded:",n.decoded,"(",n.decoded.length,")"),console.assert(n.decoded===o.join(""),"data=[",JSON.stringify(o.join("")),"](",o.join("").length,")","result=[",JSON.stringify(n.decoded),"](",n.decoded.length,"),"),console.groupEnd()},_=async(e,o,n)=>{console.group("Testing(binary):",e,", repeat=",n);const c={encoded:"",decoded:[]},i=new a("encode_perf","encode_start","encode_end"),l=new a("decode_perf","decode_start","decode_end");await b(o,n).pipeThrough(i.pipe(new h(e).transformable()).build()).pipeThrough(g(c)).pipeThrough(l.pipe(new f(e).transformable()).build()).pipeTo(u(c));let r=[];for(let t=0;t<n;++t)r=r.concat([...o]);o=new Uint8Array(r),console.log("source:","(",o.byteLength,")"),console.log(`${e}:`,"(",c.encoded.length,")"),console.log("decoded:","(",c.decoded.length,")"),console.assert(c.decoded.every((t,d)=>t===o[d]),"data=[",o,"](",o.byteLength,")","result=[",c.decoded,"](",c.decoded.length,"),"),console.group("Encode performance"),console.table(i.result()),console.groupEnd(),console.group("Decode performance"),console.table(l.result()),console.groupEnd(),console.groupEnd()},E=async(e,o)=>{console.group("Testing(Builtin base64):",", repeat=",o);const n={encoded:"",decoded:[]},c=new a("encode_perf","encode_start","encode_end"),i=new a("decode_perf","decode_start","decode_end");await b(e,o).pipeThrough(new TransformStream({transform(r,t){let d="";for(let s=0;s<r.byteLength;++s)d+=String.fromCharCode(r[s]);t.enqueue(d)}})).pipeThrough(c.pipe(new TransformStream({transform(r,t){t.enqueue(btoa(r))}})).build()).pipeThrough(g(n)).pipeThrough(i.pipe(new TransformStream({transform(r,t){t.enqueue(atob(r))}})).build()).pipeThrough(new TransformStream({transform(r,t){const d=[];for(let s=0;s<r.length;++s)d.push(r[s].charCodeAt(0));t.enqueue(new Uint8Array(d))}})).pipeTo(u(n));let l=[];for(let r=0;r<o;++r)l=l.concat([...e]);e=new Uint8Array(l),console.log("source:","(",e.byteLength,")"),console.log("base64(builtin):","(",n.encoded.length,")"),console.log("decoded:","(",n.decoded.length,")"),console.assert(n.decoded.every((r,t)=>r===e[t]),"data=[",e,"](",e.byteLength,")","result=[",n.decoded,"](",n.decoded.length,"),"),console.group("Encode performance"),console.table(c.result()),console.groupEnd(),console.group("Decode performance"),console.table(i.result()),console.groupEnd(),console.groupEnd()},q=["base16","base32","base32hex","base64","base64url"],B=["Hello, World."],p=new Uint8Array(8192);for(let e=0;e<p.byteLength;++e)p[e]=Math.random()*255;for(const e of q)await S(e,B),await m(),await _(e,p,3),await m();await E(p,3),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
