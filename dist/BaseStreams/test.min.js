import{BaseDecoder as g,BaseEncoder as u}from"./BaseStreams.min.js";import{Utf8DecoderStream as m,Utf8EncoderStream as b}from"../Utf8Streams/Utf8Streams.min.js";import{PerformanceStreamBuilder as l}from"../PerformanceStream/PerformanceStream.min.js";import{sleep as f}from"../funcs/sleep/sleep.min.js";const w=e=>new ReadableStream({start(o){for(const n of e)o.enqueue(n);o.close()}}),h=e=>new ReadableStream({start(o){o.enqueue(e),o.close()}}),i=e=>new TransformStream({transform(o,n){e.encoded+=o,n.enqueue(o)}}),p=e=>new WritableStream({write(o){typeof e.decoded=="string"?e.decoded+=o:e.decoded=e.decoded.concat([...o])}}),T=async(e,o)=>{console.group("Testing(text):",e);const n={encoded:"",decoded:""};await w(o).pipeThrough(new b).pipeThrough(new u(e).transformable()).pipeThrough(i(n)).pipeThrough(new g(e).transformable()).pipeThrough(new m).pipeTo(p(n)),console.log("source:",o.join(""),"(",o.join("").length,")"),console.log(`${e}:`,n.encoded,"(",n.encoded.length,")"),console.log("decoded:",n.decoded,"(",n.decoded.length,")"),console.assert(n.decoded===o.join(""),"data=[",JSON.stringify(o.join("")),"](",o.join("").length,")","result=[",JSON.stringify(n.decoded),"](",n.decoded.length,"),"),console.groupEnd()},y=async(e,o)=>{console.group("Testing(binary):",e);const n={encoded:"",decoded:[]},s=new l("encode_perf","encode_start","encode_end"),r=new l("decode_perf","decode_start","decode_end");await h(o).pipeThrough(s.pipe(new u(e).transformable()).build()).pipeThrough(i(n)).pipeThrough(r.pipe(new g(e).transformable()).build()).pipeTo(p(n)),console.log("source:","(",o.byteLength,")"),console.log(`${e}:`,"(",n.encoded.length,")"),console.log("decoded:","(",n.decoded.length,")"),console.assert(n.decoded.every((t,d)=>t===o[d]),"data=[",o,"](",o.byteLength,")","result=[",n.decoded,"](",n.decoded.length,"),"),console.group("Encode performance"),console.table(s.result()),console.groupEnd(),console.group("Decode performance"),console.table(r.result()),console.groupEnd(),console.groupEnd()},S=async e=>{console.group("Testing(Builtin base64):");const o={encoded:"",decoded:[]},n=new l("encode_perf","encode_start","encode_end"),s=new l("decode_perf","decode_start","decode_end");await h(e).pipeThrough(new TransformStream({transform(r,t){let d="";for(let c=0;c<r.byteLength;++c)d+=String.fromCharCode(r[c]);t.enqueue(d)}})).pipeThrough(n.pipe(new TransformStream({transform(r,t){t.enqueue(btoa(r))}})).build()).pipeThrough(i(o)).pipeThrough(s.pipe(new TransformStream({transform(r,t){t.enqueue(atob(r))}})).build()).pipeThrough(new TransformStream({transform(r,t){const d=[];for(let c=0;c<r.length;++c)d.push(r[c].charCodeAt(0));t.enqueue(new Uint8Array(d))}})).pipeTo(p(o)),console.log("source:","(",e.byteLength,")"),console.log("base64(builtin):","(",o.encoded.length,")"),console.log("decoded:","(",o.decoded.length,")"),console.assert(o.decoded.every((r,t)=>r===e[t]),"data=[",e,"](",e.byteLength,")","result=[",o.decoded,"](",o.decoded.length,"),"),console.group("Encode performance"),console.table(n.result()),console.groupEnd(),console.group("Decode performance"),console.table(s.result()),console.groupEnd(),console.groupEnd()},_=["base16","base32","base32hex","base64","base64url"],E=["Hello, World."],a=new Uint8Array(8195);for(let e=0;e<a.byteLength;++e)a[e]=Math.random()*255;for(const e of _)await T(e,E),await f(),await y(e,a),await f();await S(a),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
