{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { BaseDecoder, BaseEncoder, BaseType } from \"./BaseStreams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, JSON.stringify(chunk))\n    controller.enqueue(chunk)\n  }\n})\n\nconst peek = (result: { encoded: string }) => new TransformStream({\n  transform(chunk, controller) {\n    result.encoded += chunk\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = (result: { decoded: string }) => new WritableStream({\n  write(chunk) {\n    result.decoded += chunk\n  }\n})\n\nconst test = async (mode: BaseType) => {\n  console.group(\"Testing:\", mode)\n  console.groupCollapsed(\"Debug info\")\n\n  const result = {\n    encoded: \"\",\n    decoded: \"\",\n  }\n\n  await source(data)\n    .pipeThrough(logging(\"Source :\"))\n    .pipeThrough(new Utf8EncoderStream())\n    .pipeThrough(new BaseEncoder(mode).transformable())\n    .pipeThrough(logging(\"Encoded:\"))\n    .pipeThrough(peek(result))\n    .pipeThrough(new BaseDecoder(mode).transformable())\n    .pipeThrough(new Utf8DecoderStream())\n    .pipeThrough(logging(\"Decoded:\"))\n    .pipeTo(terminate(result))\n\n  console.groupEnd()\n  console.log(\"source:\", data.join(\"\"), \"(\", data.join(\"\").length, \")\")\n  console.log(`${mode}:`, result.encoded, \"(\", result.encoded.length, \")\")\n  console.log(\"decoded:\", result.decoded, \"(\", result.decoded.length, \")\")\n  console.assert(\n    result.decoded === data.join(\"\"),\n    \"data=[\", JSON.stringify(data.join(\"\")), \"](\", data.join(\"\").length, \")\",\n    \"result=[\", JSON.stringify(result.decoded), \"](\", result.decoded.length, \"),\",\n  )\n  console.groupEnd()\n}\n\nconst modes: BaseType[] = [\n  \"base16\",\n  \"base32\",\n  \"base32hex\",\n  \"base64\",\n  \"base64url\",\n]\n\nconst data = [\n  \"Hello, World.\",\n]\n\nfor (const mode of modes) {\n  await test(mode)\n}\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,aAAa,mBAA6B;AACnD,SAAS,mBAAmB,yBAAyB;AAErD,MAAM,SAAS,CAACA,UAAmB,IAAI,eAAe;AAAA,EACpD,MAAM,YAAY;AAChB,eAAW,KAAKA,OAAM;AACpB,iBAAW,QAAQ,CAAC;AAAA,IACtB;AACA,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,CAAC,WAAmB,IAAI,gBAAgB;AAAA,EACtD,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,QAAQ,KAAK,UAAU,KAAK,CAAC;AACzC,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,OAAO,CAAC,WAAgC,IAAI,gBAAgB;AAAA,EAChE,UAAU,OAAO,YAAY;AAC3B,WAAO,WAAW;AAClB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,YAAY,CAAC,WAAgC,IAAI,eAAe;AAAA,EACpE,MAAM,OAAO;AACX,WAAO,WAAW;AAAA,EACpB;AACF,CAAC;AAED,MAAM,OAAO,OAAO,SAAmB;AACrC,UAAQ,MAAM,YAAY,IAAI;AAC9B,UAAQ,eAAe,YAAY;AAEnC,QAAM,SAAS;AAAA,IACb,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAEA,QAAM,OAAO,IAAI,EACd,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,IAAI,YAAY,IAAI,EAAE,cAAc,CAAC,EACjD,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,KAAK,MAAM,CAAC,EACxB,YAAY,IAAI,YAAY,IAAI,EAAE,cAAc,CAAC,EACjD,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,QAAQ,UAAU,CAAC,EAC/B,OAAO,UAAU,MAAM,CAAC;AAE3B,UAAQ,SAAS;AACjB,UAAQ,IAAI,WAAW,KAAK,KAAK,EAAE,GAAG,KAAK,KAAK,KAAK,EAAE,EAAE,QAAQ,GAAG;AACpE,UAAQ,IAAI,GAAG,IAAI,KAAK,OAAO,SAAS,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACvE,UAAQ,IAAI,YAAY,OAAO,SAAS,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACvE,UAAQ;AAAA,IACN,OAAO,YAAY,KAAK,KAAK,EAAE;AAAA,IAC/B;AAAA,IAAU,KAAK,UAAU,KAAK,KAAK,EAAE,CAAC;AAAA,IAAG;AAAA,IAAM,KAAK,KAAK,EAAE,EAAE;AAAA,IAAQ;AAAA,IACrE;AAAA,IAAY,KAAK,UAAU,OAAO,OAAO;AAAA,IAAG;AAAA,IAAM,OAAO,QAAQ;AAAA,IAAQ;AAAA,EAC3E;AACA,UAAQ,SAAS;AACnB;AAEA,MAAM,QAAoB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,OAAO;AAAA,EACX;AACF;AAEA,WAAW,QAAQ,OAAO;AACxB,QAAM,KAAK,IAAI;AACjB;AAEA,QAAQ,IAAI,iBAAiB;",
  "names": ["data"]
}
