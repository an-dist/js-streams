{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { BaseDecoder, BaseEncoder, BaseType } from \"./BaseStreams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\nimport { PerformanceStreamBuilder } from \"../PerformanceStream/PerformanceStream.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst textSource = (data: string[]) => new ReadableStream<string>({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst binarySource = (data: Uint8Array) => new ReadableStream<Uint8Array>({\n  start(controller) {\n    controller.enqueue(data)\n    controller.close()\n  }\n})\n\nconst peek = (result: { encoded: string }) => new TransformStream({\n  transform(chunk, controller) {\n    result.encoded += chunk\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = (result: { decoded: string | Array<number> }) => new WritableStream({\n  write(chunk) {\n    if (typeof result.decoded === \"string\") {\n      result.decoded += chunk\n    }\n    else {\n      result.decoded = result.decoded.concat([...chunk])\n    }\n  }\n})\n\nconst testText = async (mode: BaseType, data: string[]) => {\n  console.group(\"Testing(text):\", mode)\n\n  const result = {\n    encoded: \"\",\n    decoded: \"\",\n  }\n\n  await textSource(data)\n    .pipeThrough(new Utf8EncoderStream())\n    .pipeThrough(new BaseEncoder(mode).transformable())\n    .pipeThrough(peek(result))\n    .pipeThrough(new BaseDecoder(mode).transformable())\n    .pipeThrough(new Utf8DecoderStream())\n    .pipeTo(terminate(result))\n\n  console.log(\"source:\", data.join(\"\"), \"(\", data.join(\"\").length, \")\")\n  console.log(`${mode}:`, result.encoded, \"(\", result.encoded.length, \")\")\n  console.log(\"decoded:\", result.decoded, \"(\", result.decoded.length, \")\")\n  console.assert(\n    result.decoded === data.join(\"\"),\n    \"data=[\", JSON.stringify(data.join(\"\")), \"](\", data.join(\"\").length, \")\",\n    \"result=[\", JSON.stringify(result.decoded), \"](\", result.decoded.length, \"),\",\n  )\n  console.groupEnd()\n}\n\nconst testBinary = async (mode: BaseType, data: Uint8Array) => {\n  console.group(\"Testing(binary):\", mode)\n\n  const result = {\n    encoded: \"\",\n    decoded: [],\n  }\n\n  const encodePerf = new PerformanceStreamBuilder(\"encode_perf\", \"encode_start\", \"encode_end\")\n  const decodePerf = new PerformanceStreamBuilder(\"decode_perf\", \"decode_start\", \"decode_end\")\n\n  await binarySource(data)\n    .pipeThrough(encodePerf.pipe(new BaseEncoder(mode).transformable()).build())\n    .pipeThrough(peek(result))\n    .pipeThrough(decodePerf.pipe(new BaseDecoder(mode).transformable()).build())\n    .pipeTo(terminate(result))\n\n  console.log(\"source:\", \"(\", data.byteLength, \")\")\n  console.log(`${mode}:`, \"(\", result.encoded.length, \")\")\n  console.log(\"decoded:\", \"(\", result.decoded.length, \")\")\n  console.assert(\n    result.decoded.every((x, i) => x === data[i]),\n    \"data=[\", data, \"](\", data.byteLength, \")\",\n    \"result=[\", result.decoded, \"](\", result.decoded.length, \"),\",\n  )\n\n  console.group(\"Encode performance\")\n  console.table(encodePerf.result())\n  console.groupEnd()\n  console.group(\"Decode performance\")\n  console.table(decodePerf.result())\n  console.groupEnd()\n\n  console.groupEnd()\n}\n\nconst testBuiltinBase64 = async (data: Uint8Array) => {\n  console.group(\"Testing(Builtin base64):\")\n\n  const result = {\n    encoded: \"\",\n    decoded: [],\n  }\n\n  const encodePerf = new PerformanceStreamBuilder(\"encode_perf\", \"encode_start\", \"encode_end\")\n  const decodePerf = new PerformanceStreamBuilder(\"decode_perf\", \"decode_start\", \"decode_end\")\n\n  await binarySource(data)\n    .pipeThrough(new TransformStream<Uint8Array, string>({\n      transform(chunk, controller) {\n        let s = \"\"\n        for (let i = 0; i < chunk.byteLength; ++i) {\n          s += String.fromCharCode(chunk[i])\n        }\n        controller.enqueue(s)\n      }\n    }))\n    .pipeThrough(encodePerf.pipe(new TransformStream<string, string>({\n      transform(chunk, controller) {\n        controller.enqueue(btoa(chunk))\n      }\n    })).build())\n    .pipeThrough(peek(result))\n    .pipeThrough(decodePerf.pipe(new TransformStream<string, string>({\n      transform(chunk, controller) {\n        controller.enqueue(atob(chunk))\n      }\n    })).build())\n    .pipeThrough(new TransformStream<string, Uint8Array>({\n      transform(chunk, controller) {\n        const buffer: number[] = []\n        for (let i = 0; i < chunk.length; ++i) {\n          buffer.push(chunk[i].charCodeAt(0))\n        }\n        controller.enqueue(new Uint8Array(buffer))\n      }\n    }))\n    .pipeTo(terminate(result))\n\n  console.log(\"source:\", \"(\", data.byteLength, \")\")\n  console.log(\"base64(builtin):\", \"(\", result.encoded.length, \")\")\n  console.log(\"decoded:\", \"(\", result.decoded.length, \")\")\n  console.assert(\n    result.decoded.every((x, i) => x === data[i]),\n    \"data=[\", data, \"](\", data.byteLength, \")\",\n    \"result=[\", result.decoded, \"](\", result.decoded.length, \"),\",\n  )\n\n  console.group(\"Encode performance\")\n  console.table(encodePerf.result())\n  console.groupEnd()\n  console.group(\"Decode performance\")\n  console.table(decodePerf.result())\n  console.groupEnd()\n\n  console.groupEnd()\n}\n\nconst modes: BaseType[] = [\n  \"base16\",\n  \"base32\",\n  \"base32hex\",\n  \"base64\",\n  \"base64url\",\n]\n\nconst stringData = [\n  \"Hello, World.\",\n]\n\nconst binaryData = new Uint8Array(8192 + 3)\nfor (let i = 0; i < binaryData.byteLength; ++i) {\n  binaryData[i] = Math.random() * 0xff\n}\n\nfor (const mode of modes) {\n  await testText(mode, stringData)\n  await sleep()\n  await testBinary(mode, binaryData)\n  await sleep()\n}\nawait testBuiltinBase64(binaryData)\n\nconsole.log(\"Test completed.\")"],
  "mappings": "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",
  "names": []
}
