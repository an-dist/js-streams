{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Base64DecoderStream, Base64EncoderStream } from \"./Base64Streams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst data = [\n  \"hello\",\n  \",\",\n  \"world\",\n  \".\",\n]\n\nawait source(data)\n  .pipeThrough(logging(\"Source :\"))\n  .pipeThrough(new Utf8EncoderStream())\n  .pipeThrough(new Base64EncoderStream())\n  .pipeThrough(logging(\"Encoded:\"))\n  .pipeThrough(new Base64DecoderStream())\n  .pipeThrough(new Utf8DecoderStream())\n  .pipeThrough(logging(\"Decoded:\"))\n  .pipeTo(terminate())\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,uBAAAA,EAAqB,uBAAAC,MAA2B,qBACzD,OAAS,qBAAAC,EAAmB,qBAAAC,MAAyB,gCAErD,MAAMC,EAAUC,GAAmB,IAAI,eAAe,CACpD,MAAMC,EAAY,CAChB,UAAWC,KAAKF,EACdC,EAAW,QAAQC,CAAC,EAEtBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAWC,GAAmB,IAAI,gBAAgB,CACtD,UAAUC,EAAOJ,EAAY,CAC3B,QAAQ,IAAIG,EAAQC,CAAK,EACzBJ,EAAW,QAAQI,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBN,EAAO,CACX,QACA,IACA,QACA,GACF,EAEA,MAAMD,EAAOC,CAAI,EACd,YAAYG,EAAQ,UAAU,CAAC,EAC/B,YAAY,IAAIL,CAAmB,EACnC,YAAY,IAAIF,CAAqB,EACrC,YAAYO,EAAQ,UAAU,CAAC,EAC/B,YAAY,IAAIR,CAAqB,EACrC,YAAY,IAAIE,CAAmB,EACnC,YAAYM,EAAQ,UAAU,CAAC,EAC/B,OAAOG,EAAU,CAAC,EAErB,QAAQ,IAAI,iBAAiB",
  "names": ["Base64DecoderStream", "Base64EncoderStream", "Utf8DecoderStream", "Utf8EncoderStream", "source", "data", "controller", "d", "logging", "prefix", "chunk", "terminate"]
}
