{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Base64Decoder, Base64Encoder } from \"./Base64Streams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, JSON.stringify(chunk))\n    controller.enqueue(chunk)\n  }\n})\n\nconst result = {\n  encoded: \"\",\n  decoded: \"\",\n}\n\nconst peek = (result: { encoded: string }) => new TransformStream({\n  transform(chunk, controller) {\n    result.encoded += chunk\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = (result: { decoded: string }) => new WritableStream({\n  write(chunk) {\n    result.decoded += chunk\n  }\n})\n\nconst data = [\n  \"hello\",\n  \",\",\n  \"world\",\n  \".!\",\n]\n\nawait source(data)\n  .pipeThrough(logging(\"Source :\"))\n  .pipeThrough(new Utf8EncoderStream())\n  .pipeThrough(new Base64Encoder().transformable())\n  .pipeThrough(logging(\"Encoded:\"))\n  .pipeThrough(peek(result))\n  .pipeThrough(new Base64Decoder().transformable())\n  .pipeThrough(new Utf8DecoderStream())\n  .pipeThrough(logging(\"Decoded:\"))\n  .pipeTo(terminate(result))\n\nconsole.assert(\n  result.decoded === data.join(\"\"),\n  \"data=[\", JSON.stringify(data.join(\"\")), \"](\", data.join(\"\").length, \")\",\n  \"result=[\", JSON.stringify(result.decoded), \"](\", result.decoded.length, \"),\",\n)\nconsole.log(\"Base64:\", result.encoded, \"(\", result.encoded.length, \")\")\nconsole.log(\"Result:\", result.decoded, \"(\", result.decoded.length, \")\")\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,OAAS,iBAAAA,EAAe,iBAAAC,MAAqB,qBAC7C,OAAS,qBAAAC,EAAmB,qBAAAC,MAAyB,gCAErD,MAAMC,EAAUC,GAAmB,IAAI,eAAe,CACpD,MAAMC,EAAY,CAChB,UAAWC,KAAKF,EACdC,EAAW,QAAQC,CAAC,EAEtBD,EAAW,MAAM,CACnB,CACF,CAAC,EAEKE,EAAWC,GAAmB,IAAI,gBAAgB,CACtD,UAAUC,EAAOJ,EAAY,CAC3B,QAAQ,IAAIG,EAAQ,KAAK,UAAUC,CAAK,CAAC,EACzCJ,EAAW,QAAQI,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAS,CACb,QAAS,GACT,QAAS,EACX,EAEMC,EAAQD,GAAgC,IAAI,gBAAgB,CAChE,UAAUD,EAAOJ,EAAY,CAC3BK,EAAO,SAAWD,EAClBJ,EAAW,QAAQI,CAAK,CAC1B,CACF,CAAC,EAEKG,EAAaF,GAAgC,IAAI,eAAe,CACpE,MAAMD,EAAO,CACXC,EAAO,SAAWD,CACpB,CACF,CAAC,EAEKL,EAAO,CACX,QACA,IACA,QACA,IACF,EAEA,MAAMD,EAAOC,CAAI,EACd,YAAYG,EAAQ,UAAU,CAAC,EAC/B,YAAY,IAAIL,CAAmB,EACnC,YAAY,IAAIF,EAAc,EAAE,cAAc,CAAC,EAC/C,YAAYO,EAAQ,UAAU,CAAC,EAC/B,YAAYI,EAAKD,CAAM,CAAC,EACxB,YAAY,IAAIX,EAAc,EAAE,cAAc,CAAC,EAC/C,YAAY,IAAIE,CAAmB,EACnC,YAAYM,EAAQ,UAAU,CAAC,EAC/B,OAAOK,EAAUF,CAAM,CAAC,EAE3B,QAAQ,OACNA,EAAO,UAAYN,EAAK,KAAK,EAAE,EAC/B,SAAU,KAAK,UAAUA,EAAK,KAAK,EAAE,CAAC,EAAG,KAAMA,EAAK,KAAK,EAAE,EAAE,OAAQ,IACrE,WAAY,KAAK,UAAUM,EAAO,OAAO,EAAG,KAAMA,EAAO,QAAQ,OAAQ,IAC3E,EACA,QAAQ,IAAI,UAAWA,EAAO,QAAS,IAAKA,EAAO,QAAQ,OAAQ,GAAG,EACtE,QAAQ,IAAI,UAAWA,EAAO,QAAS,IAAKA,EAAO,QAAQ,OAAQ,GAAG,EAEtE,QAAQ,IAAI,iBAAiB",
  "names": ["Base64Decoder", "Base64Encoder", "Utf8DecoderStream", "Utf8EncoderStream", "source", "data", "controller", "d", "logging", "prefix", "chunk", "result", "peek", "terminate"]
}
