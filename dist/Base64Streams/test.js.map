{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Base64DecoderStream, Base64EncoderStream } from \"./Base64Streams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst data = [\n  \"hello\",\n  \",\",\n  \"world\",\n  \".\",\n]\n\nawait source(data)\n  .pipeThrough(logging(\"Source :\"))\n  .pipeThrough(new Utf8EncoderStream())\n  .pipeThrough(new Base64EncoderStream())\n  .pipeThrough(logging(\"Encoded:\"))\n  .pipeThrough(new Base64DecoderStream())\n  .pipeThrough(new Utf8DecoderStream())\n  .pipeThrough(logging(\"Decoded:\"))\n  .pipeTo(terminate())\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,qBAAqB,2BAA2B;AACzD,SAAS,mBAAmB,yBAAyB;AAErD,MAAM,SAAS,CAACA,UAAmB,IAAI,eAAe;AAAA,EACpD,MAAM,YAAY;AAChB,eAAW,KAAKA,OAAM;AACpB,iBAAW,QAAQ,CAAC;AAAA,IACtB;AACA,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,CAAC,WAAmB,IAAI,gBAAgB;AAAA,EACtD,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,QAAQ,KAAK;AACzB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,YAAY,MAAM,IAAI,eAAe;AAE3C,MAAM,OAAO;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,OAAO,IAAI,EACd,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,IAAI,oBAAoB,CAAC,EACrC,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,IAAI,oBAAoB,CAAC,EACrC,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,QAAQ,UAAU,CAAC,EAC/B,OAAO,UAAU,CAAC;AAErB,QAAQ,IAAI,iBAAiB;",
  "names": ["data"]
}
