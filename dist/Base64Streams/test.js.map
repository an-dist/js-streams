{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Base64Decoder, Base64Encoder } from \"./Base64Streams.ts\"\nimport { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams/Utf8Streams.ts\"\n\nconst source = (data: string[]) => new ReadableStream({\n  start(controller) {\n    for (const d of data) {\n      controller.enqueue(d)\n    }\n    controller.close()\n  }\n})\n\nconst logging = (prefix: string) => new TransformStream({\n  transform(chunk, controller) {\n    console.log(prefix, JSON.stringify(chunk))\n    controller.enqueue(chunk)\n  }\n})\n\nconst result = {\n  encoded: \"\",\n  decoded: \"\",\n}\n\nconst peek = (result: { encoded: string }) => new TransformStream({\n  transform(chunk, controller) {\n    result.encoded += chunk\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = (result: { decoded: string }) => new WritableStream({\n  write(chunk) {\n    result.decoded += chunk\n  }\n})\n\nconst data = [\n  \"hello\",\n  \",\",\n  \"world\",\n  \".!\",\n]\n\nawait source(data)\n  .pipeThrough(logging(\"Source :\"))\n  .pipeThrough(new Utf8EncoderStream())\n  .pipeThrough(new Base64Encoder().transformable())\n  .pipeThrough(logging(\"Encoded:\"))\n  .pipeThrough(peek(result))\n  .pipeThrough(new Base64Decoder().transformable())\n  .pipeThrough(new Utf8DecoderStream())\n  .pipeThrough(logging(\"Decoded:\"))\n  .pipeTo(terminate(result))\n\nconsole.assert(\n  result.decoded === data.join(\"\"),\n  \"data=[\", JSON.stringify(data.join(\"\")), \"](\", data.join(\"\").length, \")\",\n  \"result=[\", JSON.stringify(result.decoded), \"](\", result.decoded.length, \"),\",\n)\nconsole.log(\"Base64:\", result.encoded, \"(\", result.encoded.length, \")\")\nconsole.log(\"Result:\", result.decoded, \"(\", result.decoded.length, \")\")\n\nconsole.log(\"Test completed.\")"],
  "mappings": "AAAA,SAAS,eAAe,qBAAqB;AAC7C,SAAS,mBAAmB,yBAAyB;AAErD,MAAM,SAAS,CAACA,UAAmB,IAAI,eAAe;AAAA,EACpD,MAAM,YAAY;AAChB,eAAW,KAAKA,OAAM;AACpB,iBAAW,QAAQ,CAAC;AAAA,IACtB;AACA,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,CAAC,WAAmB,IAAI,gBAAgB;AAAA,EACtD,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,QAAQ,KAAK,UAAU,KAAK,CAAC;AACzC,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,SAAS;AAAA,EACb,SAAS;AAAA,EACT,SAAS;AACX;AAEA,MAAM,OAAO,CAACC,YAAgC,IAAI,gBAAgB;AAAA,EAChE,UAAU,OAAO,YAAY;AAC3B,IAAAA,QAAO,WAAW;AAClB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,YAAY,CAACA,YAAgC,IAAI,eAAe;AAAA,EACpE,MAAM,OAAO;AACX,IAAAA,QAAO,WAAW;AAAA,EACpB;AACF,CAAC;AAED,MAAM,OAAO;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,OAAO,IAAI,EACd,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,IAAI,cAAc,EAAE,cAAc,CAAC,EAC/C,YAAY,QAAQ,UAAU,CAAC,EAC/B,YAAY,KAAK,MAAM,CAAC,EACxB,YAAY,IAAI,cAAc,EAAE,cAAc,CAAC,EAC/C,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,QAAQ,UAAU,CAAC,EAC/B,OAAO,UAAU,MAAM,CAAC;AAE3B,QAAQ;AAAA,EACN,OAAO,YAAY,KAAK,KAAK,EAAE;AAAA,EAC/B;AAAA,EAAU,KAAK,UAAU,KAAK,KAAK,EAAE,CAAC;AAAA,EAAG;AAAA,EAAM,KAAK,KAAK,EAAE,EAAE;AAAA,EAAQ;AAAA,EACrE;AAAA,EAAY,KAAK,UAAU,OAAO,OAAO;AAAA,EAAG;AAAA,EAAM,OAAO,QAAQ;AAAA,EAAQ;AAC3E;AACA,QAAQ,IAAI,WAAW,OAAO,SAAS,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACtE,QAAQ,IAAI,WAAW,OAAO,SAAS,KAAK,OAAO,QAAQ,QAAQ,GAAG;AAEtE,QAAQ,IAAI,iBAAiB;",
  "names": ["data", "result"]
}
