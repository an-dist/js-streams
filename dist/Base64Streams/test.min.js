import{Base64Decoder as s,Base64Encoder as c}from"./Base64Streams.min.js";import{Utf8DecoderStream as a,Utf8EncoderStream as i}from"../Utf8Streams/Utf8Streams.min.js";const l=r=>new ReadableStream({start(e){for(const n of r)e.enqueue(n);e.close()}}),t=r=>new TransformStream({transform(e,n){console.log(r,JSON.stringify(e)),n.enqueue(e)}}),o={encoded:"",decoded:""},g=r=>new TransformStream({transform(e,n){r.encoded+=e,n.enqueue(e)}}),p=r=>new WritableStream({write(e){r.decoded+=e}}),d=["hello",",","world",".!"];await l(d).pipeThrough(t("Source :")).pipeThrough(new i).pipeThrough(new c().transformable()).pipeThrough(t("Encoded:")).pipeThrough(g(o)).pipeThrough(new s().transformable()).pipeThrough(new a).pipeThrough(t("Decoded:")).pipeTo(p(o)),console.assert(o.decoded===d.join(""),"data=[",JSON.stringify(d.join("")),"](",d.join("").length,")","result=[",JSON.stringify(o.decoded),"](",o.decoded.length,"),"),console.log("Base64:",o.encoded,"(",o.encoded.length,")"),console.log("Result:",o.decoded,"(",o.decoded.length,")"),console.log("Test completed.");
//# sourceMappingURL=test.min.js.map
