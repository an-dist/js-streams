{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvLineEncoder } from \"./CsvLineEncoder.ts\"\nimport { sleep } from \"../funcs/sleep/sleep.ts\"\n\nconst source = (data: any[]) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(data)\n    controller.close()\n  }\n})\n\nconst logging = () => new TransformStream({\n  transform(chunk, controller) {\n    console.log(chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst data = [\n  { \"a\": 1, \"b\": 2, \"c\": \"aaa\\nbbb,ccc\" },\n  { \"a\": 4, \"b\": 5, \"c\": 6 },\n  { \"a\": 7, \"b\": 8, \"c\": 9 },\n  { \"c1\": \"a\", \"c2\": \"b\", \"c3\": \"c\", \"c4\": \"d\" },\n]\n\nconsole.group(\"=== escape: all ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"all\" }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: auto ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"auto\" }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: none ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"none\" }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: s => `[${s}]` }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== delimiter: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ delimiter: \"|\" }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== newLine: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ newLine: \"|\" }).transformable())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== no new line ===\")\nlet text = \"\"\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ withNewLine: false }).transformable())\n  .pipeTo(new WritableStream({\n    write(chunk) {\n      text += chunk\n    }\n  }))\nconsole.log(text)\nconsole.groupEnd()\n\nawait sleep()\n\nconsole.group(\"Performance test\")\n{\n  const count = 100000\n  console.log(\"count\", count)\n\n  const array = []\n  for (let i = 0; i < count; ++i) {\n    array.push(`{ \"a\": ${i + 1}, \"b\": ${i + 2}, \"c\": \"aaa\\nbbb,ccc\" }`)\n  }\n\n  performance.mark(\"start\")\n\n  await source(array)\n    .pipeThrough(new CsvLineEncoder().transformable())\n    .pipeTo(terminate())\n\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(\"duration: \", perf.duration)\n}\nconsole.groupEnd()\n\nconsole.log(\"\\nTest completed.\")"],
  "mappings": "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",
  "names": ["data"]
}
