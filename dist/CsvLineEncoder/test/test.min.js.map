{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvLineEncoder } from \"../CsvLineEncoder.ts\"\r\n\r\nconst source = (data: any[]) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(data)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = () => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst terminate = () => new WritableStream()\r\n\r\nconst data = [\r\n  { \"a\": 1, \"b\": 2, \"c\": \"aaa\\nbbb,ccc\" },\r\n  { \"a\": 4, \"b\": 5, \"c\": 6 },\r\n  { \"a\": 7, \"b\": 8, \"c\": 9 },\r\n  { \"c1\": \"a\", \"c2\": \"b\", \"c3\": \"c\", \"c4\": \"d\" },\r\n]\r\n\r\nconsole.groupCollapsed(\"=== escape: all ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"all\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: auto ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"auto\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: none ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"none\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: s => `[${s}]` }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== delimiter: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ delimiter: \"|\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== newLine: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ newLine: \"|\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"\\n=== no new line ===\")\r\nlet text = \"\"\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ withNewLine: false }).transform())\r\n  .pipeTo(new WritableStream({\r\n    write(chunk) {\r\n      text += chunk\r\n    }\r\n  }))\r\nconsole.log(text)\r\nconsole.groupEnd()\r\n\r\nconsole.log(\"\\nTest completed.\")"],
  "mappings": "AAAA,OAAS,kBAAAA,MAAsB,uBAE/B,MAAMC,EAAUC,GAAgB,IAAI,eAAe,CACjD,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAI,EACvBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAU,IAAM,IAAI,gBAAgB,CACxC,UAAUC,EAAOF,EAAY,CAC3B,QAAQ,IAAIE,CAAK,EACjBF,EAAW,QAAQE,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAY,IAAM,IAAI,eAEtBJ,EAAO,CACX,CAAE,EAAK,EAAG,EAAK,EAAG,EAAK;AAAA,QAAe,EACtC,CAAE,EAAK,EAAG,EAAK,EAAG,EAAK,CAAE,EACzB,CAAE,EAAK,EAAG,EAAK,EAAG,EAAK,CAAE,EACzB,CAAE,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,CAC/C,EAEA,QAAQ,eAAe,qBAAqB,EAC5C,MAAMD,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,OAAQ,KAAM,CAAC,EAAE,UAAU,CAAC,EAC7D,YAAYI,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe,sBAAsB,EAC7C,MAAML,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,OAAQ,MAAO,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAYI,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe,sBAAsB,EAC7C,MAAML,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,OAAQ,MAAO,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAYI,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe,wBAAwB,EAC/C,MAAML,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,OAAQO,GAAK,IAAIA,CAAC,GAAI,CAAC,EAAE,UAAU,CAAC,EACrE,YAAYH,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe,2BAA2B,EAClD,MAAML,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,UAAW,GAAI,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAYI,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe,yBAAyB,EAChD,MAAML,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,QAAS,GAAI,CAAC,EAAE,UAAU,CAAC,EAC5D,YAAYI,EAAQ,CAAC,EACrB,OAAOE,EAAU,CAAC,EACrB,QAAQ,SAAS,EAEjB,QAAQ,eAAe;AAAA,oBAAuB,EAC9C,IAAIE,EAAO,GACX,MAAMP,EAAOC,CAAI,EACd,YAAY,IAAIF,EAAe,CAAE,YAAa,EAAM,CAAC,EAAE,UAAU,CAAC,EAClE,OAAO,IAAI,eAAe,CACzB,MAAMK,EAAO,CACXG,GAAQH,CACV,CACF,CAAC,CAAC,EACJ,QAAQ,IAAIG,CAAI,EAChB,QAAQ,SAAS,EAEjB,QAAQ,IAAI;AAAA,gBAAmB",
  "names": ["CsvLineEncoder", "source", "data", "controller", "logging", "chunk", "terminate", "s", "text"]
}
