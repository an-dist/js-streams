{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvLineEncoder } from \"../CsvLineEncoder.ts\"\r\n\r\nconst source = (data: any[]) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(data)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = () => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst terminate = () => new WritableStream()\r\n\r\nconst data = [\r\n  { \"a\": 1, \"b\": 2, \"c\": \"aaa\\nbbb,ccc\" },\r\n  { \"a\": 4, \"b\": 5, \"c\": 6 },\r\n  { \"a\": 7, \"b\": 8, \"c\": 9 },\r\n  { \"c1\": \"a\", \"c2\": \"b\", \"c3\": \"c\", \"c4\": \"d\" },\r\n]\r\n\r\nconsole.groupCollapsed(\"=== escape: all ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"all\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: auto ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"auto\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: none ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: \"none\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== escape: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ escape: s => `[${s}]` }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== delimiter: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ delimiter: \"|\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"=== newLine: custom ===\")\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ newLine: \"|\" }).transform())\r\n  .pipeThrough(logging())\r\n  .pipeTo(terminate())\r\nconsole.groupEnd()\r\n\r\nconsole.groupCollapsed(\"\\n=== no new line ===\")\r\nlet text = \"\"\r\nawait source(data)\r\n  .pipeThrough(new CsvLineEncoder({ withNewLine: false }).transform())\r\n  .pipeTo(new WritableStream({\r\n    write(chunk) {\r\n      text += chunk\r\n    }\r\n  }))\r\nconsole.log(text)\r\nconsole.groupEnd()\r\n\r\nconsole.log(\"\\nTest completed.\")"],
  "mappings": "AAAA,SAAS,sBAAsB;AAE/B,MAAM,SAAS,CAACA,UAAgB,IAAI,eAAe;AAAA,EACjD,MAAM,YAAY;AAChB,eAAW,QAAQA,KAAI;AACvB,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,MAAM,IAAI,gBAAgB;AAAA,EACxC,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,KAAK;AACjB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,YAAY,MAAM,IAAI,eAAe;AAE3C,MAAM,OAAO;AAAA,EACX,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,eAAe;AAAA,EACtC,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE;AAAA,EACzB,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE;AAAA,EACzB,EAAE,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI;AAC/C;AAEA,QAAQ,eAAe,qBAAqB;AAC5C,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,QAAQ,MAAM,CAAC,EAAE,UAAU,CAAC,EAC7D,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,sBAAsB;AAC7C,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,QAAQ,OAAO,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,sBAAsB;AAC7C,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,QAAQ,OAAO,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,wBAAwB;AAC/C,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,QAAQ,OAAK,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,EACrE,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,2BAA2B;AAClD,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,WAAW,IAAI,CAAC,EAAE,UAAU,CAAC,EAC9D,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,yBAAyB;AAChD,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,SAAS,IAAI,CAAC,EAAE,UAAU,CAAC,EAC5D,YAAY,QAAQ,CAAC,EACrB,OAAO,UAAU,CAAC;AACrB,QAAQ,SAAS;AAEjB,QAAQ,eAAe,uBAAuB;AAC9C,IAAI,OAAO;AACX,MAAM,OAAO,IAAI,EACd,YAAY,IAAI,eAAe,EAAE,aAAa,MAAM,CAAC,EAAE,UAAU,CAAC,EAClE,OAAO,IAAI,eAAe;AAAA,EACzB,MAAM,OAAO;AACX,YAAQ;AAAA,EACV;AACF,CAAC,CAAC;AACJ,QAAQ,IAAI,IAAI;AAChB,QAAQ,SAAS;AAEjB,QAAQ,IAAI,mBAAmB;",
  "names": ["data"]
}
