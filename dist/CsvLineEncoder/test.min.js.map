{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { CsvLineEncoder } from \"./CsvLineEncoder.ts\"\n\nconst source = (data: any[]) => new ReadableStream({\n  start(controller) {\n    controller.enqueue(data)\n    controller.close()\n  }\n})\n\nconst logging = () => new TransformStream({\n  transform(chunk, controller) {\n    console.log(chunk)\n    controller.enqueue(chunk)\n  }\n})\n\nconst terminate = () => new WritableStream()\n\nconst data = [\n  { \"a\": 1, \"b\": 2, \"c\": \"aaa\\nbbb,ccc\" },\n  { \"a\": 4, \"b\": 5, \"c\": 6 },\n  { \"a\": 7, \"b\": 8, \"c\": 9 },\n  { \"c1\": \"a\", \"c2\": \"b\", \"c3\": \"c\", \"c4\": \"d\" },\n]\n\nconsole.group(\"=== escape: all ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"all\" }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: auto ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"auto\" }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: none ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: \"none\" }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== escape: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ escape: s => `[${s}]` }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== delimiter: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ delimiter: \"|\" }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== newLine: custom ===\")\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ newLine: \"|\" }).transform())\n  .pipeThrough(logging())\n  .pipeTo(terminate())\nconsole.groupEnd()\n\nconsole.group(\"=== no new line ===\")\nlet text = \"\"\nawait source(data)\n  .pipeThrough(new CsvLineEncoder({ withNewLine: false }).transform())\n  .pipeTo(new WritableStream({\n    write(chunk) {\n      text += chunk\n    }\n  }))\nconsole.log(text)\nconsole.groupEnd()\n\nconsole.group(\"Performance test\")\n{\n  const count = 100000\n  console.log(\"count\", count)\n\n  const array = []\n  for (let i = 0; i < count; ++i) {\n    array.push(`{ \"a\": ${i + 1}, \"b\": ${i + 2}, \"c\": \"aaa\\nbbb,ccc\" }`)\n  }\n\n  performance.mark(\"start\")\n\n  await source(array)\n    .pipeThrough(new CsvLineEncoder().transform())\n    .pipeTo(terminate())\n\n  performance.mark(\"end\")\n  performance.measure(\"perf\", \"start\", \"end\")\n  const perf = performance.getEntriesByName(\"perf\")[0]\n  console.log(\"duration: \", perf.duration)\n}\nconsole.groupEnd()\n\nconsole.log(\"\\nTest completed.\")"],
  "mappings": "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",
  "names": ["CsvLineEncoder", "source", "data", "controller", "logging", "chunk", "terminate", "s", "text", "array", "i", "perf"]
}
