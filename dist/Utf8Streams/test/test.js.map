{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams.ts\"\n\n(async () => {\n\n  const source = (s?: string) => new ReadableStream({\n    start(controller) {\n      controller.enqueue(s)\n      controller.close()\n    }\n  })\n\n  const logging = (label: string) => new TransformStream({\n    transform(chunk, controller) {\n      console.log(label, chunk)\n      controller.enqueue(chunk)\n    }\n  })\n\n  const result = (r: { s: string | undefined | null }) => new WritableStream({\n    write(chunk) {\n      r.s = chunk\n    }\n  })\n\n  const testBuiltin = () => {\n    console.group(\"Builtin\")\n\n    console.log(\"TextEncoderStream\", \"TextEncoderStream\" in globalThis)\n    console.log(\"TextEncoderStream\", \"TextDecoderStream\" in globalThis)\n\n    console.groupEnd()\n  }\n\n  const testProps = () => {\n    console.group(\"Properties\")\n\n    const encoder = new Utf8EncoderStream()\n    console.log(\"Utf8EncoderStream\", {\n      encoding: encoder.encoding,\n    })\n\n    const decoder = new Utf8DecoderStream()\n    console.log(\"Utf8DecoderStream\", {\n      encoding: decoder.encoding,\n      fatal: decoder.fatal,\n      ignoreBOM: decoder.ignoreBOM,\n    })\n\n    console.groupEnd()\n  }\n\n  const test = async (s?: string) => {\n    console.group(\"value:\", s, \"type:\", typeof s)\n\n    const r = { s: null }\n\n    await source(s)\n      .pipeThrough(logging(\"Before Utf8EncoderStream\"))\n      .pipeThrough(new Utf8EncoderStream())\n      .pipeThrough(logging(\"After Utf8EncoderStream\"))\n      .pipeThrough(new Utf8DecoderStream())\n      .pipeThrough(logging(\"After Utf8DecoderStream\"))\n      .pipeTo(result(r))\n\n    console.assert(s === r.s || (s === undefined && r.s === \"\"), \"Not matched.\", r.s)\n    console.log(\"Result:\", r.s, \"type:\", typeof r.s)\n    console.groupEnd()\n  }\n\n  testBuiltin()\n  testProps()\n  await test(undefined)\n  await test(\"\")\n  await test(\"a\")\n  await test(\"\\ta\\nb\")\n  await test(\"a\".repeat(1024))\n\n})()"],
  "mappings": "aAAA,OAAS,qBAAAA,EAAmB,qBAAAC,MAAyB,qBAEpD,SAAY,CAEX,MAAMC,EAAUC,GAAe,IAAI,eAAe,CAChD,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAC,EACpBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAWC,GAAkB,IAAI,gBAAgB,CACrD,UAAUC,EAAOH,EAAY,CAC3B,QAAQ,IAAIE,EAAOC,CAAK,EACxBH,EAAW,QAAQG,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAUC,GAAwC,IAAI,eAAe,CACzE,MAAMF,EAAO,CACXE,EAAE,EAAIF,CACR,CACF,CAAC,EAEKG,EAAc,IAAM,CACxB,QAAQ,MAAM,SAAS,EAEvB,QAAQ,IAAI,oBAAqB,sBAAuB,UAAU,EAClE,QAAQ,IAAI,oBAAqB,sBAAuB,UAAU,EAElE,QAAQ,SAAS,CACnB,EAEMC,EAAY,IAAM,CACtB,QAAQ,MAAM,YAAY,EAE1B,MAAMC,EAAU,IAAIX,EACpB,QAAQ,IAAI,oBAAqB,CAC/B,SAAUW,EAAQ,QACpB,CAAC,EAED,MAAMC,EAAU,IAAIb,EACpB,QAAQ,IAAI,oBAAqB,CAC/B,SAAUa,EAAQ,SAClB,MAAOA,EAAQ,MACf,UAAWA,EAAQ,SACrB,CAAC,EAED,QAAQ,SAAS,CACnB,EAEMC,EAAO,MAAOX,GAAe,CACjC,QAAQ,MAAM,SAAUA,EAAG,QAAS,OAAOA,CAAC,EAE5C,MAAMM,EAAI,CAAE,EAAG,IAAK,EAEpB,MAAMP,EAAOC,CAAC,EACX,YAAYE,EAAQ,0BAA0B,CAAC,EAC/C,YAAY,IAAIJ,CAAmB,EACnC,YAAYI,EAAQ,yBAAyB,CAAC,EAC9C,YAAY,IAAIL,CAAmB,EACnC,YAAYK,EAAQ,yBAAyB,CAAC,EAC9C,OAAOG,EAAOC,CAAC,CAAC,EAEnB,QAAQ,OAAON,IAAMM,EAAE,GAAMN,IAAM,QAAaM,EAAE,IAAM,GAAK,eAAgBA,EAAE,CAAC,EAChF,QAAQ,IAAI,UAAWA,EAAE,EAAG,QAAS,OAAOA,EAAE,CAAC,EAC/C,QAAQ,SAAS,CACnB,EAEAC,EAAY,EACZC,EAAU,EACV,MAAMG,EAAK,MAAS,EACpB,MAAMA,EAAK,EAAE,EACb,MAAMA,EAAK,GAAG,EACd,MAAMA,EAAK;AAAA,EAAQ,EACnB,MAAMA,EAAK,IAAI,OAAO,IAAI,CAAC,CAE7B,GAAG",
  "names": ["Utf8DecoderStream", "Utf8EncoderStream", "source", "s", "controller", "logging", "label", "chunk", "result", "r", "testBuiltin", "testProps", "encoder", "decoder", "test"]
}
