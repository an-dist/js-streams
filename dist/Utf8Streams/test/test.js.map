{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams.ts\"\r\n\r\nconst source = (s?: string) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(s)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = (label: string) => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(label, chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst result = (r: { s: string | undefined | null }) => new WritableStream({\r\n  write(chunk) {\r\n    r.s = chunk\r\n  }\r\n})\r\n\r\nconst testBuiltin = () => {\r\n  console.group(\"Builtin\")\r\n\r\n  console.log(\"TextEncoderStream\", \"TextEncoderStream\" in globalThis)\r\n  console.log(\"TextEncoderStream\", \"TextDecoderStream\" in globalThis)\r\n\r\n  console.groupEnd()\r\n}\r\n\r\nconst testProps = () => {\r\n  console.group(\"Properties\")\r\n\r\n  const encoder = new Utf8EncoderStream()\r\n  console.log(\"Utf8EncoderStream\", {\r\n    encoding: encoder.encoding,\r\n  })\r\n\r\n  const decoder = new Utf8DecoderStream()\r\n  console.log(\"Utf8DecoderStream\", {\r\n    encoding: decoder.encoding,\r\n    fatal: decoder.fatal,\r\n    ignoreBOM: decoder.ignoreBOM,\r\n  })\r\n\r\n  console.groupEnd()\r\n}\r\n\r\nconst test = async (s?: string) => {\r\n  console.group(\"value:\", s, \"type:\", typeof s)\r\n\r\n  const r = { s: null }\r\n\r\n  await source(s)\r\n    .pipeThrough(logging(\"Before Utf8EncoderStream\"))\r\n    .pipeThrough(new Utf8EncoderStream())\r\n    .pipeThrough(logging(\"After Utf8EncoderStream\"))\r\n    .pipeThrough(new Utf8DecoderStream())\r\n    .pipeThrough(logging(\"After Utf8DecoderStream\"))\r\n    .pipeTo(result(r))\r\n\r\n  console.assert(s === r.s || (s === undefined && r.s === \"\"), \"Not matched.\", r.s)\r\n  console.log(\"Result:\", r.s, \"type:\", typeof r.s)\r\n  console.groupEnd()\r\n}\r\n\r\ntestBuiltin()\r\ntestProps()\r\nawait test(undefined)\r\nawait test(\"\")\r\nawait test(\"a\")\r\nawait test(\"\\ta\\nb\")\r\nawait test(\"a\".repeat(1024))"],
  "mappings": "AAAA,SAAS,mBAAmB,yBAAyB;AAErD,MAAM,SAAS,CAAC,MAAe,IAAI,eAAe;AAAA,EAChD,MAAM,YAAY;AAChB,eAAW,QAAQ,CAAC;AACpB,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,MAAM,UAAU,CAAC,UAAkB,IAAI,gBAAgB;AAAA,EACrD,UAAU,OAAO,YAAY;AAC3B,YAAQ,IAAI,OAAO,KAAK;AACxB,eAAW,QAAQ,KAAK;AAAA,EAC1B;AACF,CAAC;AAED,MAAM,SAAS,CAAC,MAAwC,IAAI,eAAe;AAAA,EACzE,MAAM,OAAO;AACX,MAAE,IAAI;AAAA,EACR;AACF,CAAC;AAED,MAAM,cAAc,MAAM;AACxB,UAAQ,MAAM,SAAS;AAEvB,UAAQ,IAAI,qBAAqB,uBAAuB,UAAU;AAClE,UAAQ,IAAI,qBAAqB,uBAAuB,UAAU;AAElE,UAAQ,SAAS;AACnB;AAEA,MAAM,YAAY,MAAM;AACtB,UAAQ,MAAM,YAAY;AAE1B,QAAM,UAAU,IAAI,kBAAkB;AACtC,UAAQ,IAAI,qBAAqB;AAAA,IAC/B,UAAU,QAAQ;AAAA,EACpB,CAAC;AAED,QAAM,UAAU,IAAI,kBAAkB;AACtC,UAAQ,IAAI,qBAAqB;AAAA,IAC/B,UAAU,QAAQ;AAAA,IAClB,OAAO,QAAQ;AAAA,IACf,WAAW,QAAQ;AAAA,EACrB,CAAC;AAED,UAAQ,SAAS;AACnB;AAEA,MAAM,OAAO,OAAO,MAAe;AACjC,UAAQ,MAAM,UAAU,GAAG,SAAS,OAAO,CAAC;AAE5C,QAAM,IAAI,EAAE,GAAG,KAAK;AAEpB,QAAM,OAAO,CAAC,EACX,YAAY,QAAQ,0BAA0B,CAAC,EAC/C,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,QAAQ,yBAAyB,CAAC,EAC9C,YAAY,IAAI,kBAAkB,CAAC,EACnC,YAAY,QAAQ,yBAAyB,CAAC,EAC9C,OAAO,OAAO,CAAC,CAAC;AAEnB,UAAQ,OAAO,MAAM,EAAE,KAAM,MAAM,UAAa,EAAE,MAAM,IAAK,gBAAgB,EAAE,CAAC;AAChF,UAAQ,IAAI,WAAW,EAAE,GAAG,SAAS,OAAO,EAAE,CAAC;AAC/C,UAAQ,SAAS;AACnB;AAEA,YAAY;AACZ,UAAU;AACV,MAAM,KAAK,MAAS;AACpB,MAAM,KAAK,EAAE;AACb,MAAM,KAAK,GAAG;AACd,MAAM,KAAK,OAAQ;AACnB,MAAM,KAAK,IAAI,OAAO,IAAI,CAAC;",
  "names": []
}
