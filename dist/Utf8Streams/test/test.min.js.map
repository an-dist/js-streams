{
  "version": 3,
  "sources": ["test.ts"],
  "sourcesContent": ["import { Utf8DecoderStream, Utf8EncoderStream } from \"../Utf8Streams.ts\"\r\n\r\nconst source = (s?: string) => new ReadableStream({\r\n  start(controller) {\r\n    controller.enqueue(s)\r\n    controller.close()\r\n  }\r\n})\r\n\r\nconst logging = (label: string) => new TransformStream({\r\n  transform(chunk, controller) {\r\n    console.log(label, chunk)\r\n    controller.enqueue(chunk)\r\n  }\r\n})\r\n\r\nconst result = (r: { s: string | undefined | null }) => new WritableStream({\r\n  write(chunk) {\r\n    r.s = chunk\r\n  }\r\n})\r\n\r\nconst testBuiltin = () => {\r\n  console.group(\"Builtin\")\r\n\r\n  console.log(\"TextEncoderStream\", \"TextEncoderStream\" in globalThis)\r\n  console.log(\"TextEncoderStream\", \"TextDecoderStream\" in globalThis)\r\n\r\n  console.groupEnd()\r\n}\r\n\r\nconst testProps = () => {\r\n  console.group(\"Properties\")\r\n\r\n  const encoder = new Utf8EncoderStream()\r\n  console.log(\"Utf8EncoderStream\", {\r\n    encoding: encoder.encoding,\r\n  })\r\n\r\n  const decoder = new Utf8DecoderStream()\r\n  console.log(\"Utf8DecoderStream\", {\r\n    encoding: decoder.encoding,\r\n    fatal: decoder.fatal,\r\n    ignoreBOM: decoder.ignoreBOM,\r\n  })\r\n\r\n  console.groupEnd()\r\n}\r\n\r\nconst test = async (s?: string) => {\r\n  console.group(\"value:\", s, \"type:\", typeof s)\r\n\r\n  const r = { s: null }\r\n\r\n  await source(s)\r\n    .pipeThrough(logging(\"Before Utf8EncoderStream\"))\r\n    .pipeThrough(new Utf8EncoderStream())\r\n    .pipeThrough(logging(\"After Utf8EncoderStream\"))\r\n    .pipeThrough(new Utf8DecoderStream())\r\n    .pipeThrough(logging(\"After Utf8DecoderStream\"))\r\n    .pipeTo(result(r))\r\n\r\n  console.assert(s === r.s || (s === undefined && r.s === \"\"), \"Not matched.\", r.s)\r\n  console.log(\"Result:\", r.s, \"type:\", typeof r.s)\r\n  console.groupEnd()\r\n}\r\n\r\ntestBuiltin()\r\ntestProps()\r\nawait test(undefined)\r\nawait test(\"\")\r\nawait test(\"a\")\r\nawait test(\"\\ta\\nb\")\r\nawait test(\"a\".repeat(1024))"],
  "mappings": "AAAA,OAAS,qBAAAA,EAAmB,qBAAAC,MAAyB,oBAErD,MAAMC,EAAUC,GAAe,IAAI,eAAe,CAChD,MAAMC,EAAY,CAChBA,EAAW,QAAQD,CAAC,EACpBC,EAAW,MAAM,CACnB,CACF,CAAC,EAEKC,EAAWC,GAAkB,IAAI,gBAAgB,CACrD,UAAUC,EAAOH,EAAY,CAC3B,QAAQ,IAAIE,EAAOC,CAAK,EACxBH,EAAW,QAAQG,CAAK,CAC1B,CACF,CAAC,EAEKC,EAAUC,GAAwC,IAAI,eAAe,CACzE,MAAMF,EAAO,CACXE,EAAE,EAAIF,CACR,CACF,CAAC,EAEKG,EAAc,IAAM,CACxB,QAAQ,MAAM,SAAS,EAEvB,QAAQ,IAAI,oBAAqB,sBAAuB,UAAU,EAClE,QAAQ,IAAI,oBAAqB,sBAAuB,UAAU,EAElE,QAAQ,SAAS,CACnB,EAEMC,EAAY,IAAM,CACtB,QAAQ,MAAM,YAAY,EAE1B,MAAMC,EAAU,IAAIX,EACpB,QAAQ,IAAI,oBAAqB,CAC/B,SAAUW,EAAQ,QACpB,CAAC,EAED,MAAMC,EAAU,IAAIb,EACpB,QAAQ,IAAI,oBAAqB,CAC/B,SAAUa,EAAQ,SAClB,MAAOA,EAAQ,MACf,UAAWA,EAAQ,SACrB,CAAC,EAED,QAAQ,SAAS,CACnB,EAEMC,EAAO,MAAOX,GAAe,CACjC,QAAQ,MAAM,SAAUA,EAAG,QAAS,OAAOA,CAAC,EAE5C,MAAMM,EAAI,CAAE,EAAG,IAAK,EAEpB,MAAMP,EAAOC,CAAC,EACX,YAAYE,EAAQ,0BAA0B,CAAC,EAC/C,YAAY,IAAIJ,CAAmB,EACnC,YAAYI,EAAQ,yBAAyB,CAAC,EAC9C,YAAY,IAAIL,CAAmB,EACnC,YAAYK,EAAQ,yBAAyB,CAAC,EAC9C,OAAOG,EAAOC,CAAC,CAAC,EAEnB,QAAQ,OAAON,IAAMM,EAAE,GAAMN,IAAM,QAAaM,EAAE,IAAM,GAAK,eAAgBA,EAAE,CAAC,EAChF,QAAQ,IAAI,UAAWA,EAAE,EAAG,QAAS,OAAOA,EAAE,CAAC,EAC/C,QAAQ,SAAS,CACnB,EAEAC,EAAY,EACZC,EAAU,EACV,MAAMG,EAAK,MAAS,EACpB,MAAMA,EAAK,EAAE,EACb,MAAMA,EAAK,GAAG,EACd,MAAMA,EAAK;AAAA,EAAQ,EACnB,MAAMA,EAAK,IAAI,OAAO,IAAI,CAAC",
  "names": ["Utf8DecoderStream", "Utf8EncoderStream", "source", "s", "controller", "logging", "label", "chunk", "result", "r", "testBuiltin", "testProps", "encoder", "decoder", "test"]
}
