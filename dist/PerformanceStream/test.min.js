import{PerformanceStreamBuilder as a}from"./PerformanceStream.min.js";import{sleep as s}from"../funcs/sleep/sleep.min.js";const m=()=>new ReadableStream({start(e){for(const r of[1,2,3,4,5])e.enqueue(r);e.close()}}),p=()=>new WritableStream({write(e){console.log(`writed: ${e}`),console.groupEnd()}}),i=()=>new TransformStream({transform(e,r){console.group(`chunk=${e}`),r.enqueue(e)}}),o=e=>new TransformStream({async transform(r,t){console.log(`chunk=${r}, name=${e}`),await s(100),t.enqueue(r)}}),n=new a("perf","start","end");await m().pipeThrough(i()).pipeThrough(n.pipe(o("transform 1")).pipe(o("transform 2")).pipe(o("transform 3")).build()).pipeTo(p()),console.table(n.result());
//# sourceMappingURL=test.min.js.map
